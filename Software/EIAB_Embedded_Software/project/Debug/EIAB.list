
EIAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000280c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002abc  08002abc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002abc  08002abc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002abc  08002abc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  08002ad0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002ad0  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c6b  00000000  00000000  0002a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002d060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002d980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7bc  00000000  00000000  0002e170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5bc  00000000  00000000  0004a92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b08c5  00000000  00000000  00054ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001057ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b4  00000000  00000000  00105800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080029cc 	.word	0x080029cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080029cc 	.word	0x080029cc

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f922 	bl	800046c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	200f      	movs	r0, #15
 800022a:	f000 f815 	bl	8000258 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f000 f805 	bl	8000248 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
	...

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000260:	2300      	movs	r3, #0
 8000262:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <HAL_InitTick+0x68>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d022      	beq.n	80002b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <HAL_InitTick+0x6c>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <HAL_InitTick+0x68>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000278:	fbb1 f3f3 	udiv	r3, r1, r3
 800027c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f918 	bl	80004b6 <HAL_SYSTICK_Config>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d10f      	bne.n	80002ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b0f      	cmp	r3, #15
 8000290:	d809      	bhi.n	80002a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000292:	2200      	movs	r2, #0
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	f04f 30ff 	mov.w	r0, #4294967295
 800029a:	f000 f8f2 	bl	8000482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <HAL_InitTick+0x70>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	6013      	str	r3, [r2, #0]
 80002a4:	e007      	b.n	80002b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80002a6:	2301      	movs	r3, #1
 80002a8:	73fb      	strb	r3, [r7, #15]
 80002aa:	e004      	b.n	80002b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002ac:	2301      	movs	r3, #1
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	e001      	b.n	80002b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000004 	.word	0x20000004
 80002c4:	20000008 	.word	0x20000008
 80002c8:	20000000 	.word	0x20000000

080002cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <HAL_IncTick+0x1c>)
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <HAL_IncTick+0x20>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4413      	add	r3, r2
 80002da:	4a03      	ldr	r2, [pc, #12]	; (80002e8 <HAL_IncTick+0x1c>)
 80002dc:	6013      	str	r3, [r2, #0]
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	20000028 	.word	0x20000028
 80002ec:	20000004 	.word	0x20000004

080002f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  return uwTick;
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <HAL_GetTick+0x14>)
 80002f6:	681b      	ldr	r3, [r3, #0]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	20000028 	.word	0x20000028

08000308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <__NVIC_SetPriorityGrouping+0x44>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000324:	4013      	ands	r3, r2
 8000326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800033a:	4a04      	ldr	r2, [pc, #16]	; (800034c <__NVIC_SetPriorityGrouping+0x44>)
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	60d3      	str	r3, [r2, #12]
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <__NVIC_GetPriorityGrouping+0x18>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	0a1b      	lsrs	r3, r3, #8
 800035a:	f003 0307 	and.w	r3, r3, #7
}
 800035e:	4618      	mov	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	e000ed00 	.word	0xe000ed00

0800036c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	6039      	str	r1, [r7, #0]
 8000376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037c:	2b00      	cmp	r3, #0
 800037e:	db0a      	blt.n	8000396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	b2da      	uxtb	r2, r3
 8000384:	490c      	ldr	r1, [pc, #48]	; (80003b8 <__NVIC_SetPriority+0x4c>)
 8000386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038a:	0112      	lsls	r2, r2, #4
 800038c:	b2d2      	uxtb	r2, r2
 800038e:	440b      	add	r3, r1
 8000390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000394:	e00a      	b.n	80003ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4908      	ldr	r1, [pc, #32]	; (80003bc <__NVIC_SetPriority+0x50>)
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	f003 030f 	and.w	r3, r3, #15
 80003a2:	3b04      	subs	r3, #4
 80003a4:	0112      	lsls	r2, r2, #4
 80003a6:	b2d2      	uxtb	r2, r2
 80003a8:	440b      	add	r3, r1
 80003aa:	761a      	strb	r2, [r3, #24]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	e000e100 	.word	0xe000e100
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b089      	sub	sp, #36	; 0x24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f003 0307 	and.w	r3, r3, #7
 80003d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	f1c3 0307 	rsb	r3, r3, #7
 80003da:	2b04      	cmp	r3, #4
 80003dc:	bf28      	it	cs
 80003de:	2304      	movcs	r3, #4
 80003e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	3304      	adds	r3, #4
 80003e6:	2b06      	cmp	r3, #6
 80003e8:	d902      	bls.n	80003f0 <NVIC_EncodePriority+0x30>
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	3b03      	subs	r3, #3
 80003ee:	e000      	b.n	80003f2 <NVIC_EncodePriority+0x32>
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f4:	f04f 32ff 	mov.w	r2, #4294967295
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	fa02 f303 	lsl.w	r3, r2, r3
 80003fe:	43da      	mvns	r2, r3
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	401a      	ands	r2, r3
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000408:	f04f 31ff 	mov.w	r1, #4294967295
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	43d9      	mvns	r1, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000418:	4313      	orrs	r3, r2
         );
}
 800041a:	4618      	mov	r0, r3
 800041c:	3724      	adds	r7, #36	; 0x24
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
	...

08000428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3b01      	subs	r3, #1
 8000434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000438:	d301      	bcc.n	800043e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800043a:	2301      	movs	r3, #1
 800043c:	e00f      	b.n	800045e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <SysTick_Config+0x40>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3b01      	subs	r3, #1
 8000444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000446:	210f      	movs	r1, #15
 8000448:	f04f 30ff 	mov.w	r0, #4294967295
 800044c:	f7ff ff8e 	bl	800036c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <SysTick_Config+0x40>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000456:	4b04      	ldr	r3, [pc, #16]	; (8000468 <SysTick_Config+0x40>)
 8000458:	2207      	movs	r2, #7
 800045a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800045c:	2300      	movs	r3, #0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	e000e010 	.word	0xe000e010

0800046c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f7ff ff47 	bl	8000308 <__NVIC_SetPriorityGrouping>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b086      	sub	sp, #24
 8000486:	af00      	add	r7, sp, #0
 8000488:	4603      	mov	r3, r0
 800048a:	60b9      	str	r1, [r7, #8]
 800048c:	607a      	str	r2, [r7, #4]
 800048e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000490:	f7ff ff5e 	bl	8000350 <__NVIC_GetPriorityGrouping>
 8000494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	68b9      	ldr	r1, [r7, #8]
 800049a:	6978      	ldr	r0, [r7, #20]
 800049c:	f7ff ff90 	bl	80003c0 <NVIC_EncodePriority>
 80004a0:	4602      	mov	r2, r0
 80004a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004a6:	4611      	mov	r1, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ff5f 	bl	800036c <__NVIC_SetPriority>
}
 80004ae:	bf00      	nop
 80004b0:	3718      	adds	r7, #24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f7ff ffb2 	bl	8000428 <SysTick_Config>
 80004c4:	4603      	mov	r3, r0
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d141      	bne.n	8000562 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80004de:	4b4b      	ldr	r3, [pc, #300]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80004e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004ea:	d131      	bne.n	8000550 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80004ec:	4b47      	ldr	r3, [pc, #284]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80004ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004f2:	4a46      	ldr	r2, [pc, #280]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80004f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fc:	4b43      	ldr	r3, [pc, #268]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000504:	4a41      	ldr	r2, [pc, #260]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800050c:	4b40      	ldr	r3, [pc, #256]	; (8000610 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2232      	movs	r2, #50	; 0x32
 8000512:	fb02 f303 	mul.w	r3, r2, r3
 8000516:	4a3f      	ldr	r2, [pc, #252]	; (8000614 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000518:	fba2 2303 	umull	r2, r3, r2, r3
 800051c:	0c9b      	lsrs	r3, r3, #18
 800051e:	3301      	adds	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000522:	e002      	b.n	800052a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3b01      	subs	r3, #1
 8000528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800052a:	4b38      	ldr	r3, [pc, #224]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000536:	d102      	bne.n	800053e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1f2      	bne.n	8000524 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800053e:	4b33      	ldr	r3, [pc, #204]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800054a:	d158      	bne.n	80005fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800054c:	2303      	movs	r3, #3
 800054e:	e057      	b.n	8000600 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000550:	4b2e      	ldr	r3, [pc, #184]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000556:	4a2d      	ldr	r2, [pc, #180]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800055c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000560:	e04d      	b.n	80005fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000568:	d141      	bne.n	80005ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000576:	d131      	bne.n	80005dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800057a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800057e:	4a23      	ldr	r2, [pc, #140]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	4b20      	ldr	r3, [pc, #128]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000596:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000598:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2232      	movs	r2, #50	; 0x32
 800059e:	fb02 f303 	mul.w	r3, r2, r3
 80005a2:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80005a4:	fba2 2303 	umull	r2, r3, r2, r3
 80005a8:	0c9b      	lsrs	r3, r3, #18
 80005aa:	3301      	adds	r3, #1
 80005ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80005ae:	e002      	b.n	80005b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005c2:	d102      	bne.n	80005ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f2      	bne.n	80005b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005d6:	d112      	bne.n	80005fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80005d8:	2303      	movs	r3, #3
 80005da:	e011      	b.n	8000600 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80005ec:	e007      	b.n	80005fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40007000 	.word	0x40007000
 8000610:	20000008 	.word	0x20000008
 8000614:	431bde83 	.word	0x431bde83

08000618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d101      	bne.n	800062a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e306      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d075      	beq.n	8000722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000636:	4b97      	ldr	r3, [pc, #604]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	f003 030c 	and.w	r3, r3, #12
 800063e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000640:	4b94      	ldr	r3, [pc, #592]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	f003 0303 	and.w	r3, r3, #3
 8000648:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	2b0c      	cmp	r3, #12
 800064e:	d102      	bne.n	8000656 <HAL_RCC_OscConfig+0x3e>
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2b03      	cmp	r3, #3
 8000654:	d002      	beq.n	800065c <HAL_RCC_OscConfig+0x44>
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	2b08      	cmp	r3, #8
 800065a:	d10b      	bne.n	8000674 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800065c:	4b8d      	ldr	r3, [pc, #564]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000664:	2b00      	cmp	r3, #0
 8000666:	d05b      	beq.n	8000720 <HAL_RCC_OscConfig+0x108>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d157      	bne.n	8000720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	e2e1      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800067c:	d106      	bne.n	800068c <HAL_RCC_OscConfig+0x74>
 800067e:	4b85      	ldr	r3, [pc, #532]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a84      	ldr	r2, [pc, #528]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	e01d      	b.n	80006c8 <HAL_RCC_OscConfig+0xb0>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000694:	d10c      	bne.n	80006b0 <HAL_RCC_OscConfig+0x98>
 8000696:	4b7f      	ldr	r3, [pc, #508]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a7e      	ldr	r2, [pc, #504]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 800069c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	4b7c      	ldr	r3, [pc, #496]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a7b      	ldr	r2, [pc, #492]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80006a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	e00b      	b.n	80006c8 <HAL_RCC_OscConfig+0xb0>
 80006b0:	4b78      	ldr	r3, [pc, #480]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a77      	ldr	r2, [pc, #476]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80006b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b75      	ldr	r3, [pc, #468]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a74      	ldr	r2, [pc, #464]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d013      	beq.n	80006f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80006d0:	f7ff fe0e 	bl	80002f0 <HAL_GetTick>
 80006d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80006d6:	e008      	b.n	80006ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80006d8:	f7ff fe0a 	bl	80002f0 <HAL_GetTick>
 80006dc:	4602      	mov	r2, r0
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	2b64      	cmp	r3, #100	; 0x64
 80006e4:	d901      	bls.n	80006ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e2a6      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80006ea:	4b6a      	ldr	r3, [pc, #424]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f0      	beq.n	80006d8 <HAL_RCC_OscConfig+0xc0>
 80006f6:	e014      	b.n	8000722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80006f8:	f7ff fdfa 	bl	80002f0 <HAL_GetTick>
 80006fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80006fe:	e008      	b.n	8000712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000700:	f7ff fdf6 	bl	80002f0 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	2b64      	cmp	r3, #100	; 0x64
 800070c:	d901      	bls.n	8000712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800070e:	2303      	movs	r3, #3
 8000710:	e292      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000712:	4b60      	ldr	r3, [pc, #384]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f0      	bne.n	8000700 <HAL_RCC_OscConfig+0xe8>
 800071e:	e000      	b.n	8000722 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	2b00      	cmp	r3, #0
 800072c:	d075      	beq.n	800081a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800072e:	4b59      	ldr	r3, [pc, #356]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f003 030c 	and.w	r3, r3, #12
 8000736:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000738:	4b56      	ldr	r3, [pc, #344]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f003 0303 	and.w	r3, r3, #3
 8000740:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	2b0c      	cmp	r3, #12
 8000746:	d102      	bne.n	800074e <HAL_RCC_OscConfig+0x136>
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d002      	beq.n	8000754 <HAL_RCC_OscConfig+0x13c>
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	2b04      	cmp	r3, #4
 8000752:	d11f      	bne.n	8000794 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000754:	4b4f      	ldr	r3, [pc, #316]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800075c:	2b00      	cmp	r3, #0
 800075e:	d005      	beq.n	800076c <HAL_RCC_OscConfig+0x154>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000768:	2301      	movs	r3, #1
 800076a:	e265      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800076c:	4b49      	ldr	r3, [pc, #292]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	061b      	lsls	r3, r3, #24
 800077a:	4946      	ldr	r1, [pc, #280]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 800077c:	4313      	orrs	r3, r2
 800077e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000780:	4b45      	ldr	r3, [pc, #276]	; (8000898 <HAL_RCC_OscConfig+0x280>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd67 	bl	8000258 <HAL_InitTick>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d043      	beq.n	8000818 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000790:	2301      	movs	r3, #1
 8000792:	e251      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d023      	beq.n	80007e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800079c:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a3c      	ldr	r2, [pc, #240]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80007a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007a8:	f7ff fda2 	bl	80002f0 <HAL_GetTick>
 80007ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80007ae:	e008      	b.n	80007c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007b0:	f7ff fd9e 	bl	80002f0 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d901      	bls.n	80007c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80007be:	2303      	movs	r3, #3
 80007c0:	e23a      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80007c2:	4b34      	ldr	r3, [pc, #208]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f0      	beq.n	80007b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007ce:	4b31      	ldr	r3, [pc, #196]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	061b      	lsls	r3, r3, #24
 80007dc:	492d      	ldr	r1, [pc, #180]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80007de:	4313      	orrs	r3, r2
 80007e0:	604b      	str	r3, [r1, #4]
 80007e2:	e01a      	b.n	800081a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80007e4:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a2a      	ldr	r2, [pc, #168]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 80007ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007f0:	f7ff fd7e 	bl	80002f0 <HAL_GetTick>
 80007f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80007f6:	e008      	b.n	800080a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007f8:	f7ff fd7a 	bl	80002f0 <HAL_GetTick>
 80007fc:	4602      	mov	r2, r0
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	2b02      	cmp	r3, #2
 8000804:	d901      	bls.n	800080a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000806:	2303      	movs	r3, #3
 8000808:	e216      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1f0      	bne.n	80007f8 <HAL_RCC_OscConfig+0x1e0>
 8000816:	e000      	b.n	800081a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000818:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	2b00      	cmp	r3, #0
 8000824:	d041      	beq.n	80008aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d01c      	beq.n	8000868 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000834:	4a17      	ldr	r2, [pc, #92]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800083e:	f7ff fd57 	bl	80002f0 <HAL_GetTick>
 8000842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000844:	e008      	b.n	8000858 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000846:	f7ff fd53 	bl	80002f0 <HAL_GetTick>
 800084a:	4602      	mov	r2, r0
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	2b02      	cmp	r3, #2
 8000852:	d901      	bls.n	8000858 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000854:	2303      	movs	r3, #3
 8000856:	e1ef      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 800085a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0ef      	beq.n	8000846 <HAL_RCC_OscConfig+0x22e>
 8000866:	e020      	b.n	80008aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 800086a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <HAL_RCC_OscConfig+0x27c>)
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000878:	f7ff fd3a 	bl	80002f0 <HAL_GetTick>
 800087c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800087e:	e00d      	b.n	800089c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000880:	f7ff fd36 	bl	80002f0 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	2b02      	cmp	r3, #2
 800088c:	d906      	bls.n	800089c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800088e:	2303      	movs	r3, #3
 8000890:	e1d2      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000
 8000898:	20000000 	.word	0x20000000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800089c:	4b8c      	ldr	r3, [pc, #560]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 800089e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1ea      	bne.n	8000880 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 80a6 	beq.w	8000a04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80008bc:	4b84      	ldr	r3, [pc, #528]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 80008be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <HAL_RCC_OscConfig+0x2b4>
 80008c8:	2301      	movs	r3, #1
 80008ca:	e000      	b.n	80008ce <HAL_RCC_OscConfig+0x2b6>
 80008cc:	2300      	movs	r3, #0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00d      	beq.n	80008ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b7f      	ldr	r3, [pc, #508]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	4a7e      	ldr	r2, [pc, #504]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	6593      	str	r3, [r2, #88]	; 0x58
 80008de:	4b7c      	ldr	r3, [pc, #496]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80008ea:	2301      	movs	r3, #1
 80008ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80008ee:	4b79      	ldr	r3, [pc, #484]	; (8000ad4 <HAL_RCC_OscConfig+0x4bc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d118      	bne.n	800092c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80008fa:	4b76      	ldr	r3, [pc, #472]	; (8000ad4 <HAL_RCC_OscConfig+0x4bc>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a75      	ldr	r2, [pc, #468]	; (8000ad4 <HAL_RCC_OscConfig+0x4bc>)
 8000900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000906:	f7ff fcf3 	bl	80002f0 <HAL_GetTick>
 800090a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800090c:	e008      	b.n	8000920 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800090e:	f7ff fcef 	bl	80002f0 <HAL_GetTick>
 8000912:	4602      	mov	r2, r0
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	2b02      	cmp	r3, #2
 800091a:	d901      	bls.n	8000920 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800091c:	2303      	movs	r3, #3
 800091e:	e18b      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000920:	4b6c      	ldr	r3, [pc, #432]	; (8000ad4 <HAL_RCC_OscConfig+0x4bc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000928:	2b00      	cmp	r3, #0
 800092a:	d0f0      	beq.n	800090e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d108      	bne.n	8000946 <HAL_RCC_OscConfig+0x32e>
 8000934:	4b66      	ldr	r3, [pc, #408]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800093a:	4a65      	ldr	r2, [pc, #404]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000944:	e024      	b.n	8000990 <HAL_RCC_OscConfig+0x378>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b05      	cmp	r3, #5
 800094c:	d110      	bne.n	8000970 <HAL_RCC_OscConfig+0x358>
 800094e:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000954:	4a5e      	ldr	r2, [pc, #376]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800095e:	4b5c      	ldr	r3, [pc, #368]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000964:	4a5a      	ldr	r2, [pc, #360]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800096e:	e00f      	b.n	8000990 <HAL_RCC_OscConfig+0x378>
 8000970:	4b57      	ldr	r3, [pc, #348]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000976:	4a56      	ldr	r2, [pc, #344]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000978:	f023 0301 	bic.w	r3, r3, #1
 800097c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000980:	4b53      	ldr	r3, [pc, #332]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000986:	4a52      	ldr	r2, [pc, #328]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000988:	f023 0304 	bic.w	r3, r3, #4
 800098c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d016      	beq.n	80009c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000998:	f7ff fcaa 	bl	80002f0 <HAL_GetTick>
 800099c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800099e:	e00a      	b.n	80009b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009a0:	f7ff fca6 	bl	80002f0 <HAL_GetTick>
 80009a4:	4602      	mov	r2, r0
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d901      	bls.n	80009b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80009b2:	2303      	movs	r3, #3
 80009b4:	e140      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80009b6:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 80009b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d0ed      	beq.n	80009a0 <HAL_RCC_OscConfig+0x388>
 80009c4:	e015      	b.n	80009f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009c6:	f7ff fc93 	bl	80002f0 <HAL_GetTick>
 80009ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80009cc:	e00a      	b.n	80009e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009ce:	f7ff fc8f 	bl	80002f0 <HAL_GetTick>
 80009d2:	4602      	mov	r2, r0
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009dc:	4293      	cmp	r3, r2
 80009de:	d901      	bls.n	80009e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80009e0:	2303      	movs	r3, #3
 80009e2:	e129      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80009e4:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 80009e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1ed      	bne.n	80009ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d105      	bne.n	8000a04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009f8:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fc:	4a34      	ldr	r2, [pc, #208]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 80009fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 0320 	and.w	r3, r3, #32
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d03c      	beq.n	8000a8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d01c      	beq.n	8000a52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000a18:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a1e:	4a2c      	ldr	r2, [pc, #176]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a28:	f7ff fc62 	bl	80002f0 <HAL_GetTick>
 8000a2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000a2e:	e008      	b.n	8000a42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000a30:	f7ff fc5e 	bl	80002f0 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d901      	bls.n	8000a42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e0fa      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000a42:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0ef      	beq.n	8000a30 <HAL_RCC_OscConfig+0x418>
 8000a50:	e01b      	b.n	8000a8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000a5a:	f023 0301 	bic.w	r3, r3, #1
 8000a5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a62:	f7ff fc45 	bl	80002f0 <HAL_GetTick>
 8000a66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000a68:	e008      	b.n	8000a7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000a6a:	f7ff fc41 	bl	80002f0 <HAL_GetTick>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d901      	bls.n	8000a7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	e0dd      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1ef      	bne.n	8000a6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f000 80d1 	beq.w	8000c36 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f003 030c 	and.w	r3, r3, #12
 8000a9c:	2b0c      	cmp	r3, #12
 8000a9e:	f000 808b 	beq.w	8000bb8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d15e      	bne.n	8000b68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_RCC_OscConfig+0x4b8>)
 8000ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ab6:	f7ff fc1b 	bl	80002f0 <HAL_GetTick>
 8000aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000abc:	e00c      	b.n	8000ad8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000abe:	f7ff fc17 	bl	80002f0 <HAL_GetTick>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d905      	bls.n	8000ad8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8000acc:	2303      	movs	r3, #3
 8000ace:	e0b3      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ad8:	4b59      	ldr	r3, [pc, #356]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1ec      	bne.n	8000abe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ae4:	4b56      	ldr	r3, [pc, #344]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	4b56      	ldr	r3, [pc, #344]	; (8000c44 <HAL_RCC_OscConfig+0x62c>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	6a11      	ldr	r1, [r2, #32]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000af4:	3a01      	subs	r2, #1
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	4311      	orrs	r1, r2
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000afe:	0212      	lsls	r2, r2, #8
 8000b00:	4311      	orrs	r1, r2
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b06:	0852      	lsrs	r2, r2, #1
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	0552      	lsls	r2, r2, #21
 8000b0c:	4311      	orrs	r1, r2
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b12:	0852      	lsrs	r2, r2, #1
 8000b14:	3a01      	subs	r2, #1
 8000b16:	0652      	lsls	r2, r2, #25
 8000b18:	4311      	orrs	r1, r2
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b1e:	06d2      	lsls	r2, r2, #27
 8000b20:	430a      	orrs	r2, r1
 8000b22:	4947      	ldr	r1, [pc, #284]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b28:	4b45      	ldr	r3, [pc, #276]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a44      	ldr	r2, [pc, #272]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000b34:	4b42      	ldr	r3, [pc, #264]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	4a41      	ldr	r2, [pc, #260]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b40:	f7ff fbd6 	bl	80002f0 <HAL_GetTick>
 8000b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000b46:	e008      	b.n	8000b5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b48:	f7ff fbd2 	bl	80002f0 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d901      	bls.n	8000b5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8000b56:	2303      	movs	r3, #3
 8000b58:	e06e      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f0      	beq.n	8000b48 <HAL_RCC_OscConfig+0x530>
 8000b66:	e066      	b.n	8000c36 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b68:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a34      	ldr	r2, [pc, #208]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b72:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b7a:	f023 0303 	bic.w	r3, r3, #3
 8000b7e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000b86:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b90:	f7ff fbae 	bl	80002f0 <HAL_GetTick>
 8000b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b96:	e008      	b.n	8000baa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b98:	f7ff fbaa 	bl	80002f0 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d901      	bls.n	8000baa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e046      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f0      	bne.n	8000b98 <HAL_RCC_OscConfig+0x580>
 8000bb6:	e03e      	b.n	8000c36 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d101      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e039      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <HAL_RCC_OscConfig+0x628>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f003 0203 	and.w	r2, r3, #3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d12c      	bne.n	8000c32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	3b01      	subs	r3, #1
 8000be4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d123      	bne.n	8000c32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d11b      	bne.n	8000c32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d113      	bne.n	8000c32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	085b      	lsrs	r3, r3, #1
 8000c16:	3b01      	subs	r3, #1
 8000c18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d109      	bne.n	8000c32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c28:	085b      	lsrs	r3, r3, #1
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d001      	beq.n	8000c36 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000
 8000c44:	019f800c 	.word	0x019f800c

08000c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e11e      	b.n	8000e9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c60:	4b91      	ldr	r3, [pc, #580]	; (8000ea8 <HAL_RCC_ClockConfig+0x260>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 030f 	and.w	r3, r3, #15
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d910      	bls.n	8000c90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c6e:	4b8e      	ldr	r3, [pc, #568]	; (8000ea8 <HAL_RCC_ClockConfig+0x260>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f023 020f 	bic.w	r2, r3, #15
 8000c76:	498c      	ldr	r1, [pc, #560]	; (8000ea8 <HAL_RCC_ClockConfig+0x260>)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c7e:	4b8a      	ldr	r3, [pc, #552]	; (8000ea8 <HAL_RCC_ClockConfig+0x260>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d001      	beq.n	8000c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e106      	b.n	8000e9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d073      	beq.n	8000d84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d129      	bne.n	8000cf8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ca4:	4b81      	ldr	r3, [pc, #516]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e0f4      	b.n	8000e9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8000cb4:	f000 f966 	bl	8000f84 <RCC_GetSysClockFreqFromPLLSource>
 8000cb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4a7c      	ldr	r2, [pc, #496]	; (8000eb0 <HAL_RCC_ClockConfig+0x268>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d93f      	bls.n	8000d42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8000cc2:	4b7a      	ldr	r3, [pc, #488]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d009      	beq.n	8000ce2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d033      	beq.n	8000d42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d12f      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000ce2:	4b72      	ldr	r3, [pc, #456]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cea:	4a70      	ldr	r2, [pc, #448]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e024      	b.n	8000d42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d107      	bne.n	8000d10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d00:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d109      	bne.n	8000d20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e0c6      	b.n	8000e9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d10:	4b66      	ldr	r3, [pc, #408]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e0be      	b.n	8000e9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8000d20:	f000 f8ce 	bl	8000ec0 <HAL_RCC_GetSysClockFreq>
 8000d24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4a61      	ldr	r2, [pc, #388]	; (8000eb0 <HAL_RCC_ClockConfig+0x268>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d909      	bls.n	8000d42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000d2e:	4b5f      	ldr	r3, [pc, #380]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d36:	4a5d      	ldr	r2, [pc, #372]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000d42:	4b5a      	ldr	r3, [pc, #360]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f023 0203 	bic.w	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4957      	ldr	r1, [pc, #348]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000d54:	f7ff facc 	bl	80002f0 <HAL_GetTick>
 8000d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d5a:	e00a      	b.n	8000d72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5c:	f7ff fac8 	bl	80002f0 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e095      	b.n	8000e9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d72:	4b4e      	ldr	r3, [pc, #312]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 020c 	and.w	r2, r3, #12
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d1eb      	bne.n	8000d5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d023      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d9c:	4b43      	ldr	r3, [pc, #268]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4a42      	ldr	r2, [pc, #264]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000da6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000dbc:	4a3b      	ldr	r2, [pc, #236]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000dbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000dc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dc4:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	4936      	ldr	r1, [pc, #216]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	608b      	str	r3, [r1, #8]
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	2b80      	cmp	r3, #128	; 0x80
 8000ddc:	d105      	bne.n	8000dea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8000dde:	4b33      	ldr	r3, [pc, #204]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	4a32      	ldr	r2, [pc, #200]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000de4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000de8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <HAL_RCC_ClockConfig+0x260>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d21d      	bcs.n	8000e34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000df8:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <HAL_RCC_ClockConfig+0x260>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 020f 	bic.w	r2, r3, #15
 8000e00:	4929      	ldr	r1, [pc, #164]	; (8000ea8 <HAL_RCC_ClockConfig+0x260>)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8000e08:	f7ff fa72 	bl	80002f0 <HAL_GetTick>
 8000e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e0e:	e00a      	b.n	8000e26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e10:	f7ff fa6e 	bl	80002f0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e03b      	b.n	8000e9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_RCC_ClockConfig+0x260>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d1ed      	bne.n	8000e10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d008      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4917      	ldr	r1, [pc, #92]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d009      	beq.n	8000e72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	490f      	ldr	r1, [pc, #60]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e72:	f000 f825 	bl	8000ec0 <HAL_RCC_GetSysClockFreq>
 8000e76:	4602      	mov	r2, r0
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_RCC_ClockConfig+0x264>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <HAL_RCC_ClockConfig+0x26c>)
 8000e84:	5ccb      	ldrb	r3, [r1, r3]
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_RCC_ClockConfig+0x270>)
 8000e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_RCC_ClockConfig+0x274>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff f9de 	bl	8000258 <HAL_InitTick>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40022000 	.word	0x40022000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	04c4b400 	.word	0x04c4b400
 8000eb4:	08002a34 	.word	0x08002a34
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000000 	.word	0x20000000

08000ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d102      	bne.n	8000ed8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	e047      	b.n	8000f68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d102      	bne.n	8000eea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000ee4:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	e03e      	b.n	8000f68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 030c 	and.w	r3, r3, #12
 8000ef2:	2b0c      	cmp	r3, #12
 8000ef4:	d136      	bne.n	8000f64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d10c      	bne.n	8000f2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1c:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f1e:	68d2      	ldr	r2, [r2, #12]
 8000f20:	0a12      	lsrs	r2, r2, #8
 8000f22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
      break;
 8000f2c:	e00c      	b.n	8000f48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f38:	68d2      	ldr	r2, [r2, #12]
 8000f3a:	0a12      	lsrs	r2, r2, #8
 8000f3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f40:	fb02 f303 	mul.w	r3, r2, r3
 8000f44:	617b      	str	r3, [r7, #20]
      break;
 8000f46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0e5b      	lsrs	r3, r3, #25
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	3301      	adds	r3, #1
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	e001      	b.n	8000f68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8000f68:	693b      	ldr	r3, [r7, #16]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	00f42400 	.word	0x00f42400
 8000f80:	007a1200 	.word	0x007a1200

08000f84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d10c      	bne.n	8000fc2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000fb2:	68d2      	ldr	r2, [r2, #12]
 8000fb4:	0a12      	lsrs	r2, r2, #8
 8000fb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
    break;
 8000fc0:	e00c      	b.n	8000fdc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000fcc:	68d2      	ldr	r2, [r2, #12]
 8000fce:	0a12      	lsrs	r2, r2, #8
 8000fd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fd4:	fb02 f303 	mul.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
    break;
 8000fda:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0e5b      	lsrs	r3, r3, #25
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000
 8001008:	007a1200 	.word	0x007a1200
 800100c:	00f42400 	.word	0x00f42400

08001010 <Blinky_ctor_call>:
/*.$enddef${Shared::AO_Blinky} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

/* Active object definition ================================================*/
/*.$define${Shared::Blinky_ctor_call} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${Shared::Blinky_ctor_call} .............................................*/
void Blinky_ctor_call(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    Blinky_ctor(&Blinky_inst);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <Blinky_ctor_call+0x10>)
 8001016:	f000 f805 	bl	8001024 <Blinky_ctor>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000002c 	.word	0x2000002c

08001024 <Blinky_ctor>:
/*.$enddef${Shared::Blinky_ctor_call} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::Blinky} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::Blinky} ..........................................................*/
Blinky Blinky_inst;
/*.${AOs::Blinky::ctor} ....................................................*/
static void Blinky_ctor(Blinky * const me) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    QActive_ctor(&me->super, Q_STATE_CAST(&Blinky_initial));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <Blinky_ctor+0x2c>)
 8001030:	4618      	mov	r0, r3
 8001032:	f001 f9cf 	bl	80023d4 <QActive_ctor>
    QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 0020 	add.w	r0, r3, #32
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	2300      	movs	r3, #0
 8001040:	2206      	movs	r2, #6
 8001042:	f001 fa8b 	bl	800255c <QTimeEvt_ctorX>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	08001055 	.word	0x08001055

08001054 <Blinky_initial>:

/*.${AOs::Blinky::SM} ......................................................*/
static QState Blinky_initial(Blinky * const me, void const * const par) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
    /*.${AOs::Blinky::SM::initial} */
    return Q_TRAN(&Blinky_active);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <Blinky_initial+0x20>)
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	2308      	movs	r3, #8
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	08001079 	.word	0x08001079

08001078 <Blinky_active>:
/*.${AOs::Blinky::SM::active} ..............................................*/
static QState Blinky_active(Blinky * const me, QEvt const * const e) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d002      	beq.n	8001090 <Blinky_active+0x18>
 800108a:	2b03      	cmp	r3, #3
 800108c:	d00a      	beq.n	80010a4 <Blinky_active+0x2c>
 800108e:	e00f      	b.n	80010b0 <Blinky_active+0x38>
        /*.${AOs::Blinky::SM::active} */
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->timeEvt,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3320      	adds	r3, #32
 8001094:	2264      	movs	r2, #100	; 0x64
 8001096:	2164      	movs	r1, #100	; 0x64
 8001098:	4618      	mov	r0, r3
 800109a:	f001 fa8f 	bl	80025bc <QTimeEvt_armX>
                BSP_TICKS_PER_SEC,
                BSP_TICKS_PER_SEC);
            status_ = Q_HANDLED();
 800109e:	2303      	movs	r3, #3
 80010a0:	73fb      	strb	r3, [r7, #15]
            break;
 80010a2:	e00b      	b.n	80010bc <Blinky_active+0x44>
        }
        /*.${AOs::Blinky::SM::active::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Blinky_off);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <Blinky_active+0x50>)
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	2308      	movs	r3, #8
 80010ac:	73fb      	strb	r3, [r7, #15]
            break;
 80010ae:	e005      	b.n	80010bc <Blinky_active+0x44>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a06      	ldr	r2, [pc, #24]	; (80010cc <Blinky_active+0x54>)
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
            break;
 80010ba:	bf00      	nop
        }
    }
    return status_;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	080010d1 	.word	0x080010d1
 80010cc:	0800182d 	.word	0x0800182d

080010d0 <Blinky_off>:
/*.${AOs::Blinky::SM::active::off} .........................................*/
static QState Blinky_off(Blinky * const me, QEvt const * const e) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d002      	beq.n	80010e8 <Blinky_off+0x18>
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d006      	beq.n	80010f4 <Blinky_off+0x24>
 80010e6:	e00b      	b.n	8001100 <Blinky_off+0x30>
        /*.${AOs::Blinky::SM::active::off} */
        case Q_ENTRY_SIG: {
            BSP_SetBlinkyLED(OFF);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 f8a9 	bl	8001240 <BSP_SetBlinkyLED>
            status_ = Q_HANDLED();
 80010ee:	2303      	movs	r3, #3
 80010f0:	73fb      	strb	r3, [r7, #15]
            break;
 80010f2:	e00b      	b.n	800110c <Blinky_off+0x3c>
        }
        /*.${AOs::Blinky::SM::active::off::TIMEOUT} */
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&Blinky_on);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <Blinky_off+0x48>)
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	2308      	movs	r3, #8
 80010fc:	73fb      	strb	r3, [r7, #15]
            break;
 80010fe:	e005      	b.n	800110c <Blinky_off+0x3c>
        }
        default: {
            status_ = Q_SUPER(&Blinky_active);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a06      	ldr	r2, [pc, #24]	; (800111c <Blinky_off+0x4c>)
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
            break;
 800110a:	bf00      	nop
        }
    }
    return status_;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	08001121 	.word	0x08001121
 800111c:	08001079 	.word	0x08001079

08001120 <Blinky_on>:
/*.${AOs::Blinky::SM::active::on} ..........................................*/
static QState Blinky_on(Blinky * const me, QEvt const * const e) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d002      	beq.n	8001138 <Blinky_on+0x18>
 8001132:	2b06      	cmp	r3, #6
 8001134:	d006      	beq.n	8001144 <Blinky_on+0x24>
 8001136:	e00b      	b.n	8001150 <Blinky_on+0x30>
        /*.${AOs::Blinky::SM::active::on} */
        case Q_ENTRY_SIG: {
            BSP_SetBlinkyLED(ON);
 8001138:	2001      	movs	r0, #1
 800113a:	f000 f881 	bl	8001240 <BSP_SetBlinkyLED>
            status_ = Q_HANDLED();
 800113e:	2303      	movs	r3, #3
 8001140:	73fb      	strb	r3, [r7, #15]
            break;
 8001142:	e00b      	b.n	800115c <Blinky_on+0x3c>
        }
        /*.${AOs::Blinky::SM::active::on::TIMEOUT} */
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&Blinky_off);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <Blinky_on+0x48>)
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	2308      	movs	r3, #8
 800114c:	73fb      	strb	r3, [r7, #15]
            break;
 800114e:	e005      	b.n	800115c <Blinky_on+0x3c>
        }
        default: {
            status_ = Q_SUPER(&Blinky_active);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a06      	ldr	r2, [pc, #24]	; (800116c <Blinky_on+0x4c>)
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
            break;
 800115a:	bf00      	nop
        }
    }
    return status_;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	080010d1 	.word	0x080010d1
 800116c:	08001079 	.word	0x08001079

08001170 <__NVIC_SetPriority>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <SysTick_Config>:
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ffc2 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	619a      	str	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <BSP_SetBlinkyLED>:




void BSP_SetBlinkyLED(ON_OFF_STATUS status)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
    if(status == ON)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <BSP_SetBlinkyLED+0x1c>
    {
        LL_GPIO_SetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
 8001250:	2120      	movs	r1, #32
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f7ff ffd7 	bl	8001208 <LL_GPIO_SetOutputPin>
    }
    else
    {
        LL_GPIO_ResetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
    }
}
 800125a:	e004      	b.n	8001266 <BSP_SetBlinkyLED+0x26>
        LL_GPIO_ResetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
 800125c:	2120      	movs	r1, #32
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f7ff ffdf 	bl	8001224 <LL_GPIO_ResetOutputPin>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <BSP_Init>:
 * @brief  BSP_Init - BSP & System Initialise
 * @retval None - errors here are intolerable & will call Error_Handler()
 ******************************************************************************
*/
void BSP_Init(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
    /* INIT HAL */
    if(HAL_Init() != HAL_OK)
 8001272:	f7fe ffd1 	bl	8000218 <HAL_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <BSP_Init+0x12>
    {
        BSP_Error_Handler();
 800127c:	f000 f851 	bl	8001322 <BSP_Error_Handler>
    }

    /* CONFIGURE SYSTEM CLOCK */
    SystemClock_Config();
 8001280:	f000 f804 	bl	800128c <SystemClock_Config>

    /* INITIALISE PERIPHERALS */
    GPIO_Init();
 8001284:	f000 fa16 	bl	80016b4 <GPIO_Init>

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <SystemClock_Config>:
 * @brief  SystemClock_Config - System clock configuration
 * @retval None - errors here are intolerable & will call Error_Handler()
 ******************************************************************************
*/
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	; 0x50
 8001290:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	2238      	movs	r2, #56	; 0x38
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fb8e 	bl	80029bc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff f90e 	bl	80004d0 <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012be:	2340      	movs	r3, #64	; 0x40
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c6:	2302      	movs	r3, #2
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012ca:	2304      	movs	r3, #4
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 85;
 80012ce:	2355      	movs	r3, #85	; 0x55
 80012d0:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d2:	2302      	movs	r3, #2
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012d6:	2302      	movs	r3, #2
 80012d8:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012da:	2302      	movs	r3, #2
 80012dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f998 	bl	8000618 <HAL_RCC_OscConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x66>
    {
        BSP_Error_Handler();
 80012ee:	f000 f818 	bl	8001322 <BSP_Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f2:	230f      	movs	r3, #15
 80012f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f6:	2303      	movs	r3, #3
 80012f8:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2104      	movs	r1, #4
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fc9c 	bl	8000c48 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x8e>
    {
        BSP_Error_Handler();
 8001316:	f000 f804 	bl	8001322 <BSP_Error_Handler>
    }
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	; 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <BSP_Error_Handler>:
 * @brief  BSP_Error_Handler - handles errors in BSP activities
 * @retval None
 ******************************************************************************
*/
void BSP_Error_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
    while (1)
 8001326:	e7fe      	b.n	8001326 <BSP_Error_Handler+0x4>

08001328 <QF_onStartup>:
 * @brief  QF_onStartup - executes once, on startup of QF
 * @retval None
 ******************************************************************************
*/
void QF_onStartup(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
    /* set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate */
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <QF_onStartup+0x2c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a09      	ldr	r2, [pc, #36]	; (8001358 <QF_onStartup+0x30>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff43 	bl	80011c4 <SysTick_Config>
    *
    * !!!!!!!!!!!!!!!!!!!!!!!!!!!! CAUTION !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    * Assign a priority to EVERY ISR explicitly by calling NVIC_SetPriority().
    * DO NOT LEAVE THE ISR PRIORITIES AT THE DEFAULT VALUE!
    */
    NVIC_SetPriority(USART2_IRQn,    0U); /* kernel UNAWARE interrupt */
 800133e:	2100      	movs	r1, #0
 8001340:	2026      	movs	r0, #38	; 0x26
 8001342:	f7ff ff15 	bl	8001170 <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 1U);
 8001346:	2104      	movs	r1, #4
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff10 	bl	8001170 <__NVIC_SetPriority>
    /* enable IRQs... */
    //NVIC_EnableIRQ(EXTI0_1_IRQn);
#ifdef Q_SPY
    NVIC_EnableIRQ(USART2_IRQn); /* UART2 interrupt used for QS-RX */
#endif
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000008 	.word	0x20000008
 8001358:	51eb851f 	.word	0x51eb851f

0800135c <QV_onIdle>:
 * @brief  QV_onIdle - executes during QV idle time
 * @retval None
 ******************************************************************************
*/
void QV_onIdle(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
            USART2->TDR = (b & 0xFFU);  /* put into the DR register */
        }
    }

#else
    QF_INT_ENABLE(); /* just enable interrupts */
 8001360:	2300      	movs	r3, #0
 8001362:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <Q_onAssert>:

Q_NORETURN Q_onAssert(char const * const module, int_t const loc)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]

    (void)module;
    (void)loc;
    QS_ASSERTION(module, loc, 10000U); /* report assertion to QS */

    while(1); //TODO: Add an assertion handler here
 800137a:	e7fe      	b.n	800137a <Q_onAssert+0xa>

0800137c <SysTick_Handler>:
 * @brief  SysTick_Handler - handles the Systick
 * @retval None
 ******************************************************************************
*/
void SysTick_Handler(void)
{
 800137c:	b598      	push	{r3, r4, r7, lr}
 800137e:	af00      	add	r7, sp, #0
    /* system clock tick ISR */
    HAL_IncTick();
 8001380:	f7fe ffa4 	bl	80002cc <HAL_IncTick>
        tmp = SysTick->CTRL; /* clear CTRL_COUNTFLAG */
        QS_tickTime_ += QS_tickPeriod_; /* account for the clock rollover */
    }
#endif

    QF_TICK_X(0U, &l_SysTick_Handler); /* process time events for rate 0 */
 8001384:	2100      	movs	r1, #0
 8001386:	2000      	movs	r0, #0
 8001388:	f001 f976 	bl	8002678 <QTimeEvt_tick_>
    QACTIVE_POST(&ticker0_10ms.super, 0, &l_SysTick_Handler); /* post to Ticker0 */
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <SysTick_Handler+0x2c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68dc      	ldr	r4, [r3, #12]
 8001392:	2300      	movs	r3, #0
 8001394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001398:	2100      	movs	r1, #0
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <SysTick_Handler+0x2c>)
 800139c:	47a0      	blx	r4


    QV_ARM_ERRATUM_838869();
 800139e:	f3bf 8f4f 	dsb	sy
}
 80013a2:	bf00      	nop
 80013a4:	bd98      	pop	{r3, r4, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000060 	.word	0x20000060

080013ac <QF_psInit>:
* @sa QActive_psInit()
*/
static inline void QF_psInit(
    QSubscrList * const subscrSto,
    enum_t const maxSignal)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    QActive_psInit(subscrSto, maxSignal);
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 ffd3 	bl	8002364 <QActive_psInit>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <main>:
 ******************************************************************************
 * @brief  main - The application entry point
 ******************************************************************************
*/
int main(void)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af04      	add	r7, sp, #16

    /* QF EVENT SUBSCRIPTION LIST */
    static QSubscrList subscrSto[MAX_PUB_SIG];

    /* INITIALISE BOARD SUPPORT PACKAGE */
    BSP_Init();
 80013ce:	f7ff ff4e 	bl	800126e <BSP_Init>

    /* INSTANTIATE ACTIVE OBJECTS */
    QTicker_ctor(&ticker0_10ms, 0U); // active object for tick rate 0
 80013d2:	2100      	movs	r1, #0
 80013d4:	4822      	ldr	r0, [pc, #136]	; (8001460 <main+0x98>)
 80013d6:	f000 fdf9 	bl	8001fcc <QTicker_ctor>
    //QTicker_ctor(&ticker1_10us, 1U); // active object for tick rate 1

    Blinky_ctor_call();              // Blinky constructor
 80013da:	f7ff fe19 	bl	8001010 <Blinky_ctor_call>

    /* INITIALISE QF */
    QF_init();                       // initialize the framework
 80013de:	f001 fa27 	bl	8002830 <QF_init>

    /* INIT PUB/SUBSCRIBE */
    QF_psInit(subscrSto, Q_DIM(subscrSto));
 80013e2:	2105      	movs	r1, #5
 80013e4:	481f      	ldr	r0, [pc, #124]	; (8001464 <main+0x9c>)
 80013e6:	f7ff ffe1 	bl	80013ac <QF_psInit>

    /* INIT EVENT POOLS */
    QF_poolInit(stdEvtPool, sizeof(stdEvtPool), sizeof(stdEvtPool[0]));
 80013ea:	2204      	movs	r2, #4
 80013ec:	2128      	movs	r1, #40	; 0x28
 80013ee:	481e      	ldr	r0, [pc, #120]	; (8001468 <main+0xa0>)
 80013f0:	f000 fe8c 	bl	800210c <QF_poolInit>


    /* START ACTIVE OBJECTS */
    QACTIVE_START(&ticker0_10ms.super,
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <main+0x98>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d103      	bne.n	8001404 <main+0x3c>
 80013fc:	2150      	movs	r1, #80	; 0x50
 80013fe:	481b      	ldr	r0, [pc, #108]	; (800146c <main+0xa4>)
 8001400:	f7ff ffb6 	bl	8001370 <Q_onAssert>
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <main+0x98>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689c      	ldr	r4, [r3, #8]
 800140a:	2300      	movs	r3, #0
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2300      	movs	r3, #0
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	2200      	movs	r2, #0
 800141a:	2101      	movs	r1, #1
 800141c:	4810      	ldr	r0, [pc, #64]	; (8001460 <main+0x98>)
 800141e:	47a0      	blx	r4
            1U, //QP priority
            0, 0, 0, 0, 0); //no queue, no stack , no init. event

    QACTIVE_START(AO_Blinky, /* active object to start */
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <main+0xa8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <main+0x6a>
 800142a:	2154      	movs	r1, #84	; 0x54
 800142c:	480f      	ldr	r0, [pc, #60]	; (800146c <main+0xa4>)
 800142e:	f7ff ff9f 	bl	8001370 <Q_onAssert>
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <main+0xa8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689c      	ldr	r4, [r3, #8]
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <main+0xa8>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2300      	movs	r3, #0
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	2300      	movs	r3, #0
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	230a      	movs	r3, #10
 800144c:	4a09      	ldr	r2, [pc, #36]	; (8001474 <main+0xac>)
 800144e:	2102      	movs	r1, #2
 8001450:	47a0      	blx	r4
                Q_DIM(blinky_queueSto), /* the length of the buffer */
                (void *)0, 0U, /* private stack (not used) */
                (QEvt *)0); /* initialization event (not used) */

    /* HANDOVER TO THE FRAMEWORK */
    return QF_run(); /* let the framework run the application */
 8001452:	f001 fa0b 	bl	800286c <QF_run>
 8001456:	4603      	mov	r3, r0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3704      	adds	r7, #4
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	20000060 	.word	0x20000060
 8001464:	20000080 	.word	0x20000080
 8001468:	20000094 	.word	0x20000094
 800146c:	080029e8 	.word	0x080029e8
 8001470:	080029e4 	.word	0x080029e4
 8001474:	200000bc 	.word	0x200000bc

08001478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <LoopForever+0xe>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001494:	4c0b      	ldr	r4, [pc, #44]	; (80014c4 <LoopForever+0x16>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a2:	f000 f94f 	bl	8001744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f001 fa65 	bl	8002974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014aa:	f7ff ff8d 	bl	80013c8 <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   r0, =_estack
 80014b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014bc:	08002ac4 	.word	0x08002ac4
  ldr r2, =_sbss
 80014c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014c4:	200001dc 	.word	0x200001dc

080014c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_2_IRQHandler>

080014ca <LL_GPIO_SetPinMode>:
{
 80014ca:	b480      	push	{r7}
 80014cc:	b08b      	sub	sp, #44	; 0x2c
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80014f0:	2320      	movs	r3, #32
 80014f2:	e003      	b.n	80014fc <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2103      	movs	r1, #3
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	61fb      	str	r3, [r7, #28]
  return result;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800151e:	2320      	movs	r3, #32
 8001520:	e003      	b.n	800152a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	431a      	orrs	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	372c      	adds	r7, #44	; 0x2c
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_GPIO_SetPinOutputType>:
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	43db      	mvns	r3, r3
 8001558:	401a      	ands	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	431a      	orrs	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	605a      	str	r2, [r3, #4]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_GPIO_SetPinSpeed>:
{
 8001574:	b480      	push	{r7}
 8001576:	b08b      	sub	sp, #44	; 0x2c
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	613b      	str	r3, [r7, #16]
  return result;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800159a:	2320      	movs	r3, #32
 800159c:	e003      	b.n	80015a6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2103      	movs	r1, #3
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	401a      	ands	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	fa93 f3a3 	rbit	r3, r3
 80015bc:	61fb      	str	r3, [r7, #28]
  return result;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80015c8:	2320      	movs	r3, #32
 80015ca:	e003      	b.n	80015d4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	431a      	orrs	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	609a      	str	r2, [r3, #8]
}
 80015e2:	bf00      	nop
 80015e4:	372c      	adds	r7, #44	; 0x2c
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_GPIO_SetPinPull>:
{
 80015ee:	b480      	push	{r7}
 80015f0:	b08b      	sub	sp, #44	; 0x2c
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa93 f3a3 	rbit	r3, r3
 8001608:	613b      	str	r3, [r7, #16]
  return result;
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001614:	2320      	movs	r3, #32
 8001616:	e003      	b.n	8001620 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fab3 f383 	clz	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2103      	movs	r1, #3
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	401a      	ands	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	61fb      	str	r3, [r7, #28]
  return result;
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001642:	2320      	movs	r3, #32
 8001644:	e003      	b.n	800164e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	431a      	orrs	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	60da      	str	r2, [r3, #12]
}
 800165c:	bf00      	nop
 800165e:	372c      	adds	r7, #44	; 0x2c
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_GPIO_ResetOutputPin>:
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800168e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001690:	4907      	ldr	r1, [pc, #28]	; (80016b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4313      	orrs	r3, r2
 8001696:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800169a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000

080016b4 <GPIO_Init>:




void GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    /* GPIO PORTS CLOCK ENABLE */
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff ffe3 	bl	8001684 <LL_AHB2_GRP1_EnableClock>

    /* BLINKY LED */
    LL_GPIO_ResetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
 80016be:	2120      	movs	r1, #32
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f7ff ffd0 	bl	8001668 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetPinPull(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_PULL_NO);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2120      	movs	r1, #32
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f7ff ff8d 	bl	80015ee <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinOutputType(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2120      	movs	r1, #32
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f7ff ff32 	bl	8001544 <LL_GPIO_SetPinOutputType>
    LL_GPIO_SetPinSpeed(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_SPEED_FREQ_LOW);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2120      	movs	r1, #32
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f7ff ff44 	bl	8001574 <LL_GPIO_SetPinSpeed>
    LL_GPIO_SetPinMode(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_MODE_OUTPUT);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2120      	movs	r1, #32
 80016f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f4:	f7ff fee9 	bl	80014ca <LL_GPIO_SetPinMode>

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <SystemInit+0x20>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <SystemInit+0x20>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <QV_init>:
* "kernel aware" interrupts.
*
* The interrupt priorities established in QV_init() can be later
* changed by the application-level code.
*/
void QV_init(void) {
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0

#if (__ARM_ARCH != 6)   /*--------- if ARMv7-M and higher... */

    /* SCB_SYSPRI[2]:  SysTick */
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_BASEPRI << 24U));
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <QV_init+0x5c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <QV_init+0x5c>)
 8001774:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8001778:	6013      	str	r3, [r2, #0]

    /* set all 240 possible IRQ priories to QF_BASEPRI... */
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	e00b      	b.n	8001798 <QV_init+0x30>
        NVIC_IP[n] = (QF_BASEPRI << 24U) | (QF_BASEPRI << 16U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001788:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800178c:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 8001790:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3301      	adds	r3, #1
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b3b      	cmp	r3, #59	; 0x3b
 800179c:	d9f0      	bls.n	8001780 <QV_init+0x18>

#endif                  /*--------- ARMv7-M or higher */

#if (__ARM_FP != 0)     /*--------- if VFP available... */
    /* make sure that the FPU is enabled by seting CP10 & CP11 Full Access */
    SCB_CPACR = (SCB_CPACR | ((3UL << 20U) | (3UL << 22U)));
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <QV_init+0x60>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <QV_init+0x60>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a8:	6013      	str	r3, [r2, #0]

    /* FPU automatic state preservation (ASPEN) lazy stacking (LSPEN) */
    FPU_FPCCR = (FPU_FPCCR | (1U << 30U) | (1U << 31U));
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <QV_init+0x64>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <QV_init+0x64>)
 80017b0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80017b4:	6013      	str	r3, [r2, #0]
#endif                  /*--------- VFP available */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed20 	.word	0xe000ed20
 80017c8:	e000ed88 	.word	0xe000ed88
 80017cc:	e000ef34 	.word	0xe000ef34

080017d0 <QHsm_reservedEvt_>:
*/
static inline QState QHsm_reservedEvt_(
    QHsm * const me,
    QStateHandler const state,
    enum QReservedSig const sig)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	4613      	mov	r3, r2
 80017dc:	71fb      	strb	r3, [r7, #7]
    return (*state)(me, &l_reservedEvt_[sig]);
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <QHsm_reservedEvt_+0x28>)
 80017e4:	441a      	add	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	4611      	mov	r1, r2
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	4798      	blx	r3
 80017ee:	4603      	mov	r3, r0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	08002a4c 	.word	0x08002a4c

080017fc <QHsm_ctor>:

/*${QEP::QHsm::ctor} .......................................................*/
/*! @protected @memberof QHsm */
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->vptr      = &vtable;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <QHsm_ctor+0x28>)
 800180a:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a06      	ldr	r2, [pc, #24]	; (8001828 <QHsm_ctor+0x2c>)
 8001810:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	609a      	str	r2, [r3, #8]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	08002a5c 	.word	0x08002a5c
 8001828:	0800182d 	.word	0x0800182d

0800182c <QHsm_top>:

/*${QEP::QHsm::top} ........................................................*/
/*! @protected @memberof QHsm */
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; /* the top state ignores all events */
 8001836:	2304      	movs	r3, #4
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <QHsm_init_>:
/*${QEP::QHsm::init_} ......................................................*/
/*! @protected @memberof QHsm */
void QHsm_init_(QHsm * const me,
    void const * const e,
    uint_fast8_t const qs_id)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	; 0x38
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    }
    #else
    Q_UNUSED_PAR(qs_id);
    #endif

    QStateHandler t = me->state.fun;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	637b      	str	r3, [r7, #52]	; 0x34

    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <QHsm_init_+0x2a>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <QHsm_init_+0x2a>
 8001866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001868:	4a36      	ldr	r2, [pc, #216]	; (8001944 <QHsm_init_+0x100>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d003      	beq.n	8001876 <QHsm_init_+0x32>
 800186e:	21c8      	movs	r1, #200	; 0xc8
 8001870:	4835      	ldr	r0, [pc, #212]	; (8001948 <QHsm_init_+0x104>)
 8001872:	f7ff fd7d 	bl	8001370 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	4798      	blx	r3
 8001880:	4603      	mov	r3, r0
 8001882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
 8001886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800188a:	2b08      	cmp	r3, #8
 800188c:	d003      	beq.n	8001896 <QHsm_init_+0x52>
 800188e:	21d2      	movs	r1, #210	; 0xd2
 8001890:	482d      	ldr	r0, [pc, #180]	; (8001948 <QHsm_init_+0x104>)
 8001892:	f7ff fd6d 	bl	8001370 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30

        path[0] = me->temp.fun;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	617b      	str	r3, [r7, #20]
        (void)QHsm_reservedEvt_(me, me->temp.fun, Q_EMPTY_SIG);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f7ff ff91 	bl	80017d0 <QHsm_reservedEvt_>
        while (me->temp.fun != t) {
 80018ae:	e018      	b.n	80018e2 <QHsm_init_+0x9e>
            ++ip;
 80018b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b2:	3301      	adds	r3, #1
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 80018b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	dd03      	ble.n	80018c4 <QHsm_init_+0x80>
 80018bc:	21dc      	movs	r1, #220	; 0xdc
 80018be:	4822      	ldr	r0, [pc, #136]	; (8001948 <QHsm_init_+0x104>)
 80018c0:	f7ff fd56 	bl	8001370 <Q_onAssert>
            path[ip] = me->temp.fun;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	3338      	adds	r3, #56	; 0x38
 80018ce:	443b      	add	r3, r7
 80018d0:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QHsm_reservedEvt_(me, me->temp.fun, Q_EMPTY_SIG);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2200      	movs	r2, #0
 80018da:	4619      	mov	r1, r3
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7ff ff77 	bl	80017d0 <QHsm_reservedEvt_>
        while (me->temp.fun != t) {
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1e1      	bne.n	80018b0 <QHsm_init_+0x6c>
        }
        me->temp.fun = path[0];
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QHsm_state_entry_(me, path[ip], qs_id); /* enter path[ip] */
 80018f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	3338      	adds	r3, #56	; 0x38
 80018f8:	443b      	add	r3, r7
 80018fa:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4619      	mov	r1, r3
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f9d6 	bl	8001cb4 <QHsm_state_entry_>
            --ip;
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190a:	3b01      	subs	r3, #1
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
        } while (ip >= 0);
 800190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001910:	2b00      	cmp	r3, #0
 8001912:	daee      	bge.n	80018f2 <QHsm_init_+0xae>

        t = path[0]; /* current state becomes the new source */
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	637b      	str	r3, [r7, #52]	; 0x34

        r = QHsm_reservedEvt_(me, t, Q_INIT_SIG); /* execute initial transition */
 8001918:	2203      	movs	r2, #3
 800191a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff ff57 	bl	80017d0 <QHsm_reservedEvt_>
 8001922:	4603      	mov	r3, r0
 8001924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

    } while (r == Q_RET_TRAN);
 8001928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800192c:	2b08      	cmp	r3, #8
 800192e:	d0b2      	beq.n	8001896 <QHsm_init_+0x52>
        QS_TIME_PRE_();  /* time stamp */
        QS_OBJ_PRE_(me); /* this state machine object */
        QS_FUN_PRE_(t);  /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001934:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800193a:	609a      	str	r2, [r3, #8]
}
 800193c:	bf00      	nop
 800193e:	3738      	adds	r7, #56	; 0x38
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	0800182d 	.word	0x0800182d
 8001948:	08002a44 	.word	0x08002a44

0800194c <QHsm_dispatch_>:
/*${QEP::QHsm::dispatch_} ..................................................*/
/*! @protected @memberof QHsm */
void QHsm_dispatch_(QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qs_id);
    #endif

    QStateHandler t = me->state.fun;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
    QS_CRIT_STAT_

    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 800195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <QHsm_dispatch_+0x22>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800196a:	429a      	cmp	r2, r3
 800196c:	d004      	beq.n	8001978 <QHsm_dispatch_+0x2c>
 800196e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001972:	4859      	ldr	r0, [pc, #356]	; (8001ad8 <QHsm_dispatch_+0x18c>)
 8001974:	f7ff fcfc 	bl	8001370 <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
        r = (*s)(me, e); /* invoke state handler s */
 800197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	4798      	blx	r3
 8001986:	4603      	mov	r3, r0
 8001988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 800198c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001990:	2b02      	cmp	r3, #2
 8001992:	d107      	bne.n	80019a4 <QHsm_dispatch_+0x58>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QHsm_reservedEvt_(me, s, Q_EMPTY_SIG); /* find superstate of s */
 8001994:	2200      	movs	r2, #0
 8001996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff ff19 	bl	80017d0 <QHsm_reservedEvt_>
 800199e:	4603      	mov	r3, r0
 80019a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    } while (r == Q_RET_SUPER);
 80019a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0e5      	beq.n	8001978 <QHsm_dispatch_+0x2c>

    /* regular transition taken? */
    if (r >= Q_RET_TRAN) {
 80019ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019b0:	2b07      	cmp	r3, #7
 80019b2:	f240 8086 	bls.w	8001ac2 <QHsm_dispatch_+0x176>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	613b      	str	r3, [r7, #16]
        path[1] = t;
 80019bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019be:	617b      	str	r3, [r7, #20]
        path[2] = s;
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	61bb      	str	r3, [r7, #24]

        /* exit current state to transition source s... */
        for (; t != s; t = me->temp.fun) {
 80019c4:	e00f      	b.n	80019e6 <QHsm_dispatch_+0x9a>
            /* exit from t handled? */
            if (QHsm_state_exit_(me, t, qs_id)) {
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f982 	bl	8001cd4 <QHsm_state_exit_>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <QHsm_dispatch_+0x94>
                /* find superstate of t */
                (void)QHsm_reservedEvt_(me, t, Q_EMPTY_SIG);
 80019d6:	2200      	movs	r2, #0
 80019d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff fef8 	bl	80017d0 <QHsm_reservedEvt_>
        for (; t != s; t = me->temp.fun) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
 80019e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d1eb      	bne.n	80019c6 <QHsm_dispatch_+0x7a>
            }
        }

        int_fast8_t ip = QHsm_tran_(me, path, qs_id); /* the HSM transition */
 80019ee:	f107 0310 	add.w	r3, r7, #16
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f870 	bl	8001adc <QHsm_tran_>
 80019fc:	62f8      	str	r0, [r7, #44]	; 0x2c
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        for (; ip >= 0; --ip) {
 80019fe:	e00d      	b.n	8001a1c <QHsm_dispatch_+0xd0>
            QHsm_state_entry_(me, path[ip], qs_id);  /* enter path[ip] */
 8001a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	3338      	adds	r3, #56	; 0x38
 8001a06:	443b      	add	r3, r7
 8001a08:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f94f 	bl	8001cb4 <QHsm_state_entry_>
        for (; ip >= 0; --ip) {
 8001a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	daee      	bge.n	8001a00 <QHsm_dispatch_+0xb4>
        }

        t = path[0];      /* stick the target into register */
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
        me->temp.fun = t; /* update the next state */
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a2a:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QHsm_reservedEvt_(me, t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001a2c:	e041      	b.n	8001ab2 <QHsm_dispatch_+0x166>
                QS_OBJ_PRE_(me); /* this state machine object */
                QS_FUN_PRE_(t);  /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the tran. */
            QS_END_PRE_()

            ip = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[0] = me->temp.fun;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	613b      	str	r3, [r7, #16]

            /* find superstate */
            (void)QHsm_reservedEvt_(me, me->temp.fun, Q_EMPTY_SIG);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff fec5 	bl	80017d0 <QHsm_reservedEvt_>

            while (me->temp.fun != t) {
 8001a46:	e011      	b.n	8001a6c <QHsm_dispatch_+0x120>
                ++ip;
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                path[ip] = me->temp.fun;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	3338      	adds	r3, #56	; 0x38
 8001a58:	443b      	add	r3, r7
 8001a5a:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QHsm_reservedEvt_(me, me->temp.fun, Q_EMPTY_SIG);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2200      	movs	r2, #0
 8001a64:	4619      	mov	r1, r3
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff feb2 	bl	80017d0 <QHsm_reservedEvt_>
            while (me->temp.fun != t) {
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d1e8      	bne.n	8001a48 <QHsm_dispatch_+0xfc>
            }
            me->temp.fun = path[0];
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	2b05      	cmp	r3, #5
 8001a80:	dd04      	ble.n	8001a8c <QHsm_dispatch_+0x140>
 8001a82:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8001a86:	4814      	ldr	r0, [pc, #80]	; (8001ad8 <QHsm_dispatch_+0x18c>)
 8001a88:	f7ff fc72 	bl	8001370 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QHsm_state_entry_(me, path[ip], qs_id); /* enter path[ip] */
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	3338      	adds	r3, #56	; 0x38
 8001a92:	443b      	add	r3, r7
 8001a94:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 f909 	bl	8001cb4 <QHsm_state_entry_>
                --ip;
 8001aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
            } while (ip >= 0);
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	daee      	bge.n	8001a8c <QHsm_dispatch_+0x140>

            t = path[0]; /* current state becomes the new source */
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
        while (QHsm_reservedEvt_(me, t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff fe8a 	bl	80017d0 <QHsm_reservedEvt_>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d0b5      	beq.n	8001a2e <QHsm_dispatch_+0xe2>
        QS_END_PRE_()

    }
    #endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ac6:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001acc:	609a      	str	r2, [r3, #8]
}
 8001ace:	bf00      	nop
 8001ad0:	3738      	adds	r7, #56	; 0x38
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	08002a44 	.word	0x08002a44

08001adc <QHsm_tran_>:
/*${QEP::QHsm::tran_} ......................................................*/
/*! @private @memberof QHsm */
int_fast8_t QHsm_tran_(QHsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qs_id)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qs_id);
    #endif

    int_fast8_t ip = -1; /* transition entry path index */
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	617b      	str	r3, [r7, #20]

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d107      	bne.n	8001b12 <QHsm_tran_+0x36>
        (void)QHsm_state_exit_(me, s, qs_id); /* exit source */
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6979      	ldr	r1, [r7, #20]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f8e4 	bl	8001cd4 <QHsm_state_exit_>
        ip = 0; /* enter the target */
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	e0c9      	b.n	8001ca6 <QHsm_tran_+0x1ca>
    }
    else {
        /* find superstate of target */
        (void)QHsm_reservedEvt_(me, t, Q_EMPTY_SIG);
 8001b12:	2200      	movs	r2, #0
 8001b14:	6a39      	ldr	r1, [r7, #32]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff fe5a 	bl	80017d0 <QHsm_reservedEvt_>

        t = me->temp.fun;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	623b      	str	r3, [r7, #32]

        /* (b) check source==target->super... */
        if (s == t) {
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d102      	bne.n	8001b30 <QHsm_tran_+0x54>
            ip = 0; /* enter the target */
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2e:	e0ba      	b.n	8001ca6 <QHsm_tran_+0x1ca>
        }
        else {
            /* find superstate of src */
            (void)QHsm_reservedEvt_(me, s, Q_EMPTY_SIG);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6979      	ldr	r1, [r7, #20]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fe4b 	bl	80017d0 <QHsm_reservedEvt_>

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	6a3a      	ldr	r2, [r7, #32]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d107      	bne.n	8001b54 <QHsm_tran_+0x78>
                (void)QHsm_state_exit_(me, s, qs_id); /* exit source */
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6979      	ldr	r1, [r7, #20]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f8c3 	bl	8001cd4 <QHsm_state_exit_>
                ip = 0; /* enter the target */
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	e0a8      	b.n	8001ca6 <QHsm_tran_+0x1ca>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d105      	bne.n	8001b6c <QHsm_tran_+0x90>
                    (void)QHsm_state_exit_(me, s, qs_id); /* exit source */
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6979      	ldr	r1, [r7, #20]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f8b5 	bl	8001cd4 <QHsm_state_exit_>
 8001b6a:	e09c      	b.n	8001ca6 <QHsm_tran_+0x1ca>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
                    ip = 1; /* enter target and its superstate */
 8001b70:	2301      	movs	r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      /* save the superstate of target */
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3304      	adds	r3, #4
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	623b      	str	r3, [r7, #32]

                    /* find target->super->super... */
                    QState r = QHsm_reservedEvt_(me, path[1], Q_EMPTY_SIG);
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	3304      	adds	r3, #4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7ff fe1f 	bl	80017d0 <QHsm_reservedEvt_>
 8001b92:	4603      	mov	r3, r0
 8001b94:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8001b96:	e027      	b.n	8001be8 <QHsm_tran_+0x10c>
                        ++ip;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; /* store the entry path */
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	6892      	ldr	r2, [r2, #8]
 8001baa:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d10f      	bne.n	8001bd6 <QHsm_tran_+0xfa>
                            iq = 1; /* indicate that LCA found */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	dd04      	ble.n	8001bca <QHsm_tran_+0xee>
 8001bc0:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001bc4:	483a      	ldr	r0, [pc, #232]	; (8001cb0 <QHsm_tran_+0x1d4>)
 8001bc6:	f7ff fbd3 	bl	8001370 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; /* terminate loop */
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	76fb      	strb	r3, [r7, #27]
 8001bd4:	e008      	b.n	8001be8 <QHsm_tran_+0x10c>
                        }
                        /* it is not the source, keep going up */
                        else {
                            r = QHsm_reservedEvt_(me, me->temp.fun,
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff fdf6 	bl	80017d0 <QHsm_reservedEvt_>
 8001be4:	4603      	mov	r3, r0
 8001be6:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8001be8:	7efb      	ldrb	r3, [r7, #27]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0d4      	beq.n	8001b98 <QHsm_tran_+0xbc>
                                                  Q_EMPTY_SIG);
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d158      	bne.n	8001ca6 <QHsm_tran_+0x1ca>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	dd04      	ble.n	8001c04 <QHsm_tran_+0x128>
 8001bfa:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001bfe:	482c      	ldr	r0, [pc, #176]	; (8001cb0 <QHsm_tran_+0x1d4>)
 8001c00:	f7ff fbb6 	bl	8001370 <Q_onAssert>

                        /* exit source */
                        (void)QHsm_state_exit_(me, s, qs_id);
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6979      	ldr	r1, [r7, #20]
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f863 	bl	8001cd4 <QHsm_state_exit_>

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; /* LCA NOT found */
 8001c12:	2304      	movs	r3, #4
 8001c14:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d108      	bne.n	8001c38 <QHsm_tran_+0x15c>
                                r = Q_RET_HANDLED; /* LCA found */
 8001c26:	2303      	movs	r3, #3
 8001c28:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; /* do not enter LCA */
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; /* cause termintion of the loop */
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e002      	b.n	8001c3e <QHsm_tran_+0x162>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	dae8      	bge.n	8001c16 <QHsm_tran_+0x13a>

                        /* LCA not found? */
                        if (r != Q_RET_HANDLED) {
 8001c44:	7efb      	ldrb	r3, [r7, #27]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d02d      	beq.n	8001ca6 <QHsm_tran_+0x1ca>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = Q_RET_IGNORED; /* keep looping */
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	76fb      	strb	r3, [r7, #27]
                            do {
                                /* exit from t handled? */
                                if (QHsm_state_exit_(me, t, qs_id)) {
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f83e 	bl	8001cd4 <QHsm_state_exit_>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <QHsm_tran_+0x18c>
                                    /* find superstate of t */
                                    (void)QHsm_reservedEvt_(me, t, Q_EMPTY_SIG);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	6a39      	ldr	r1, [r7, #32]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff fdb4 	bl	80017d0 <QHsm_reservedEvt_>
                                }
                                t = me->temp.fun; /* set to super of t */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	623b      	str	r3, [r7, #32]
                                iq = ip;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	61fb      	str	r3, [r7, #28]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	4413      	add	r3, r2
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d108      	bne.n	8001c94 <QHsm_tran_+0x1b8>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1; /* break out of inner loop */
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	61fb      	str	r3, [r7, #28]
                                        /* break out of outer loop */
                                        r = Q_RET_HANDLED;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	76fb      	strb	r3, [r7, #27]
 8001c92:	e002      	b.n	8001c9a <QHsm_tran_+0x1be>
                                    }
                                    else {
                                        --iq;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	dae8      	bge.n	8001c72 <QHsm_tran_+0x196>
                            } while (r != Q_RET_HANDLED);
 8001ca0:	7efb      	ldrb	r3, [r7, #27]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d1d3      	bne.n	8001c4e <QHsm_tran_+0x172>
                    }
                }
            }
        }
    }
    return ip;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	08002a44 	.word	0x08002a44

08001cb4 <QHsm_state_entry_>:
/*${QEP::QHsm::state_entry_} ...............................................*/
/*! @private @memberof QHsm */
void QHsm_state_entry_(QHsm * const me,
    QStateHandler const state,
    uint_fast8_t const qs_id)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
            QS_FUN_PRE_(state);
        QS_END_PRE_()
    }
    #else
    Q_UNUSED_PAR(qs_id);
    (void)(*state)(me, &l_reservedEvt_[Q_ENTRY_SIG]);
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4903      	ldr	r1, [pc, #12]	; (8001cd0 <QHsm_state_entry_+0x1c>)
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	4798      	blx	r3
    #endif /* Q_SPY */
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	08002a50 	.word	0x08002a50

08001cd4 <QHsm_state_exit_>:
/*${QEP::QHsm::state_exit_} ................................................*/
/*! @private @memberof QHsm */
bool QHsm_state_exit_(QHsm * const me,
    QStateHandler const state,
    uint_fast8_t const qs_id)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
        isHandled = false;
    }
    return isHandled;
    #else
    Q_UNUSED_PAR(qs_id);
    return (*state)(me, &l_reservedEvt_[Q_EXIT_SIG]) == Q_RET_HANDLED;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4906      	ldr	r1, [pc, #24]	; (8001cfc <QHsm_state_exit_+0x28>)
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	4798      	blx	r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
    #endif /* Q_SPY */
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	08002a54 	.word	0x08002a54

08001d00 <QPSet_insert>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
        me->bits = (me->bits | (1U << (n - 1U)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	2101      	movs	r1, #1
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <QEvt_refCtr_inc_>:
* @private @memberof QEvt
*
* @trace
* @tr{PQP11_8}
*/
static inline void QEvt_refCtr_inc_(QEvt const *me) {
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
    ++((QEvt *)me)->refCtr_;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	78db      	ldrb	r3, [r3, #3]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	70da      	strb	r2, [r3, #3]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <QActive_post_>:
/*! @private @memberof QActive */
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    #endif

    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <QActive_post_+0x1c>
 8001d60:	2164      	movs	r1, #100	; 0x64
 8001d62:	483b      	ldr	r0, [pc, #236]	; (8001e50 <QActive_post_+0x104>)
 8001d64:	f7ff fb04 	bl	8001370 <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001d68:	233f      	movs	r3, #63	; 0x3f
 8001d6a:	b672      	cpsid	i
 8001d6c:	f383 8811 	msr	BASEPRI, r3
 8001d70:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into temporary */
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	7ddb      	ldrb	r3, [r3, #23]
 8001d76:	75bb      	strb	r3, [r7, #22]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10e      	bne.n	8001da0 <QActive_post_+0x54>
        if (nFree > 0U) {
 8001d82:	7dbb      	ldrb	r3, [r7, #22]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <QActive_post_+0x42>
            status = true; /* can post */
 8001d88:	2301      	movs	r3, #1
 8001d8a:	75fb      	strb	r3, [r7, #23]
 8001d8c:	e012      	b.n	8001db4 <QActive_post_+0x68>
        }
        else {
            status = false; /* cannot post */
 8001d8e:	2300      	movs	r3, #0
 8001d90:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(190); /* must be able to post the event */
 8001d92:	2300      	movs	r3, #0
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	21be      	movs	r1, #190	; 0xbe
 8001d9a:	482d      	ldr	r0, [pc, #180]	; (8001e50 <QActive_post_+0x104>)
 8001d9c:	f7ff fae8 	bl	8001370 <Q_onAssert>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	7dba      	ldrb	r2, [r7, #22]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d902      	bls.n	8001db0 <QActive_post_+0x64>
        status = true; /* can post */
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
 8001dae:	e001      	b.n	8001db4 <QActive_post_+0x68>
    }
    else {
        status = false; /* cannot post, but don't assert */
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	789b      	ldrb	r3, [r3, #2]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <QActive_post_+0x76>
        QEvt_refCtr_inc_(e); /* increment the reference counter */
 8001dbc:	68b8      	ldr	r0, [r7, #8]
 8001dbe:	f7ff ffb4 	bl	8001d2a <QEvt_refCtr_inc_>
    }

    if (status) { /* can post the event? */
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d038      	beq.n	8001e3a <QActive_post_+0xee>

        --nFree; /* one free entry just used up */
 8001dc8:	7dbb      	ldrb	r3, [r7, #22]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the original */
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	7dba      	ldrb	r2, [r7, #22]
 8001dd2:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	7e1b      	ldrb	r3, [r3, #24]
 8001dd8:	7dba      	ldrb	r2, [r7, #22]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d202      	bcs.n	8001de4 <QActive_post_+0x98>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	7dba      	ldrb	r2, [r7, #22]
 8001de2:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <QActive_post_+0xb4>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	7f1b      	ldrb	r3, [r3, #28]
 8001df6:	4619      	mov	r1, r3
 8001df8:	4816      	ldr	r0, [pc, #88]	; (8001e54 <QActive_post_+0x108>)
 8001dfa:	f7ff ff81 	bl	8001d00 <QPSet_insert>
 8001dfe:	e018      	b.n	8001e32 <QActive_post_+0xe6>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            me->eQueue.ring[me->eQueue.head] = e;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	7d5b      	ldrb	r3, [r3, #21]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	7d5b      	ldrb	r3, [r3, #21]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d103      	bne.n	8001e24 <QActive_post_+0xd8>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	7d1a      	ldrb	r2, [r3, #20]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	7d5b      	ldrb	r3, [r3, #21]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 8001e32:	2300      	movs	r3, #0
 8001e34:	f383 8811 	msr	BASEPRI, r3
 8001e38:	e005      	b.n	8001e46 <QActive_post_+0xfa>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        QF_CRIT_X_();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f383 8811 	msr	BASEPRI, r3

    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e); /* recycle the event to avoid a leak */
 8001e40:	68b8      	ldr	r0, [r7, #8]
 8001e42:	f000 f9a5 	bl	8002190 <QF_gc>
    #endif
    }

    return status;
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	08002a64 	.word	0x08002a64
 8001e54:	200001b0 	.word	0x200001b0

08001e58 <QActive_postLIFO_>:

/*${QF::QActive::postLIFO_} ................................................*/
/*! @private @memberof QActive */
void QActive_postLIFO_(QActive * const me,
    QEvt const * const e)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001e62:	233f      	movs	r3, #63	; 0x3f
 8001e64:	b672      	cpsid	i
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into temporary */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7ddb      	ldrb	r3, [r3, #23]
 8001e70:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_DEF(&QActive_postLIFO_)
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    Q_REQUIRE_CRIT_(200, nFree != 0U);
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d106      	bne.n	8001e86 <QActive_postLIFO_+0x2e>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f383 8811 	msr	BASEPRI, r3
 8001e7e:	21c8      	movs	r1, #200	; 0xc8
 8001e80:	4824      	ldr	r0, [pc, #144]	; (8001f14 <QActive_postLIFO_+0xbc>)
 8001e82:	f7ff fa75 	bl	8001370 <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	789b      	ldrb	r3, [r3, #2]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <QActive_postLIFO_+0x3c>
        QEvt_refCtr_inc_(e); /* increment the reference counter */
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f7ff ff4b 	bl	8001d2a <QEvt_refCtr_inc_>
    }

    --nFree; /* one free entry just used up */
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the original */
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e1b      	ldrb	r3, [r3, #24]
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d202      	bcs.n	8001eb0 <QActive_postLIFO_+0x58>
        me->eQueue.nMin = nFree; /* update minimum so far */
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	761a      	strb	r2, [r3, #24]
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost((QActive *)0, me, e, true);
        }
    #endif

    QEvt const * const frontEvt  = me->eQueue.frontEvt;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <QActive_postLIFO_+0x78>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7f1b      	ldrb	r3, [r3, #28]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4813      	ldr	r0, [pc, #76]	; (8001f18 <QActive_postLIFO_+0xc0>)
 8001eca:	f7ff ff19 	bl	8001d00 <QPSet_insert>
 8001ece:	e019      	b.n	8001f04 <QActive_postLIFO_+0xac>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7d9b      	ldrb	r3, [r3, #22]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7d9b      	ldrb	r3, [r3, #22]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7d1b      	ldrb	r3, [r3, #20]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d102      	bne.n	8001ef2 <QActive_postLIFO_+0x9a>
            me->eQueue.tail = 0U; /* wrap around */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	759a      	strb	r2, [r3, #22]
        }

        me->eQueue.ring[me->eQueue.tail] = frontEvt;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7d9b      	ldrb	r3, [r3, #22]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 8001f04:	2300      	movs	r3, #0
 8001f06:	f383 8811 	msr	BASEPRI, r3
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	08002a64 	.word	0x08002a64
 8001f18:	200001b0 	.word	0x200001b0

08001f1c <QActive_get_>:
/*$enddef${QF::QActive::postLIFO_} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QF::QActive::get_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::get_} .....................................................*/
/*! @private @memberof QActive */
QEvt const * QActive_get_(QActive * const me) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT_
    QF_CRIT_E_();
 8001f24:	233f      	movs	r3, #63	; 0x3f
 8001f26:	b672      	cpsid	i
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	b662      	cpsie	i
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <QActive_get_+0x22>
 8001f36:	2100      	movs	r1, #0
 8001f38:	4823      	ldr	r0, [pc, #140]	; (8001fc8 <QActive_get_+0xac>)
 8001f3a:	f7ff fa19 	bl	8001370 <Q_onAssert>

    /* always remove event from the front */
    QEvt const * const e = me->eQueue.frontEvt;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; /* get volatile into tmp */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7ddb      	ldrb	r3, [r3, #23]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7afa      	ldrb	r2, [r7, #11]
 8001f52:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7d1b      	ldrb	r3, [r3, #20]
 8001f58:	7afa      	ldrb	r2, [r7, #11]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d81a      	bhi.n	8001f94 <QActive_get_+0x78>

        /* remove event from the tail */
        me->eQueue.frontEvt = me->eQueue.ring[me->eQueue.tail];
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7d9b      	ldrb	r3, [r3, #22]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7d9b      	ldrb	r3, [r3, #22]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d103      	bne.n	8001f84 <QActive_get_+0x68>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7d1a      	ldrb	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7d9b      	ldrb	r3, [r3, #22]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	759a      	strb	r2, [r3, #22]
 8001f92:	e010      	b.n	8001fb6 <QActive_get_+0x9a>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 8001f9a:	7afa      	ldrb	r2, [r7, #11]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7d1b      	ldrb	r3, [r3, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d007      	beq.n	8001fb6 <QActive_get_+0x9a>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f383 8811 	msr	BASEPRI, r3
 8001fac:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001fb0:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <QActive_get_+0xac>)
 8001fb2:	f7ff f9dd 	bl	8001370 <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f383 8811 	msr	BASEPRI, r3
    return e;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08002a64 	.word	0x08002a64

08001fcc <QTicker_ctor>:

/*${QF::QTicker::ctor} .....................................................*/
/*! @public @memberof QTicker */
void QTicker_ctor(QTicker * const me,
    uint_fast8_t const tickRate)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
        },
        &QActive_start_,
        &QTicker_post_,
        &QTicker_postLIFO_
    };
    QActive_ctor(&me->super, Q_STATE_CAST(0)); /* superclass' ctor */
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f9fa 	bl	80023d4 <QActive_ctor>
    me->super.super.vptr = &vtable.super; /* hook the vptr */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <QTicker_ctor+0x2c>)
 8001fe4:	601a      	str	r2, [r3, #0]

    /* reuse eQueue.head for tick-rate */
    me->super.eQueue.head = (QEQueueCtr)tickRate;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	755a      	strb	r2, [r3, #21]
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08002a6c 	.word	0x08002a6c

08001ffc <QTicker_init_>:
/*! @private @memberof QTicker */
void QTicker_init_(
    QHsm * const me,
    void const * const par,
    uint_fast8_t const qs_id)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(par);
    Q_UNUSED_PAR(qs_id);

    QTICKER_CAST_(me)->eQueue.tail = 0U;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	759a      	strb	r2, [r3, #22]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <QTicker_dispatch_>:
/*! @private @memberof QTicker */
void QTicker_dispatch_(
    QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(e);
    Q_UNUSED_PAR(qs_id);

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002026:	233f      	movs	r3, #63	; 0x3f
 8002028:	b672      	cpsid	i
 800202a:	f383 8811 	msr	BASEPRI, r3
 800202e:	b662      	cpsie	i
    QEQueueCtr nTicks = QTICKER_CAST_(me)->eQueue.tail; /* save # of ticks */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	7d9b      	ldrb	r3, [r3, #22]
 8002034:	75fb      	strb	r3, [r7, #23]
    QTICKER_CAST_(me)->eQueue.tail = 0U; /* clear # ticks */
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	759a      	strb	r2, [r3, #22]
    QF_CRIT_X_();
 800203c:	2300      	movs	r3, #0
 800203e:	f383 8811 	msr	BASEPRI, r3

    for (; nTicks > 0U; --nTicks) {
 8002042:	e009      	b.n	8002058 <QTicker_dispatch_+0x3e>
        QTimeEvt_tick_((uint_fast8_t)QTICKER_CAST_(me)->eQueue.head, me);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	7d5b      	ldrb	r3, [r3, #21]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	68f9      	ldr	r1, [r7, #12]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fb13 	bl	8002678 <QTimeEvt_tick_>
    for (; nTicks > 0U; --nTicks) {
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	3b01      	subs	r3, #1
 8002056:	75fb      	strb	r3, [r7, #23]
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f2      	bne.n	8002044 <QTicker_dispatch_+0x2a>
    }
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <QTicker_post_>:
bool QTicker_post_(
    QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    #endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002076:	233f      	movs	r3, #63	; 0x3f
 8002078:	b672      	cpsid	i
 800207a:	f383 8811 	msr	BASEPRI, r3
 800207e:	b662      	cpsie	i
    if (me->eQueue.frontEvt == (QEvt *)0) {
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10f      	bne.n	80020a8 <QTicker_post_+0x40>

        static QEvt const tickEvt = { 0U, 0U, 0U };
        me->eQueue.frontEvt = &tickEvt; /* deliver event directly */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <QTicker_post_+0x60>)
 800208c:	60da      	str	r2, [r3, #12]
        --me->eQueue.nFree; /* one less free event */
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	7ddb      	ldrb	r3, [r3, #23]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	75da      	strb	r2, [r3, #23]

        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	7f1b      	ldrb	r3, [r3, #28]
 80020a0:	4619      	mov	r1, r3
 80020a2:	480a      	ldr	r0, [pc, #40]	; (80020cc <QTicker_post_+0x64>)
 80020a4:	f7ff fe2c 	bl	8001d00 <QPSet_insert>
    }

    ++me->eQueue.tail; /* account for one more tick event */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	7d9b      	ldrb	r3, [r3, #22]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	759a      	strb	r2, [r3, #22]
        QS_2U8_PRE_(0U, 0U); /* pool Id & refCtr of the evt */
        QS_EQC_PRE_(0U);     /* number of free entries */
        QS_EQC_PRE_(0U);     /* min number of free entries */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 80020b6:	2300      	movs	r3, #0
 80020b8:	f383 8811 	msr	BASEPRI, r3

    return true; /* the event is always posted correctly */
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	08002a80 	.word	0x08002a80
 80020cc:	200001b0 	.word	0x200001b0

080020d0 <QTicker_postLIFO_>:
/*${QF::QTicker::postLIFO_} ................................................*/
/*! @private @memberof QTicker */
void QTicker_postLIFO_(
    QActive * const me,
    QEvt const * const e)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);

    Q_ERROR_ID(900);
 80020da:	f44f 7161 	mov.w	r1, #900	; 0x384
 80020de:	4801      	ldr	r0, [pc, #4]	; (80020e4 <QTicker_postLIFO_+0x14>)
 80020e0:	f7ff f946 	bl	8001370 <Q_onAssert>
 80020e4:	08002a64 	.word	0x08002a64

080020e8 <QEvt_refCtr_dec_>:
* @private @memberof QEvt
*
* @trace
* @tr{PQP11_8}
*/
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    --((QEvt *)me)->refCtr_;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	78db      	ldrb	r3, [r3, #3]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	70da      	strb	r2, [r3, #3]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <QF_poolInit>:
/*! @static @public @memberof QF */
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
    /*! @pre cannot exceed the number of available memory pools */
    Q_REQUIRE_ID(200, QF_maxPool_ < QF_MAX_EPOOL);
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <QF_poolInit+0x78>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d903      	bls.n	8002128 <QF_poolInit+0x1c>
 8002120:	21c8      	movs	r1, #200	; 0xc8
 8002122:	4819      	ldr	r0, [pc, #100]	; (8002188 <QF_poolInit+0x7c>)
 8002124:	f7ff f924 	bl	8001370 <Q_onAssert>

    /*! @pre please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE_ID(201, (QF_maxPool_ == 0U)
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <QF_poolInit+0x78>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <QF_poolInit+0x4a>
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <QF_poolInit+0x78>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1e5a      	subs	r2, r3, #1
 8002136:	4915      	ldr	r1, [pc, #84]	; (800218c <QF_poolInit+0x80>)
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	330c      	adds	r3, #12
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4293      	cmp	r3, r2
 800214c:	d803      	bhi.n	8002156 <QF_poolInit+0x4a>
 800214e:	21c9      	movs	r1, #201	; 0xc9
 8002150:	480d      	ldr	r0, [pc, #52]	; (8002188 <QF_poolInit+0x7c>)
 8002152:	f7ff f90d 	bl	8001370 <Q_onAssert>
        || (QF_EPOOL_EVENT_SIZE_(QF_ePool_[QF_maxPool_ - 1U])
            < evtSize));

    /* perform the platform-dependent initialization of the pool */
    QF_EPOOL_INIT_(QF_ePool_[QF_maxPool_], poolSto, poolSize, evtSize);
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <QF_poolInit+0x78>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <QF_poolInit+0x80>)
 8002164:	1898      	adds	r0, r3, r2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	68f9      	ldr	r1, [r7, #12]
 800216c:	f000 f850 	bl	8002210 <QMPool_init>
    ++QF_maxPool_; /* one more pool */
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <QF_poolInit+0x78>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	4a03      	ldr	r2, [pc, #12]	; (8002184 <QF_poolInit+0x78>)
 8002178:	6013      	str	r3, [r2, #0]
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)(((uint8_t)'0' + QF_maxPool_) & 0x7FU);
        QS_obj_dict_pre_(&QF_ePool_[QF_maxPool_ - 1U], (char const *)obj_name);
    }
    #endif /* Q_SPY*/
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200000e4 	.word	0x200000e4
 8002188:	08002a84 	.word	0x08002a84
 800218c:	200000e8 	.word	0x200000e8

08002190 <QF_gc>:
    return e; /* can't be NULL if we can't tolerate failed allocation */
}

/*${QF::QF-dyn::gc} ........................................................*/
/*! @static @public @memberof QF */
void QF_gc(QEvt const * const e) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	789b      	ldrb	r3, [r3, #2]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d02d      	beq.n	80021fc <QF_gc+0x6c>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 80021a0:	233f      	movs	r3, #63	; 0x3f
 80021a2:	b672      	cpsid	i
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	b662      	cpsie	i

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	78db      	ldrb	r3, [r3, #3]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d906      	bls.n	80021c2 <QF_gc+0x32>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QEvt_refCtr_dec_(e); /* decrement the ref counter */
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff97 	bl	80020e8 <QEvt_refCtr_dec_>

            QF_CRIT_X_();
 80021ba:	2300      	movs	r3, #0
 80021bc:	f383 8811 	msr	BASEPRI, r3
    #else
            QF_EPOOL_PUT_(QF_ePool_[idx], (QEvt *)e, 0U);
    #endif
        }
    }
}
 80021c0:	e01c      	b.n	80021fc <QF_gc+0x6c>
            uint_fast8_t const idx = (uint_fast8_t)e->poolId_ - 1U;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	789b      	ldrb	r3, [r3, #2]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 80021ca:	2300      	movs	r3, #0
 80021cc:	f383 8811 	msr	BASEPRI, r3
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <QF_gc+0x74>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d304      	bcc.n	80021e4 <QF_gc+0x54>
 80021da:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80021de:	480a      	ldr	r0, [pc, #40]	; (8002208 <QF_gc+0x78>)
 80021e0:	f7ff f8c6 	bl	8001370 <Q_onAssert>
            QF_EPOOL_PUT_(QF_ePool_[idx], (QEvt *)e, 0U);
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <QF_gc+0x7c>)
 80021f0:	4413      	add	r3, r2
 80021f2:	2200      	movs	r2, #0
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f87c 	bl	80022f4 <QMPool_put>
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200000e4 	.word	0x200000e4
 8002208:	08002a84 	.word	0x08002a84
 800220c:	200000e8 	.word	0x200000e8

08002210 <QMPool_init>:
/*! @public @memberof QMPool */
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t poolSize,
    uint_fast16_t blockSize)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
    Q_REQUIRE_ID(100, (poolSto != (void *)0)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <QMPool_init+0x22>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d903      	bls.n	8002232 <QMPool_init+0x22>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f113 0f05 	cmn.w	r3, #5
 8002230:	d903      	bls.n	800223a <QMPool_init+0x2a>
 8002232:	2164      	movs	r1, #100	; 0x64
 8002234:	482e      	ldr	r0, [pc, #184]	; (80022f0 <QMPool_init+0xe0>)
 8002236:	f7ff f89b 	bl	8001370 <Q_onAssert>
            && (poolSize >= (uint_fast32_t)sizeof(QFreeBlock))
            && ((uint_fast16_t)(blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = poolSto;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	609a      	str	r2, [r3, #8]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2204      	movs	r2, #4
 8002244:	819a      	strh	r2, [r3, #12]

    /* #free blocks that fit in one memory block */
    uint_fast16_t nblocks = 1U;
 8002246:	2301      	movs	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 800224a:	e008      	b.n	800225e <QMPool_init+0x4e>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	899b      	ldrh	r3, [r3, #12]
 8002250:	3304      	adds	r3, #4
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3301      	adds	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	899a      	ldrh	r2, [r3, #12]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	429a      	cmp	r2, r3
 8002268:	d3f0      	bcc.n	800224c <QMPool_init+0x3c>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	899b      	ldrh	r3, [r3, #12]
 800226e:	603b      	str	r3, [r7, #0]

    /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT_ID(110, poolSize >= blockSize);
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d203      	bcs.n	8002280 <QMPool_init+0x70>
 8002278:	216e      	movs	r1, #110	; 0x6e
 800227a:	481d      	ldr	r0, [pc, #116]	; (80022f0 <QMPool_init+0xe0>)
 800227c:	f7ff f878 	bl	8001370 <Q_onAssert>

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	607b      	str	r3, [r7, #4]
    me->nTot  = 1U; /* the last block already in the pool */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	81da      	strh	r2, [r3, #14]

    /* start at the head of the free list */
    QFreeBlock *fb = (QFreeBlock *)me->free_head;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	613b      	str	r3, [r7, #16]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
 8002294:	e012      	b.n	80022bc <QMPool_init+0xac>
        fb->next = &fb[nblocks]; /* point next link to next block */
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	441a      	add	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	613b      	str	r3, [r7, #16]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	607b      	str	r3, [r7, #4]
        ++me->nTot;              /* increment the number of blocks so far */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	89db      	ldrh	r3, [r3, #14]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	81da      	strh	r2, [r3, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d2e8      	bcs.n	8002296 <QMPool_init+0x86>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	89da      	ldrh	r2, [r3, #14]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	89da      	ldrh	r2, [r3, #14]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	825a      	strh	r2, [r3, #18]
    me->start = poolSto;         /* the original start this pool buffer */
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	601a      	str	r2, [r3, #0]
    me->end   = fb;              /* the last block in this pool */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	605a      	str	r2, [r3, #4]
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	08002a8c 	.word	0x08002a8c

080022f4 <QMPool_put>:
/*${QF::QMPool::put} .......................................................*/
/*! @public @memberof QMPool */
void QMPool_put(QMPool * const me,
    void * const b,
    uint_fast8_t const qs_id)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qs_id);
    #endif

    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8a1b      	ldrh	r3, [r3, #16]
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	89db      	ldrh	r3, [r3, #14]
 800230a:	429a      	cmp	r2, r3
 800230c:	d209      	bcs.n	8002322 <QMPool_put+0x2e>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	429a      	cmp	r2, r3
 8002316:	d304      	bcc.n	8002322 <QMPool_put+0x2e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d903      	bls.n	800232a <QMPool_put+0x36>
 8002322:	21c8      	movs	r1, #200	; 0xc8
 8002324:	480e      	ldr	r0, [pc, #56]	; (8002360 <QMPool_put+0x6c>)
 8002326:	f7ff f823 	bl	8001370 <Q_onAssert>
                      && (me->start <= b) && (b <= me->end));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800232a:	233f      	movs	r3, #63	; 0x3f
 800232c:	b672      	cpsid	i
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	b662      	cpsie	i
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	609a      	str	r2, [r3, #8]
    ++me->nFree;            /* one more free block in this pool */
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8a1b      	ldrh	r3, [r3, #16]
 8002346:	b29b      	uxth	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8002350:	2300      	movs	r3, #0
 8002352:	f383 8811 	msr	BASEPRI, r3
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	08002a8c 	.word	0x08002a8c

08002364 <QActive_psInit>:
/*${QF::QActive::psInit} ...................................................*/
/*! @static @public @memberof QActive */
void QActive_psInit(
    QSubscrList * const subscrSto,
    enum_t const maxSignal)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
    QActive_subscrList_   = subscrSto;
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <QActive_psInit+0x2c>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6013      	str	r3, [r2, #0]
    QActive_maxPubSignal_ = maxSignal;
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <QActive_psInit+0x30>)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6013      	str	r3, [r2, #0]

    /* zero the subscriber list, so that the framework can start correctly
    * even if the startup code fails to clear the uninitialized data
    * (as is required by the C Standard).
    */
    QF_bzero(subscrSto, (uint_fast16_t)maxSignal * sizeof(QSubscrList));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4619      	mov	r1, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f809 	bl	8002398 <QF_bzero>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000124 	.word	0x20000124
 8002394:	20000128 	.word	0x20000128

08002398 <QF_bzero>:
/*${QF::QF-pkg::bzero} .....................................................*/
/*! @static @public @memberof QF */
void QF_bzero(
    void * const start,
    uint_fast16_t const len)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	e008      	b.n	80023be <QF_bzero+0x26>
        *ptr = 0U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
        ++ptr;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3301      	adds	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f3      	bne.n	80023ac <QF_bzero+0x14>
    }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <QActive_ctor>:

/*${QF::QActive::ctor} .....................................................*/
/*! @protected @memberof QActive */
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    };
    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 80023de:	2120      	movs	r1, #32
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ffd9 	bl	8002398 <QF_bzero>

    QHsm_ctor(&me->super, initial); /* explicitly call superclass' ctor */
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fa06 	bl	80017fc <QHsm_ctor>
    me->super.vptr = &vtable.super; /* hook the vptr to QActive vtable */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a03      	ldr	r2, [pc, #12]	; (8002400 <QActive_ctor+0x2c>)
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	08002a9c 	.word	0x08002a9c

08002404 <QActive_register_>:
/*$enddef${QF::QActive::ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QF::QActive::register_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::register_} ................................................*/
/*! @protected @memberof QActive */
void QActive_register_(QActive * const me) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
    if (me->pthre == 0U) { /* preemption-threshold not defined? */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7f5b      	ldrb	r3, [r3, #29]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d103      	bne.n	800241c <QActive_register_+0x18>
        me->pthre = me->prio; /* apply the default */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7f1a      	ldrb	r2, [r3, #28]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	775a      	strb	r2, [r3, #29]
    }

    #ifndef Q_NASSERT

    Q_REQUIRE_ID(100, (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7f1b      	ldrb	r3, [r3, #28]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d011      	beq.n	8002448 <QActive_register_+0x44>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7f1b      	ldrb	r3, [r3, #28]
 8002428:	2b20      	cmp	r3, #32
 800242a:	d80d      	bhi.n	8002448 <QActive_register_+0x44>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	7f1b      	ldrb	r3, [r3, #28]
 8002430:	461a      	mov	r2, r3
 8002432:	4b33      	ldr	r3, [pc, #204]	; (8002500 <QActive_register_+0xfc>)
 8002434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <QActive_register_+0x44>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7f1a      	ldrb	r2, [r3, #28]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7f5b      	ldrb	r3, [r3, #29]
 8002444:	429a      	cmp	r2, r3
 8002446:	d903      	bls.n	8002450 <QActive_register_+0x4c>
 8002448:	2164      	movs	r1, #100	; 0x64
 800244a:	482e      	ldr	r0, [pc, #184]	; (8002504 <QActive_register_+0x100>)
 800244c:	f7fe ff90 	bl	8001370 <Q_onAssert>
                      && (QActive_registry_[me->prio] == (QActive *)0)
                      && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7f5b      	ldrb	r3, [r3, #29]
 8002454:	73fb      	strb	r3, [r7, #15]
    uint8_t next_thre = me->pthre;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7f5b      	ldrb	r3, [r3, #29]
 800245a:	73bb      	strb	r3, [r7, #14]
    uint_fast8_t p;

    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7f1b      	ldrb	r3, [r3, #28]
 8002460:	3b01      	subs	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	e00f      	b.n	8002486 <QActive_register_+0x82>
        if (QActive_registry_[p] != (QActive *)0) {
 8002466:	4a26      	ldr	r2, [pc, #152]	; (8002500 <QActive_register_+0xfc>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <QActive_register_+0x7c>
            prev_thre = QActive_registry_[p]->pthre;
 8002472:	4a23      	ldr	r2, [pc, #140]	; (8002500 <QActive_register_+0xfc>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	7f5b      	ldrb	r3, [r3, #29]
 800247c:	73fb      	strb	r3, [r7, #15]
            break;
 800247e:	e005      	b.n	800248c <QActive_register_+0x88>
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	3b01      	subs	r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ec      	bne.n	8002466 <QActive_register_+0x62>
        }
    }
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7f1b      	ldrb	r3, [r3, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	e00f      	b.n	80024b6 <QActive_register_+0xb2>
        if (QActive_registry_[p] != (QActive *)0) {
 8002496:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <QActive_register_+0xfc>)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <QActive_register_+0xac>
            next_thre = QActive_registry_[p]->pthre;
 80024a2:	4a17      	ldr	r2, [pc, #92]	; (8002500 <QActive_register_+0xfc>)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	7f5b      	ldrb	r3, [r3, #29]
 80024ac:	73bb      	strb	r3, [r7, #14]
            break;
 80024ae:	e005      	b.n	80024bc <QActive_register_+0xb8>
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	3301      	adds	r3, #1
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d9ec      	bls.n	8002496 <QActive_register_+0x92>
        }
    }

    Q_ENSURE_ID(190, (prev_thre <= me->pthre) && (me->pthre <= next_thre));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7f5b      	ldrb	r3, [r3, #29]
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d804      	bhi.n	80024d0 <QActive_register_+0xcc>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7f5b      	ldrb	r3, [r3, #29]
 80024ca:	7bba      	ldrb	r2, [r7, #14]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d203      	bcs.n	80024d8 <QActive_register_+0xd4>
 80024d0:	21be      	movs	r1, #190	; 0xbe
 80024d2:	480c      	ldr	r0, [pc, #48]	; (8002504 <QActive_register_+0x100>)
 80024d4:	f7fe ff4c 	bl	8001370 <Q_onAssert>

    #endif // Q_NASSERT

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80024d8:	233f      	movs	r3, #63	; 0x3f
 80024da:	b672      	cpsid	i
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	b662      	cpsie	i
    /* register the AO at the "QF-priority" */
    QActive_registry_[me->prio] = me;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7f1b      	ldrb	r3, [r3, #28]
 80024e6:	4619      	mov	r1, r3
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <QActive_register_+0xfc>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    QF_CRIT_X_();
 80024f0:	2300      	movs	r3, #0
 80024f2:	f383 8811 	msr	BASEPRI, r3
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000012c 	.word	0x2000012c
 8002504:	08002a94 	.word	0x08002a94

08002508 <QEQueue_init>:
/*${QF::QEQueue::init} .....................................................*/
/*! @public @memberof QEQueue */
void QEQueue_init(QEQueue * const me,
    QEvt const ** const qSto,
    uint_fast16_t const qLen)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <QEQueue_init+0x32>
        me->head = 0U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3301      	adds	r3, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	7adb      	ldrb	r3, [r3, #11]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	731a      	strb	r2, [r3, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <QTimeEvt_ctorX>:
/*! @public @memberof QTimeEvt */
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
    Q_REQUIRE_ID(300, (sig != 0)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <QTimeEvt_ctorX+0x1a>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d904      	bls.n	8002580 <QTimeEvt_ctorX+0x24>
 8002576:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800257a:	480f      	ldr	r0, [pc, #60]	; (80025b8 <QTimeEvt_ctorX+0x5c>)
 800257c:	f7fe fef8 	bl	8001370 <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]
    me->interval  = 0U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
    me->super.sig = (QSignal)sig;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with the deprecated QTimeEvt_ctor(),
    * the active object pointer `act` can be uninitialized (NULL) and is
    * NOT validated in the precondition. The active object pointer is
    * validated in preconditions to QTimeEvt_armX() and QTimeEvt_rearm().
    */
    me->act = act;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	70da      	strb	r2, [r3, #3]
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	08002ab0 	.word	0x08002ab0

080025bc <QTimeEvt_armX>:
/*${QF::QTimeEvt::armX} ....................................................*/
/*! @public @memberof QTimeEvt */
void QTimeEvt_armX(QTimeEvt * const me,
    QTimeEvtCtr const nTicks,
    QTimeEvtCtr const interval)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	78db      	ldrb	r3, [r3, #3]
 80025cc:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	617b      	str	r3, [r7, #20]
    QTimeEvtCtr const ctr = me->ctr;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	613b      	str	r3, [r7, #16]
    #ifdef Q_SPY
    uint_fast8_t const qs_id = ((QActive *)(me->act))->prio;
    #endif

    Q_REQUIRE_ID(400, (me->act != (void *)0)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <QTimeEvt_armX+0x40>
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <QTimeEvt_armX+0x40>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <QTimeEvt_armX+0x40>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d803      	bhi.n	80025fc <QTimeEvt_armX+0x40>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d804      	bhi.n	8002606 <QTimeEvt_armX+0x4a>
 80025fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002600:	481b      	ldr	r0, [pc, #108]	; (8002670 <QTimeEvt_armX+0xb4>)
 8002602:	f7fe feb5 	bl	8001370 <Q_onAssert>
    #ifdef Q_NASSERT
    Q_UNUSED_PAR(ctr);
    #endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002606:	233f      	movs	r3, #63	; 0x3f
 8002608:	b672      	cpsid	i
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	b662      	cpsie	i
    me->ctr = nTicks;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	60da      	str	r2, [r3, #12]
    me->interval = interval;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in QTimeEvt_tick_().
    */
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	78db      	ldrb	r3, [r3, #3]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	b25b      	sxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	db1c      	blt.n	8002662 <QTimeEvt_armX+0xa6>
        me->super.refCtr_ |= QTE_IS_LINKED; /* mark as linked */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	78db      	ldrb	r3, [r3, #3]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002632:	b2da      	uxtb	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QTimeEvt_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QTimeEvt_tick_()
        * function.
        */
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8002638:	490e      	ldr	r1, [pc, #56]	; (8002674 <QTimeEvt_armX+0xb8>)
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3308      	adds	r3, #8
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 800264e:	4909      	ldr	r1, [pc, #36]	; (8002674 <QTimeEvt_armX+0xb8>)
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	3308      	adds	r3, #8
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8002662:	2300      	movs	r3, #0
 8002664:	f383 8811 	msr	BASEPRI, r3
}
 8002668:	bf00      	nop
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	08002ab0 	.word	0x08002ab0
 8002674:	200001b4 	.word	0x200001b4

08002678 <QTimeEvt_tick_>:
/*${QF::QTimeEvt::tick_} ...................................................*/
/*! @static @private @memberof QTimeEvt */
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    #endif

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4a4a      	ldr	r2, [pc, #296]	; (80027b8 <QTimeEvt_tick_+0x140>)
 800268e:	4413      	add	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002692:	233f      	movs	r3, #63	; 0x3f
 8002694:	b672      	cpsid	i
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	b662      	cpsie	i
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d12c      	bne.n	8002702 <QTimeEvt_tick_+0x8a>

            /* any new time events armed since the last QTimeEvt_tick_()? */
            if (QTimeEvt_timeEvtHead_[tickRate].act != (void *)0) {
 80026a8:	4943      	ldr	r1, [pc, #268]	; (80027b8 <QTimeEvt_tick_+0x140>)
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3308      	adds	r3, #8
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d074      	beq.n	80027a8 <QTimeEvt_tick_+0x130>

                /* sanity check */
                Q_ASSERT_CRIT_(110, prev != (QTimeEvt *)0);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <QTimeEvt_tick_+0x5a>
 80026c4:	2300      	movs	r3, #0
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	216e      	movs	r1, #110	; 0x6e
 80026cc:	483b      	ldr	r0, [pc, #236]	; (80027bc <QTimeEvt_tick_+0x144>)
 80026ce:	f7fe fe4f 	bl	8001370 <Q_onAssert>
                prev->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 80026d2:	4939      	ldr	r1, [pc, #228]	; (80027b8 <QTimeEvt_tick_+0x140>)
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	3308      	adds	r3, #8
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	605a      	str	r2, [r3, #4]
                QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 80026e8:	4933      	ldr	r1, [pc, #204]	; (80027b8 <QTimeEvt_tick_+0x140>)
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3308      	adds	r3, #8
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	613b      	str	r3, [r7, #16]
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d111      	bne.n	800272e <QTimeEvt_tick_+0xb6>
            prev->next = t->next;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	78db      	ldrb	r3, [r3, #3]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800271c:	b2da      	uxtb	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	70da      	strb	r2, [r3, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_X_(); /* exit crit. section to reduce latency */
 8002722:	2300      	movs	r3, #0
 8002724:	f383 8811 	msr	BASEPRI, r3

            /* prevent merging critical sections, see NOTE1 below  */
            QF_CRIT_EXIT_NOP();
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	e036      	b.n	800279c <QTimeEvt_tick_+0x124>
        }
        else {
            --t->ctr;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	1e5a      	subs	r2, r3, #1
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	60da      	str	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == 0U) {
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d126      	bne.n	800278e <QTimeEvt_tick_+0x116>
                QActive * const act = (QActive *)t->act;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	60fb      	str	r3, [r7, #12]

                /* periodic time evt? */
                if (t->interval != 0U) {
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <QTimeEvt_tick_+0xe4>
                    t->ctr = t->interval; /* rearm the time event */
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	60da      	str	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e00b      	b.n	8002774 <QTimeEvt_tick_+0xfc>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	78db      	ldrb	r3, [r3, #3]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800276e:	b2da      	uxtb	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	70da      	strb	r2, [r3, #3]
                    QS_SIG_PRE_(t->super.sig); /* signal of this time event */
                    QS_OBJ_PRE_(act);          /* the target AO */
                    QS_U8_PRE_(tickRate);      /* tick rate */
                QS_END_NOCRIT_PRE_()

                QF_CRIT_X_(); /* exit critical section before posting */
 8002774:	2300      	movs	r3, #0
 8002776:	f383 8811 	msr	BASEPRI, r3

                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68dc      	ldr	r4, [r3, #12]
 8002780:	6939      	ldr	r1, [r7, #16]
 8002782:	2300      	movs	r3, #0
 8002784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	47a0      	blx	r4
 800278c:	e006      	b.n	800279c <QTimeEvt_tick_+0x124>
            }
            else {
                prev = t;         /* advance to this time event */
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	617b      	str	r3, [r7, #20]
                QF_CRIT_X_();  /* exit crit. section to reduce latency */
 8002792:	2300      	movs	r3, #0
 8002794:	f383 8811 	msr	BASEPRI, r3
                * two adjacent critical sections would be merged. The
                * QF_CRIT_EXIT_NOP() macro contains minimal code required
                * to prevent such merging of critical sections in QF ports,
                * in which it can occur.
                */
                QF_CRIT_EXIT_NOP();
 8002798:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_E_(); /* re-enter crit. section to continue */
 800279c:	233f      	movs	r3, #63	; 0x3f
 800279e:	b672      	cpsid	i
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	b662      	cpsie	i
    for (;;) {
 80027a6:	e779      	b.n	800269c <QTimeEvt_tick_+0x24>
                break; /* all currently armed time evts. processed */
 80027a8:	bf00      	nop
    }
    QF_CRIT_X_();
 80027aa:	2300      	movs	r3, #0
 80027ac:	f383 8811 	msr	BASEPRI, r3
}
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd90      	pop	{r4, r7, pc}
 80027b8:	200001b4 	.word	0x200001b4
 80027bc:	08002ab0 	.word	0x08002ab0

080027c0 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
        return (me->bits != 0U);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf14      	ite	ne
 80027d0:	2301      	movne	r3, #1
 80027d2:	2300      	moveq	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <QPSet_remove>:
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
        me->bits = (me->bits &
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
            (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	43db      	mvns	r3, r3
        me->bits = (me->bits &
 80027fc:	401a      	ands	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <QPSet_findMax>:
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
        return QF_LOG2(me->bits);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	f1c3 0320 	rsb	r3, r3, #32
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <QF_init>:
/*$enddef${QV::QV-base} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QV::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QV::QF-cust::init} .....................................................*/
/*! @static @public @memberof QF */
void QF_init(void) {
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
    #if (QF_MAX_EPOOL > 0U)
    QF_maxPool_ = 0U;
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <QF_init+0x2c>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    #endif

    QF_bzero(&QTimeEvt_timeEvtHead_[0], sizeof(QTimeEvt_timeEvtHead_));
 800283a:	2128      	movs	r1, #40	; 0x28
 800283c:	4808      	ldr	r0, [pc, #32]	; (8002860 <QF_init+0x30>)
 800283e:	f7ff fdab 	bl	8002398 <QF_bzero>
    QF_bzero(&QActive_registry_[0],     sizeof(QActive_registry_));
 8002842:	2184      	movs	r1, #132	; 0x84
 8002844:	4807      	ldr	r0, [pc, #28]	; (8002864 <QF_init+0x34>)
 8002846:	f7ff fda7 	bl	8002398 <QF_bzero>
    QF_bzero(&QF_readySet_,             sizeof(QF_readySet_));
 800284a:	2104      	movs	r1, #4
 800284c:	4806      	ldr	r0, [pc, #24]	; (8002868 <QF_init+0x38>)
 800284e:	f7ff fda3 	bl	8002398 <QF_bzero>

    #ifdef QV_INIT
    QV_INIT(); /* port-specific initialization of the QV kernel */
 8002852:	f7fe ff89 	bl	8001768 <QV_init>
    #endif
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200000e4 	.word	0x200000e4
 8002860:	200001b4 	.word	0x200001b4
 8002864:	2000012c 	.word	0x2000012c
 8002868:	200001b0 	.word	0x200001b0

0800286c <QF_run>:
    /* nothing else to do for the cooperative QV kernel */
}

/*${QV::QF-cust::run} ......................................................*/
/*! @static @public @memberof QF */
int_t QF_run(void) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
    QS_beginRec_((uint_fast8_t)QS_QF_RUN);
    QS_endRec_();
    QF_INT_ENABLE();
    #endif /* Q_SPY */

    QF_onStartup(); /* application-specific startup callback */
 8002872:	f7fe fd59 	bl	8001328 <QF_onStartup>

    QF_INT_DISABLE();
 8002876:	233f      	movs	r3, #63	; 0x3f
 8002878:	b672      	cpsid	i
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	b662      	cpsie	i

    #ifdef QV_START
    QV_START(); /* port-specific startup of the QV kernel */
 8002880:	2300      	movs	r3, #0
 8002882:	f383 8814 	msr	CONTROL, r3
    #endif /* (defined QF_ON_CONTEXT_SW) || (defined Q_SPY) */

    for (;;) { /* QV event loop... */

        /* find the maximum priority AO ready to run */
        if (QPSet_notEmpty(&QF_readySet_)) {
 8002886:	481c      	ldr	r0, [pc, #112]	; (80028f8 <QF_run+0x8c>)
 8002888:	f7ff ff9a 	bl	80027c0 <QPSet_notEmpty>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d029      	beq.n	80028e6 <QF_run+0x7a>
            uint8_t const p = (uint8_t)QPSet_findMax(&QF_readySet_);
 8002892:	4819      	ldr	r0, [pc, #100]	; (80028f8 <QF_run+0x8c>)
 8002894:	f7ff ffbb 	bl	800280e <QPSet_findMax>
 8002898:	4603      	mov	r3, r0
 800289a:	73fb      	strb	r3, [r7, #15]
            QActive * const a = QActive_registry_[p];
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <QF_run+0x90>)
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	60bb      	str	r3, [r7, #8]
    #endif /* QF_ON_CONTEXT_SW */

            pprev = p; /* update previous priority */
    #endif /* (defined QF_ON_CONTEXT_SW) || (defined Q_SPY) */

            QF_INT_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	f383 8811 	msr	BASEPRI, r3
            * 1. retrieve the event from the AO's event queue, which
            *    by this time must be non-empty (and QV asserts it).
            * 2. dispatch the event to the AO's state machine.
            * 3. determine if event is garbage and collect it if so
            */
            QEvt const * const e = QActive_get_(a);
 80028ac:	68b8      	ldr	r0, [r7, #8]
 80028ae:	f7ff fb35 	bl	8001f1c <QActive_get_>
 80028b2:	6078      	str	r0, [r7, #4]
            QHSM_DISPATCH(&a->super, e, a->prio);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	68b8      	ldr	r0, [r7, #8]
 80028bc:	2200      	movs	r2, #0
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4798      	blx	r3
    #if (QF_MAX_EPOOL > 0U)
            QF_gc(e);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff fc64 	bl	8002190 <QF_gc>
    #endif
            QF_INT_DISABLE();
 80028c8:	233f      	movs	r3, #63	; 0x3f
 80028ca:	b672      	cpsid	i
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	b662      	cpsie	i

            if (a->eQueue.frontEvt == (QEvt *)0) { /* empty queue? */
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1d5      	bne.n	8002886 <QF_run+0x1a>
                QPSet_remove(&QF_readySet_, p);
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	4619      	mov	r1, r3
 80028de:	4806      	ldr	r0, [pc, #24]	; (80028f8 <QF_run+0x8c>)
 80028e0:	f7ff ff7f 	bl	80027e2 <QPSet_remove>
 80028e4:	e7cf      	b.n	8002886 <QF_run+0x1a>
            *
            * NOTE: QV_onIdle() MUST enable interrupts internally,
            * ideally at the same time as putting the CPU into a power-
            * saving mode.
            */
            QV_onIdle();
 80028e6:	f7fe fd39 	bl	800135c <QV_onIdle>

            QF_INT_DISABLE(); /* disable interrupts before looping back */
 80028ea:	233f      	movs	r3, #63	; 0x3f
 80028ec:	b672      	cpsid	i
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	b662      	cpsie	i
        if (QPSet_notEmpty(&QF_readySet_)) {
 80028f4:	e7c7      	b.n	8002886 <QF_run+0x1a>
 80028f6:	bf00      	nop
 80028f8:	200001b0 	.word	0x200001b0
 80028fc:	2000012c 	.word	0x2000012c

08002900 <QActive_start_>:
    QEvt const * * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	460b      	mov	r3, r1
 800290e:	817b      	strh	r3, [r7, #10]
    Q_UNUSED_PAR(stkSto);  /* not needed in QV */
    Q_UNUSED_PAR(stkSize); /* not needed in QV */

    Q_REQUIRE_ID(300, stkSto == (void *)0);
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <QActive_start_+0x20>
 8002916:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800291a:	4815      	ldr	r0, [pc, #84]	; (8002970 <QActive_start_+0x70>)
 800291c:	f7fe fd28 	bl	8001370 <Q_onAssert>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); /* QF-priority of the AO */
 8002920:	897b      	ldrh	r3, [r7, #10]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	771a      	strb	r2, [r3, #28]
    me->pthre = (uint8_t)(prioSpec >> 8U);   /* preemption-threshold */
 8002928:	897b      	ldrh	r3, [r7, #10]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29b      	uxth	r3, r3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	775a      	strb	r2, [r3, #29]
    QActive_register_(me); /* make QF aware of this active object */
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7ff fd65 	bl	8002404 <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); /* init the built-in queue */
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	330c      	adds	r3, #12
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fde0 	bl	8002508 <QEQueue_init>

    QHSM_INIT(&me->super, par, me->prio); /* top-most initial tran. */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <QActive_start_+0x58>
 8002950:	21dc      	movs	r1, #220	; 0xdc
 8002952:	4807      	ldr	r0, [pc, #28]	; (8002970 <QActive_start_+0x70>)
 8002954:	f7fe fd0c 	bl	8001370 <Q_onAssert>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	6a39      	ldr	r1, [r7, #32]
 8002964:	4798      	blx	r3
    QS_FLUSH(); /* flush the trace buffer to the host */
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	08002ab8 	.word	0x08002ab8

08002974 <__libc_init_array>:
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	4d0d      	ldr	r5, [pc, #52]	; (80029ac <__libc_init_array+0x38>)
 8002978:	4c0d      	ldr	r4, [pc, #52]	; (80029b0 <__libc_init_array+0x3c>)
 800297a:	1b64      	subs	r4, r4, r5
 800297c:	10a4      	asrs	r4, r4, #2
 800297e:	2600      	movs	r6, #0
 8002980:	42a6      	cmp	r6, r4
 8002982:	d109      	bne.n	8002998 <__libc_init_array+0x24>
 8002984:	4d0b      	ldr	r5, [pc, #44]	; (80029b4 <__libc_init_array+0x40>)
 8002986:	4c0c      	ldr	r4, [pc, #48]	; (80029b8 <__libc_init_array+0x44>)
 8002988:	f000 f820 	bl	80029cc <_init>
 800298c:	1b64      	subs	r4, r4, r5
 800298e:	10a4      	asrs	r4, r4, #2
 8002990:	2600      	movs	r6, #0
 8002992:	42a6      	cmp	r6, r4
 8002994:	d105      	bne.n	80029a2 <__libc_init_array+0x2e>
 8002996:	bd70      	pop	{r4, r5, r6, pc}
 8002998:	f855 3b04 	ldr.w	r3, [r5], #4
 800299c:	4798      	blx	r3
 800299e:	3601      	adds	r6, #1
 80029a0:	e7ee      	b.n	8002980 <__libc_init_array+0xc>
 80029a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a6:	4798      	blx	r3
 80029a8:	3601      	adds	r6, #1
 80029aa:	e7f2      	b.n	8002992 <__libc_init_array+0x1e>
 80029ac:	08002abc 	.word	0x08002abc
 80029b0:	08002abc 	.word	0x08002abc
 80029b4:	08002abc 	.word	0x08002abc
 80029b8:	08002ac0 	.word	0x08002ac0

080029bc <memset>:
 80029bc:	4402      	add	r2, r0
 80029be:	4603      	mov	r3, r0
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d100      	bne.n	80029c6 <memset+0xa>
 80029c4:	4770      	bx	lr
 80029c6:	f803 1b01 	strb.w	r1, [r3], #1
 80029ca:	e7f9      	b.n	80029c0 <memset+0x4>

080029cc <_init>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	bf00      	nop
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr

080029d8 <_fini>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	bf00      	nop
 80029dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029de:	bc08      	pop	{r3}
 80029e0:	469e      	mov	lr, r3
 80029e2:	4770      	bx	lr
