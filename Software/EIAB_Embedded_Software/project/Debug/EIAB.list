
EIAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001330  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001508  08001508  00011508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001518  08001518  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001518  08001518  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001518  08001518  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001518  08001518  00011518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800151c  0800151c  0001151c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800152c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800152c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041ca  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001020  00000000  00000000  00024206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000588  00000000  00000000  00025228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  000257b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b718  00000000  00000000  00025ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000059a0  00000000  00000000  000413b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad77e  00000000  00000000  00046d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f44d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000143c  00000000  00000000  000f4528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080014f0 	.word	0x080014f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080014f0 	.word	0x080014f0

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f944 	bl	80004b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	200f      	movs	r0, #15
 800022a:	f000 f815 	bl	8000258 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f000 f805 	bl	8000248 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
	...

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000260:	2300      	movs	r3, #0
 8000262:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <HAL_InitTick+0x68>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d022      	beq.n	80002b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <HAL_InitTick+0x6c>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <HAL_InitTick+0x68>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000278:	fbb1 f3f3 	udiv	r3, r1, r3
 800027c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f93a 	bl	80004fa <HAL_SYSTICK_Config>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d10f      	bne.n	80002ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b0f      	cmp	r3, #15
 8000290:	d809      	bhi.n	80002a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000292:	2200      	movs	r2, #0
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	f04f 30ff 	mov.w	r0, #4294967295
 800029a:	f000 f914 	bl	80004c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <HAL_InitTick+0x70>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	6013      	str	r3, [r2, #0]
 80002a4:	e007      	b.n	80002b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80002a6:	2301      	movs	r3, #1
 80002a8:	73fb      	strb	r3, [r7, #15]
 80002aa:	e004      	b.n	80002b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002ac:	2301      	movs	r3, #1
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	e001      	b.n	80002b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000004 	.word	0x20000004
 80002c4:	20000008 	.word	0x20000008
 80002c8:	20000000 	.word	0x20000000

080002cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <HAL_IncTick+0x1c>)
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <HAL_IncTick+0x20>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4413      	add	r3, r2
 80002da:	4a03      	ldr	r2, [pc, #12]	; (80002e8 <HAL_IncTick+0x1c>)
 80002dc:	6013      	str	r3, [r2, #0]
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	20000028 	.word	0x20000028
 80002ec:	20000004 	.word	0x20000004

080002f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  return uwTick;
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <HAL_GetTick+0x14>)
 80002f6:	681b      	ldr	r3, [r3, #0]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	20000028 	.word	0x20000028

08000308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000310:	f7ff ffee 	bl	80002f0 <HAL_GetTick>
 8000314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000320:	d004      	beq.n	800032c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <HAL_Delay+0x40>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	4413      	add	r3, r2
 800032a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800032c:	bf00      	nop
 800032e:	f7ff ffdf 	bl	80002f0 <HAL_GetTick>
 8000332:	4602      	mov	r2, r0
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	429a      	cmp	r2, r3
 800033c:	d8f7      	bhi.n	800032e <HAL_Delay+0x26>
  {
  }
}
 800033e:	bf00      	nop
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000004 	.word	0x20000004

0800034c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f003 0307 	and.w	r3, r3, #7
 800035a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <__NVIC_SetPriorityGrouping+0x44>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000362:	68ba      	ldr	r2, [r7, #8]
 8000364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000368:	4013      	ands	r3, r2
 800036a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800037e:	4a04      	ldr	r2, [pc, #16]	; (8000390 <__NVIC_SetPriorityGrouping+0x44>)
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	60d3      	str	r3, [r2, #12]
}
 8000384:	bf00      	nop
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <__NVIC_GetPriorityGrouping+0x18>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	0a1b      	lsrs	r3, r3, #8
 800039e:	f003 0307 	and.w	r3, r3, #7
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	6039      	str	r1, [r7, #0]
 80003ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	db0a      	blt.n	80003da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	490c      	ldr	r1, [pc, #48]	; (80003fc <__NVIC_SetPriority+0x4c>)
 80003ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ce:	0112      	lsls	r2, r2, #4
 80003d0:	b2d2      	uxtb	r2, r2
 80003d2:	440b      	add	r3, r1
 80003d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003d8:	e00a      	b.n	80003f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	4908      	ldr	r1, [pc, #32]	; (8000400 <__NVIC_SetPriority+0x50>)
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	f003 030f 	and.w	r3, r3, #15
 80003e6:	3b04      	subs	r3, #4
 80003e8:	0112      	lsls	r2, r2, #4
 80003ea:	b2d2      	uxtb	r2, r2
 80003ec:	440b      	add	r3, r1
 80003ee:	761a      	strb	r2, [r3, #24]
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	e000e100 	.word	0xe000e100
 8000400:	e000ed00 	.word	0xe000ed00

08000404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000404:	b480      	push	{r7}
 8000406:	b089      	sub	sp, #36	; 0x24
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f003 0307 	and.w	r3, r3, #7
 8000416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000418:	69fb      	ldr	r3, [r7, #28]
 800041a:	f1c3 0307 	rsb	r3, r3, #7
 800041e:	2b04      	cmp	r3, #4
 8000420:	bf28      	it	cs
 8000422:	2304      	movcs	r3, #4
 8000424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	3304      	adds	r3, #4
 800042a:	2b06      	cmp	r3, #6
 800042c:	d902      	bls.n	8000434 <NVIC_EncodePriority+0x30>
 800042e:	69fb      	ldr	r3, [r7, #28]
 8000430:	3b03      	subs	r3, #3
 8000432:	e000      	b.n	8000436 <NVIC_EncodePriority+0x32>
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000438:	f04f 32ff 	mov.w	r2, #4294967295
 800043c:	69bb      	ldr	r3, [r7, #24]
 800043e:	fa02 f303 	lsl.w	r3, r2, r3
 8000442:	43da      	mvns	r2, r3
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	401a      	ands	r2, r3
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800044c:	f04f 31ff 	mov.w	r1, #4294967295
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	fa01 f303 	lsl.w	r3, r1, r3
 8000456:	43d9      	mvns	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800045c:	4313      	orrs	r3, r2
         );
}
 800045e:	4618      	mov	r0, r3
 8000460:	3724      	adds	r7, #36	; 0x24
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
	...

0800046c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3b01      	subs	r3, #1
 8000478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800047c:	d301      	bcc.n	8000482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800047e:	2301      	movs	r3, #1
 8000480:	e00f      	b.n	80004a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <SysTick_Config+0x40>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3b01      	subs	r3, #1
 8000488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800048a:	210f      	movs	r1, #15
 800048c:	f04f 30ff 	mov.w	r0, #4294967295
 8000490:	f7ff ff8e 	bl	80003b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <SysTick_Config+0x40>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800049a:	4b04      	ldr	r3, [pc, #16]	; (80004ac <SysTick_Config+0x40>)
 800049c:	2207      	movs	r2, #7
 800049e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	e000e010 	.word	0xe000e010

080004b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f7ff ff47 	bl	800034c <__NVIC_SetPriorityGrouping>
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b086      	sub	sp, #24
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	4603      	mov	r3, r0
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
 80004d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004d4:	f7ff ff5e 	bl	8000394 <__NVIC_GetPriorityGrouping>
 80004d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	68b9      	ldr	r1, [r7, #8]
 80004de:	6978      	ldr	r0, [r7, #20]
 80004e0:	f7ff ff90 	bl	8000404 <NVIC_EncodePriority>
 80004e4:	4602      	mov	r2, r0
 80004e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ea:	4611      	mov	r1, r2
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ff5f 	bl	80003b0 <__NVIC_SetPriority>
}
 80004f2:	bf00      	nop
 80004f4:	3718      	adds	r7, #24
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f7ff ffb2 	bl	800046c <SysTick_Config>
 8000508:	4603      	mov	r3, r0
}
 800050a:	4618      	mov	r0, r3
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d141      	bne.n	80005a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000522:	4b4b      	ldr	r3, [pc, #300]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800052a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800052e:	d131      	bne.n	8000594 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000530:	4b47      	ldr	r3, [pc, #284]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000536:	4a46      	ldr	r2, [pc, #280]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800053c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	4b43      	ldr	r3, [pc, #268]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000548:	4a41      	ldr	r2, [pc, #260]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800054a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800054e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000550:	4b40      	ldr	r3, [pc, #256]	; (8000654 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2232      	movs	r2, #50	; 0x32
 8000556:	fb02 f303 	mul.w	r3, r2, r3
 800055a:	4a3f      	ldr	r2, [pc, #252]	; (8000658 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800055c:	fba2 2303 	umull	r2, r3, r2, r3
 8000560:	0c9b      	lsrs	r3, r3, #18
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000566:	e002      	b.n	800056e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3b01      	subs	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800056e:	4b38      	ldr	r3, [pc, #224]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800057a:	d102      	bne.n	8000582 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f2      	bne.n	8000568 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000582:	4b33      	ldr	r3, [pc, #204]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800058a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800058e:	d158      	bne.n	8000642 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000590:	2303      	movs	r3, #3
 8000592:	e057      	b.n	8000644 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000594:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800059a:	4a2d      	ldr	r2, [pc, #180]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800059c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80005a4:	e04d      	b.n	8000642 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005ac:	d141      	bne.n	8000632 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005ba:	d131      	bne.n	8000620 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005c2:	4a23      	ldr	r2, [pc, #140]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005d4:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2232      	movs	r2, #50	; 0x32
 80005e2:	fb02 f303 	mul.w	r3, r2, r3
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80005e8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ec:	0c9b      	lsrs	r3, r3, #18
 80005ee:	3301      	adds	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80005f2:	e002      	b.n	80005fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000606:	d102      	bne.n	800060e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1f2      	bne.n	80005f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800061a:	d112      	bne.n	8000642 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800061c:	2303      	movs	r3, #3
 800061e:	e011      	b.n	8000644 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000630:	e007      	b.n	8000642 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800063a:	4a05      	ldr	r2, [pc, #20]	; (8000650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800063c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000640:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40007000 	.word	0x40007000
 8000654:	20000008 	.word	0x20000008
 8000658:	431bde83 	.word	0x431bde83

0800065c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e306      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d075      	beq.n	8000766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800067a:	4b97      	ldr	r3, [pc, #604]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f003 030c 	and.w	r3, r3, #12
 8000682:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000684:	4b94      	ldr	r3, [pc, #592]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	f003 0303 	and.w	r3, r3, #3
 800068c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	2b0c      	cmp	r3, #12
 8000692:	d102      	bne.n	800069a <HAL_RCC_OscConfig+0x3e>
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d002      	beq.n	80006a0 <HAL_RCC_OscConfig+0x44>
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	2b08      	cmp	r3, #8
 800069e:	d10b      	bne.n	80006b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006a0:	4b8d      	ldr	r3, [pc, #564]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d05b      	beq.n	8000764 <HAL_RCC_OscConfig+0x108>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d157      	bne.n	8000764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e2e1      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006c0:	d106      	bne.n	80006d0 <HAL_RCC_OscConfig+0x74>
 80006c2:	4b85      	ldr	r3, [pc, #532]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a84      	ldr	r2, [pc, #528]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80006c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	e01d      	b.n	800070c <HAL_RCC_OscConfig+0xb0>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006d8:	d10c      	bne.n	80006f4 <HAL_RCC_OscConfig+0x98>
 80006da:	4b7f      	ldr	r3, [pc, #508]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a7e      	ldr	r2, [pc, #504]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80006e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b7c      	ldr	r3, [pc, #496]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a7b      	ldr	r2, [pc, #492]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80006ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e00b      	b.n	800070c <HAL_RCC_OscConfig+0xb0>
 80006f4:	4b78      	ldr	r3, [pc, #480]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a77      	ldr	r2, [pc, #476]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80006fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b75      	ldr	r3, [pc, #468]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a74      	ldr	r2, [pc, #464]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800070a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d013      	beq.n	800073c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000714:	f7ff fdec 	bl	80002f0 <HAL_GetTick>
 8000718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800071a:	e008      	b.n	800072e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800071c:	f7ff fde8 	bl	80002f0 <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	2b64      	cmp	r3, #100	; 0x64
 8000728:	d901      	bls.n	800072e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800072a:	2303      	movs	r3, #3
 800072c:	e2a6      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800072e:	4b6a      	ldr	r3, [pc, #424]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f0      	beq.n	800071c <HAL_RCC_OscConfig+0xc0>
 800073a:	e014      	b.n	8000766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800073c:	f7ff fdd8 	bl	80002f0 <HAL_GetTick>
 8000740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000742:	e008      	b.n	8000756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000744:	f7ff fdd4 	bl	80002f0 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	2b64      	cmp	r3, #100	; 0x64
 8000750:	d901      	bls.n	8000756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000752:	2303      	movs	r3, #3
 8000754:	e292      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000756:	4b60      	ldr	r3, [pc, #384]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f0      	bne.n	8000744 <HAL_RCC_OscConfig+0xe8>
 8000762:	e000      	b.n	8000766 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	2b00      	cmp	r3, #0
 8000770:	d075      	beq.n	800085e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000772:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	f003 030c 	and.w	r3, r3, #12
 800077a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800077c:	4b56      	ldr	r3, [pc, #344]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	f003 0303 	and.w	r3, r3, #3
 8000784:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	2b0c      	cmp	r3, #12
 800078a:	d102      	bne.n	8000792 <HAL_RCC_OscConfig+0x136>
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d002      	beq.n	8000798 <HAL_RCC_OscConfig+0x13c>
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d11f      	bne.n	80007d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000798:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <HAL_RCC_OscConfig+0x154>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e265      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007b0:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	061b      	lsls	r3, r3, #24
 80007be:	4946      	ldr	r1, [pc, #280]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80007c0:	4313      	orrs	r3, r2
 80007c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80007c4:	4b45      	ldr	r3, [pc, #276]	; (80008dc <HAL_RCC_OscConfig+0x280>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd45 	bl	8000258 <HAL_InitTick>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d043      	beq.n	800085c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e251      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d023      	beq.n	8000828 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80007e0:	4b3d      	ldr	r3, [pc, #244]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a3c      	ldr	r2, [pc, #240]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80007e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007ec:	f7ff fd80 	bl	80002f0 <HAL_GetTick>
 80007f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80007f2:	e008      	b.n	8000806 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007f4:	f7ff fd7c 	bl	80002f0 <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d901      	bls.n	8000806 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000802:	2303      	movs	r3, #3
 8000804:	e23a      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000806:	4b34      	ldr	r3, [pc, #208]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f0      	beq.n	80007f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000812:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	061b      	lsls	r3, r3, #24
 8000820:	492d      	ldr	r1, [pc, #180]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000822:	4313      	orrs	r3, r2
 8000824:	604b      	str	r3, [r1, #4]
 8000826:	e01a      	b.n	800085e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000828:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a2a      	ldr	r2, [pc, #168]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 800082e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000834:	f7ff fd5c 	bl	80002f0 <HAL_GetTick>
 8000838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800083a:	e008      	b.n	800084e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800083c:	f7ff fd58 	bl	80002f0 <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	2b02      	cmp	r3, #2
 8000848:	d901      	bls.n	800084e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800084a:	2303      	movs	r3, #3
 800084c:	e216      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1f0      	bne.n	800083c <HAL_RCC_OscConfig+0x1e0>
 800085a:	e000      	b.n	800085e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800085c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	2b00      	cmp	r3, #0
 8000868:	d041      	beq.n	80008ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d01c      	beq.n	80008ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 8000874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000878:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000882:	f7ff fd35 	bl	80002f0 <HAL_GetTick>
 8000886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000888:	e008      	b.n	800089c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800088a:	f7ff fd31 	bl	80002f0 <HAL_GetTick>
 800088e:	4602      	mov	r2, r0
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	2b02      	cmp	r3, #2
 8000896:	d901      	bls.n	800089c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000898:	2303      	movs	r3, #3
 800089a:	e1ef      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 800089e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0ef      	beq.n	800088a <HAL_RCC_OscConfig+0x22e>
 80008aa:	e020      	b.n	80008ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80008ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <HAL_RCC_OscConfig+0x27c>)
 80008b4:	f023 0301 	bic.w	r3, r3, #1
 80008b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008bc:	f7ff fd18 	bl	80002f0 <HAL_GetTick>
 80008c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80008c2:	e00d      	b.n	80008e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008c4:	f7ff fd14 	bl	80002f0 <HAL_GetTick>
 80008c8:	4602      	mov	r2, r0
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d906      	bls.n	80008e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80008d2:	2303      	movs	r3, #3
 80008d4:	e1d2      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	20000000 	.word	0x20000000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80008e0:	4b8c      	ldr	r3, [pc, #560]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 80008e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1ea      	bne.n	80008c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f000 80a6 	beq.w	8000a48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000900:	4b84      	ldr	r3, [pc, #528]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	2b00      	cmp	r3, #0
 800090a:	d101      	bne.n	8000910 <HAL_RCC_OscConfig+0x2b4>
 800090c:	2301      	movs	r3, #1
 800090e:	e000      	b.n	8000912 <HAL_RCC_OscConfig+0x2b6>
 8000910:	2300      	movs	r3, #0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d00d      	beq.n	8000932 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b7f      	ldr	r3, [pc, #508]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	4a7e      	ldr	r2, [pc, #504]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6593      	str	r3, [r2, #88]	; 0x58
 8000922:	4b7c      	ldr	r3, [pc, #496]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800092e:	2301      	movs	r3, #1
 8000930:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000932:	4b79      	ldr	r3, [pc, #484]	; (8000b18 <HAL_RCC_OscConfig+0x4bc>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800093a:	2b00      	cmp	r3, #0
 800093c:	d118      	bne.n	8000970 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800093e:	4b76      	ldr	r3, [pc, #472]	; (8000b18 <HAL_RCC_OscConfig+0x4bc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a75      	ldr	r2, [pc, #468]	; (8000b18 <HAL_RCC_OscConfig+0x4bc>)
 8000944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800094a:	f7ff fcd1 	bl	80002f0 <HAL_GetTick>
 800094e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000950:	e008      	b.n	8000964 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000952:	f7ff fccd 	bl	80002f0 <HAL_GetTick>
 8000956:	4602      	mov	r2, r0
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	2b02      	cmp	r3, #2
 800095e:	d901      	bls.n	8000964 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000960:	2303      	movs	r3, #3
 8000962:	e18b      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000964:	4b6c      	ldr	r3, [pc, #432]	; (8000b18 <HAL_RCC_OscConfig+0x4bc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0f0      	beq.n	8000952 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d108      	bne.n	800098a <HAL_RCC_OscConfig+0x32e>
 8000978:	4b66      	ldr	r3, [pc, #408]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 800097a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800097e:	4a65      	ldr	r2, [pc, #404]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000988:	e024      	b.n	80009d4 <HAL_RCC_OscConfig+0x378>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	2b05      	cmp	r3, #5
 8000990:	d110      	bne.n	80009b4 <HAL_RCC_OscConfig+0x358>
 8000992:	4b60      	ldr	r3, [pc, #384]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000998:	4a5e      	ldr	r2, [pc, #376]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80009a2:	4b5c      	ldr	r3, [pc, #368]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 80009a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009a8:	4a5a      	ldr	r2, [pc, #360]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80009b2:	e00f      	b.n	80009d4 <HAL_RCC_OscConfig+0x378>
 80009b4:	4b57      	ldr	r3, [pc, #348]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 80009b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009ba:	4a56      	ldr	r2, [pc, #344]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 80009bc:	f023 0301 	bic.w	r3, r3, #1
 80009c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80009c4:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 80009c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009ca:	4a52      	ldr	r2, [pc, #328]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 80009cc:	f023 0304 	bic.w	r3, r3, #4
 80009d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d016      	beq.n	8000a0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009dc:	f7ff fc88 	bl	80002f0 <HAL_GetTick>
 80009e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80009e2:	e00a      	b.n	80009fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009e4:	f7ff fc84 	bl	80002f0 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d901      	bls.n	80009fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80009f6:	2303      	movs	r3, #3
 80009f8:	e140      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80009fa:	4b46      	ldr	r3, [pc, #280]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 80009fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0ed      	beq.n	80009e4 <HAL_RCC_OscConfig+0x388>
 8000a08:	e015      	b.n	8000a36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a0a:	f7ff fc71 	bl	80002f0 <HAL_GetTick>
 8000a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000a10:	e00a      	b.n	8000a28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a12:	f7ff fc6d 	bl	80002f0 <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d901      	bls.n	8000a28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	e129      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000a28:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1ed      	bne.n	8000a12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d105      	bne.n	8000a48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a3c:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a40:	4a34      	ldr	r2, [pc, #208]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d03c      	beq.n	8000ace <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d01c      	beq.n	8000a96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a62:	4a2c      	ldr	r2, [pc, #176]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a6c:	f7ff fc40 	bl	80002f0 <HAL_GetTick>
 8000a70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000a72:	e008      	b.n	8000a86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000a74:	f7ff fc3c 	bl	80002f0 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d901      	bls.n	8000a86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8000a82:	2303      	movs	r3, #3
 8000a84:	e0fa      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0ef      	beq.n	8000a74 <HAL_RCC_OscConfig+0x418>
 8000a94:	e01b      	b.n	8000ace <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000aa6:	f7ff fc23 	bl	80002f0 <HAL_GetTick>
 8000aaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000aac:	e008      	b.n	8000ac0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000aae:	f7ff fc1f 	bl	80002f0 <HAL_GetTick>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e0dd      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1ef      	bne.n	8000aae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 80d1 	beq.w	8000c7a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	f003 030c 	and.w	r3, r3, #12
 8000ae0:	2b0c      	cmp	r3, #12
 8000ae2:	f000 808b 	beq.w	8000bfc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d15e      	bne.n	8000bac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_RCC_OscConfig+0x4b8>)
 8000af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000afa:	f7ff fbf9 	bl	80002f0 <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b00:	e00c      	b.n	8000b1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b02:	f7ff fbf5 	bl	80002f0 <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d905      	bls.n	8000b1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e0b3      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b1c:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1ec      	bne.n	8000b02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b28:	4b56      	ldr	r3, [pc, #344]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	4b56      	ldr	r3, [pc, #344]	; (8000c88 <HAL_RCC_OscConfig+0x62c>)
 8000b2e:	4013      	ands	r3, r2
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6a11      	ldr	r1, [r2, #32]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000b38:	3a01      	subs	r2, #1
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	4311      	orrs	r1, r2
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000b42:	0212      	lsls	r2, r2, #8
 8000b44:	4311      	orrs	r1, r2
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b4a:	0852      	lsrs	r2, r2, #1
 8000b4c:	3a01      	subs	r2, #1
 8000b4e:	0552      	lsls	r2, r2, #21
 8000b50:	4311      	orrs	r1, r2
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b56:	0852      	lsrs	r2, r2, #1
 8000b58:	3a01      	subs	r2, #1
 8000b5a:	0652      	lsls	r2, r2, #25
 8000b5c:	4311      	orrs	r1, r2
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b62:	06d2      	lsls	r2, r2, #27
 8000b64:	430a      	orrs	r2, r1
 8000b66:	4947      	ldr	r1, [pc, #284]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b6c:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a44      	ldr	r2, [pc, #272]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000b78:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	4a41      	ldr	r2, [pc, #260]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b84:	f7ff fbb4 	bl	80002f0 <HAL_GetTick>
 8000b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000b8a:	e008      	b.n	8000b9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b8c:	f7ff fbb0 	bl	80002f0 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d901      	bls.n	8000b9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e06e      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f0      	beq.n	8000b8c <HAL_RCC_OscConfig+0x530>
 8000baa:	e066      	b.n	8000c7a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bac:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a34      	ldr	r2, [pc, #208]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bb6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000bbe:	f023 0303 	bic.w	r3, r3, #3
 8000bc2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000bca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fb8c 	bl	80002f0 <HAL_GetTick>
 8000bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000bda:	e008      	b.n	8000bee <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bdc:	f7ff fb88 	bl	80002f0 <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d901      	bls.n	8000bee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8000bea:	2303      	movs	r3, #3
 8000bec:	e046      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f0      	bne.n	8000bdc <HAL_RCC_OscConfig+0x580>
 8000bfa:	e03e      	b.n	8000c7a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d101      	bne.n	8000c08 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e039      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <HAL_RCC_OscConfig+0x628>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0203 	and.w	r2, r3, #3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d12c      	bne.n	8000c76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c26:	3b01      	subs	r3, #1
 8000c28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d123      	bne.n	8000c76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d11b      	bne.n	8000c76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d113      	bne.n	8000c76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	085b      	lsrs	r3, r3, #1
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d109      	bne.n	8000c76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6c:	085b      	lsrs	r3, r3, #1
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d001      	beq.n	8000c7a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e000      	b.n	8000c7c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	019f800c 	.word	0x019f800c

08000c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e11e      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ca4:	4b91      	ldr	r3, [pc, #580]	; (8000eec <HAL_RCC_ClockConfig+0x260>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 030f 	and.w	r3, r3, #15
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d910      	bls.n	8000cd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb2:	4b8e      	ldr	r3, [pc, #568]	; (8000eec <HAL_RCC_ClockConfig+0x260>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f023 020f 	bic.w	r2, r3, #15
 8000cba:	498c      	ldr	r1, [pc, #560]	; (8000eec <HAL_RCC_ClockConfig+0x260>)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc2:	4b8a      	ldr	r3, [pc, #552]	; (8000eec <HAL_RCC_ClockConfig+0x260>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d001      	beq.n	8000cd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e106      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d073      	beq.n	8000dc8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d129      	bne.n	8000d3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ce8:	4b81      	ldr	r3, [pc, #516]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e0f4      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8000cf8:	f000 f966 	bl	8000fc8 <RCC_GetSysClockFreqFromPLLSource>
 8000cfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4a7c      	ldr	r2, [pc, #496]	; (8000ef4 <HAL_RCC_ClockConfig+0x268>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d93f      	bls.n	8000d86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8000d06:	4b7a      	ldr	r3, [pc, #488]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d009      	beq.n	8000d26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d033      	beq.n	8000d86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d12f      	bne.n	8000d86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000d26:	4b72      	ldr	r3, [pc, #456]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d2e:	4a70      	ldr	r2, [pc, #448]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	e024      	b.n	8000d86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d107      	bne.n	8000d54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d44:	4b6a      	ldr	r3, [pc, #424]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d109      	bne.n	8000d64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e0c6      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d54:	4b66      	ldr	r3, [pc, #408]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e0be      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8000d64:	f000 f8ce 	bl	8000f04 <HAL_RCC_GetSysClockFreq>
 8000d68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4a61      	ldr	r2, [pc, #388]	; (8000ef4 <HAL_RCC_ClockConfig+0x268>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d909      	bls.n	8000d86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000d72:	4b5f      	ldr	r3, [pc, #380]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d7a:	4a5d      	ldr	r2, [pc, #372]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000d86:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f023 0203 	bic.w	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	4957      	ldr	r1, [pc, #348]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000d98:	f7ff faaa 	bl	80002f0 <HAL_GetTick>
 8000d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d9e:	e00a      	b.n	8000db6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da0:	f7ff faa6 	bl	80002f0 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e095      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000db6:	4b4e      	ldr	r3, [pc, #312]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 020c 	and.w	r2, r3, #12
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d1eb      	bne.n	8000da0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d023      	beq.n	8000e1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000de0:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	4a42      	ldr	r2, [pc, #264]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000de6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000dea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d007      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8000df8:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000e00:	4a3b      	ldr	r2, [pc, #236]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000e02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000e06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e08:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	4936      	ldr	r1, [pc, #216]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	608b      	str	r3, [r1, #8]
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b80      	cmp	r3, #128	; 0x80
 8000e20:	d105      	bne.n	8000e2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4a32      	ldr	r2, [pc, #200]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_RCC_ClockConfig+0x260>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d21d      	bcs.n	8000e78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <HAL_RCC_ClockConfig+0x260>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f023 020f 	bic.w	r2, r3, #15
 8000e44:	4929      	ldr	r1, [pc, #164]	; (8000eec <HAL_RCC_ClockConfig+0x260>)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8000e4c:	f7ff fa50 	bl	80002f0 <HAL_GetTick>
 8000e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e52:	e00a      	b.n	8000e6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e54:	f7ff fa4c 	bl	80002f0 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e03b      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_RCC_ClockConfig+0x260>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d1ed      	bne.n	8000e54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d008      	beq.n	8000e96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	4917      	ldr	r1, [pc, #92]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d009      	beq.n	8000eb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	490f      	ldr	r1, [pc, #60]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000eb6:	f000 f825 	bl	8000f04 <HAL_RCC_GetSysClockFreq>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <HAL_RCC_ClockConfig+0x264>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <HAL_RCC_ClockConfig+0x26c>)
 8000ec8:	5ccb      	ldrb	r3, [r1, r3]
 8000eca:	f003 031f 	and.w	r3, r3, #31
 8000ece:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_RCC_ClockConfig+0x270>)
 8000ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_RCC_ClockConfig+0x274>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff f9bc 	bl	8000258 <HAL_InitTick>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40022000 	.word	0x40022000
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	04c4b400 	.word	0x04c4b400
 8000ef8:	08001508 	.word	0x08001508
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000000 	.word	0x20000000

08000f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d102      	bne.n	8000f1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000f16:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	e047      	b.n	8000fac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000f1c:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d102      	bne.n	8000f2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	e03e      	b.n	8000fac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b0c      	cmp	r3, #12
 8000f38:	d136      	bne.n	8000fa8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d10c      	bne.n	8000f72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f58:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f60:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f62:	68d2      	ldr	r2, [r2, #12]
 8000f64:	0a12      	lsrs	r2, r2, #8
 8000f66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
      break;
 8000f70:	e00c      	b.n	8000f8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f7c:	68d2      	ldr	r2, [r2, #12]
 8000f7e:	0a12      	lsrs	r2, r2, #8
 8000f80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
      break;
 8000f8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0e5b      	lsrs	r3, r3, #25
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	3301      	adds	r3, #1
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	e001      	b.n	8000fac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8000fac:	693b      	ldr	r3, [r7, #16]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	00f42400 	.word	0x00f42400
 8000fc4:	007a1200 	.word	0x007a1200

08000fc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d10c      	bne.n	8001006 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000ff6:	68d2      	ldr	r2, [r2, #12]
 8000ff8:	0a12      	lsrs	r2, r2, #8
 8000ffa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
    break;
 8001004:	e00c      	b.n	8001020 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001010:	68d2      	ldr	r2, [r2, #12]
 8001012:	0a12      	lsrs	r2, r2, #8
 8001014:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001018:	fb02 f303 	mul.w	r3, r2, r3
 800101c:	617b      	str	r3, [r7, #20]
    break;
 800101e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0e5b      	lsrs	r3, r3, #25
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	3301      	adds	r3, #1
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800103a:	687b      	ldr	r3, [r7, #4]
}
 800103c:	4618      	mov	r0, r3
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000
 800104c:	007a1200 	.word	0x007a1200
 8001050:	00f42400 	.word	0x00f42400

08001054 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	619a      	str	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <BSP_SetBlinkyLED>:




void BSP_SetBlinkyLED(ON_OFF_STATUS status)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
    if(status == ON)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d105      	bne.n	80010a8 <BSP_SetBlinkyLED+0x1c>
    {
        LL_GPIO_SetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
 800109c:	2120      	movs	r1, #32
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f7ff ffd7 	bl	8001054 <LL_GPIO_SetOutputPin>
    }
    else
    {
        LL_GPIO_ResetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
    }
}
 80010a6:	e004      	b.n	80010b2 <BSP_SetBlinkyLED+0x26>
        LL_GPIO_ResetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
 80010a8:	2120      	movs	r1, #32
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f7ff ffdf 	bl	8001070 <LL_GPIO_ResetOutputPin>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <BSP_Init>:
 * @brief  BSP_Init - BSP & System Initialise
 * @retval None - errors here are intolerable & will call Error_Handler()
 ******************************************************************************
*/
void BSP_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
    /* INIT HAL */
    if(HAL_Init() != HAL_OK)
 80010be:	f7ff f8ab 	bl	8000218 <HAL_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <BSP_Init+0x12>
    {
        BSP_Error_Handler();
 80010c8:	f000 f851 	bl	800116e <BSP_Error_Handler>
    }

    /* CONFIGURE SYSTEM CLOCK */
    SystemClock_Config();
 80010cc:	f000 f804 	bl	80010d8 <SystemClock_Config>

    /* INITIALISE PERIPHERALS */
    GPIO_Init();
 80010d0:	f000 f982 	bl	80013d8 <GPIO_Init>

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <SystemClock_Config>:
 * @brief  SystemClock_Config - System clock configuration
 * @retval None - errors here are intolerable & will call Error_Handler()
 ******************************************************************************
*/
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2238      	movs	r2, #56	; 0x38
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f9fa 	bl	80014e0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff fa0a 	bl	8000514 <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001112:	2302      	movs	r3, #2
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001116:	2304      	movs	r3, #4
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 85;
 800111a:	2355      	movs	r3, #85	; 0x55
 800111c:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111e:	2302      	movs	r3, #2
 8001120:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa94 	bl	800065c <HAL_RCC_OscConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x66>
    {
        BSP_Error_Handler();
 800113a:	f000 f818 	bl	800116e <BSP_Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113e:	230f      	movs	r3, #15
 8001140:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001142:	2303      	movs	r3, #3
 8001144:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2104      	movs	r1, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fd98 	bl	8000c8c <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x8e>
    {
        BSP_Error_Handler();
 8001162:	f000 f804 	bl	800116e <BSP_Error_Handler>
    }
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	; 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <BSP_Error_Handler>:
 * @brief  BSP_Error_Handler - handles errors in BSP activities
 * @retval None
 ******************************************************************************
*/
void BSP_Error_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
    while (1)
 8001172:	e7fe      	b.n	8001172 <BSP_Error_Handler+0x4>

08001174 <main>:
 ******************************************************************************
 * @brief  main - The application entry point
 ******************************************************************************
*/
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    BSP_Init();
 8001178:	f7ff ff9f 	bl	80010ba <BSP_Init>
    while (1)
    {
        HAL_Delay(500);
 800117c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001180:	f7ff f8c2 	bl	8000308 <HAL_Delay>
        BSP_SetBlinkyLED(ON);
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff ff81 	bl	800108c <BSP_SetBlinkyLED>
        HAL_Delay(500);
 800118a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800118e:	f7ff f8bb 	bl	8000308 <HAL_Delay>
        BSP_SetBlinkyLED(OFF);
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff ff7a 	bl	800108c <BSP_SetBlinkyLED>
        HAL_Delay(500);
 8001198:	e7f0      	b.n	800117c <main+0x8>
	...

0800119c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800119e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a2:	490e      	ldr	r1, [pc, #56]	; (80011dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <LoopForever+0xe>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b8:	4c0b      	ldr	r4, [pc, #44]	; (80011e8 <LoopForever+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c6:	f000 f955 	bl	8001474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ca:	f000 f965 	bl	8001498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ce:	f7ff ffd1 	bl	8001174 <main>

080011d2 <LoopForever>:

LoopForever:
    b LoopForever
 80011d2:	e7fe      	b.n	80011d2 <LoopForever>
  ldr   r0, =_estack
 80011d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011e0:	08001520 	.word	0x08001520
  ldr r2, =_sbss
 80011e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011e8:	2000002c 	.word	0x2000002c

080011ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC1_2_IRQHandler>

080011ee <LL_GPIO_SetPinMode>:
{
 80011ee:	b480      	push	{r7}
 80011f0:	b08b      	sub	sp, #44	; 0x2c
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8001214:	2320      	movs	r3, #32
 8001216:	e003      	b.n	8001220 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2103      	movs	r1, #3
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	401a      	ands	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	61fb      	str	r3, [r7, #28]
  return result;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001242:	2320      	movs	r3, #32
 8001244:	e003      	b.n	800124e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	fab3 f383 	clz	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	431a      	orrs	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	372c      	adds	r7, #44	; 0x2c
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_GPIO_SetPinOutputType>:
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	43db      	mvns	r3, r3
 800127c:	401a      	ands	r2, r3
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	fb01 f303 	mul.w	r3, r1, r3
 8001286:	431a      	orrs	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	605a      	str	r2, [r3, #4]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_GPIO_SetPinSpeed>:
{
 8001298:	b480      	push	{r7}
 800129a:	b08b      	sub	sp, #44	; 0x2c
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa93 f3a3 	rbit	r3, r3
 80012b2:	613b      	str	r3, [r7, #16]
  return result;
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80012be:	2320      	movs	r3, #32
 80012c0:	e003      	b.n	80012ca <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	fab3 f383 	clz	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2103      	movs	r1, #3
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	401a      	ands	r2, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	61fb      	str	r3, [r7, #28]
  return result;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80012ec:	2320      	movs	r3, #32
 80012ee:	e003      	b.n	80012f8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	431a      	orrs	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	609a      	str	r2, [r3, #8]
}
 8001306:	bf00      	nop
 8001308:	372c      	adds	r7, #44	; 0x2c
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_GPIO_SetPinPull>:
{
 8001312:	b480      	push	{r7}
 8001314:	b08b      	sub	sp, #44	; 0x2c
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	613b      	str	r3, [r7, #16]
  return result;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001338:	2320      	movs	r3, #32
 800133a:	e003      	b.n	8001344 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2103      	movs	r1, #3
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	401a      	ands	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	61fb      	str	r3, [r7, #28]
  return result;
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001366:	2320      	movs	r3, #32
 8001368:	e003      	b.n	8001372 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	fab3 f383 	clz	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	431a      	orrs	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	60da      	str	r2, [r3, #12]
}
 8001380:	bf00      	nop
 8001382:	372c      	adds	r7, #44	; 0x2c
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_GPIO_ResetOutputPin>:
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4013      	ands	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000

080013d8 <GPIO_Init>:




void GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    /* GPIO PORTS CLOCK ENABLE */
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff ffe3 	bl	80013a8 <LL_AHB2_GRP1_EnableClock>

    /* BLINKY LED */
    LL_GPIO_ResetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
 80013e2:	2120      	movs	r1, #32
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f7ff ffd0 	bl	800138c <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetPinPull(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_PULL_NO);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2120      	movs	r1, #32
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f7ff ff8d 	bl	8001312 <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinOutputType(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2120      	movs	r1, #32
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f7ff ff32 	bl	8001268 <LL_GPIO_SetPinOutputType>
    LL_GPIO_SetPinSpeed(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_SPEED_FREQ_LOW);
 8001404:	2200      	movs	r2, #0
 8001406:	2120      	movs	r1, #32
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f7ff ff44 	bl	8001298 <LL_GPIO_SetPinSpeed>
    LL_GPIO_SetPinMode(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_MODE_OUTPUT);
 8001410:	2201      	movs	r2, #1
 8001412:	2120      	movs	r1, #32
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f7ff fee9 	bl	80011ee <LL_GPIO_SetPinMode>

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f7fe ff2e 	bl	80002cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <SystemInit+0x20>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <SystemInit+0x20>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__libc_init_array>:
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	4d0d      	ldr	r5, [pc, #52]	; (80014d0 <__libc_init_array+0x38>)
 800149c:	4c0d      	ldr	r4, [pc, #52]	; (80014d4 <__libc_init_array+0x3c>)
 800149e:	1b64      	subs	r4, r4, r5
 80014a0:	10a4      	asrs	r4, r4, #2
 80014a2:	2600      	movs	r6, #0
 80014a4:	42a6      	cmp	r6, r4
 80014a6:	d109      	bne.n	80014bc <__libc_init_array+0x24>
 80014a8:	4d0b      	ldr	r5, [pc, #44]	; (80014d8 <__libc_init_array+0x40>)
 80014aa:	4c0c      	ldr	r4, [pc, #48]	; (80014dc <__libc_init_array+0x44>)
 80014ac:	f000 f820 	bl	80014f0 <_init>
 80014b0:	1b64      	subs	r4, r4, r5
 80014b2:	10a4      	asrs	r4, r4, #2
 80014b4:	2600      	movs	r6, #0
 80014b6:	42a6      	cmp	r6, r4
 80014b8:	d105      	bne.n	80014c6 <__libc_init_array+0x2e>
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80014c0:	4798      	blx	r3
 80014c2:	3601      	adds	r6, #1
 80014c4:	e7ee      	b.n	80014a4 <__libc_init_array+0xc>
 80014c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80014ca:	4798      	blx	r3
 80014cc:	3601      	adds	r6, #1
 80014ce:	e7f2      	b.n	80014b6 <__libc_init_array+0x1e>
 80014d0:	08001518 	.word	0x08001518
 80014d4:	08001518 	.word	0x08001518
 80014d8:	08001518 	.word	0x08001518
 80014dc:	0800151c 	.word	0x0800151c

080014e0 <memset>:
 80014e0:	4402      	add	r2, r0
 80014e2:	4603      	mov	r3, r0
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d100      	bne.n	80014ea <memset+0xa>
 80014e8:	4770      	bx	lr
 80014ea:	f803 1b01 	strb.w	r1, [r3], #1
 80014ee:	e7f9      	b.n	80014e4 <memset+0x4>

080014f0 <_init>:
 80014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f2:	bf00      	nop
 80014f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f6:	bc08      	pop	{r3}
 80014f8:	469e      	mov	lr, r3
 80014fa:	4770      	bx	lr

080014fc <_fini>:
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fe:	bf00      	nop
 8001500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001502:	bc08      	pop	{r3}
 8001504:	469e      	mov	lr, r3
 8001506:	4770      	bx	lr
