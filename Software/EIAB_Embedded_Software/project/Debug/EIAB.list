
EIAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c04  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eec  08002eec  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002eec  08002eec  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eec  08002eec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000004  08002ef8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08002ef8  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0f8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd5  00000000  00000000  0002b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002de08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bf2  00000000  00000000  0002f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009789  00000000  00000000  00032c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d52  00000000  00000000  0003c3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0115  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002434  00000000  00000000  000c0168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002dc4 	.word	0x08002dc4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	08002dc4 	.word	0x08002dc4

08000218 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000218:	b480      	push	{r7}
 800021a:	b08b      	sub	sp, #44	; 0x2c
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	fa93 f3a3 	rbit	r3, r3
 8000232:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d101      	bne.n	8000242 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800023e:	2320      	movs	r3, #32
 8000240:	e003      	b.n	800024a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	fab3 f383 	clz	r3, r3
 8000248:	b2db      	uxtb	r3, r3
 800024a:	005b      	lsls	r3, r3, #1
 800024c:	2103      	movs	r1, #3
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
 8000252:	43db      	mvns	r3, r3
 8000254:	401a      	ands	r2, r3
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800025a:	6a3b      	ldr	r3, [r7, #32]
 800025c:	fa93 f3a3 	rbit	r3, r3
 8000260:	61fb      	str	r3, [r7, #28]
  return result;
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000268:	2b00      	cmp	r3, #0
 800026a:	d101      	bne.n	8000270 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800026c:	2320      	movs	r3, #32
 800026e:	e003      	b.n	8000278 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000272:	fab3 f383 	clz	r3, r3
 8000276:	b2db      	uxtb	r3, r3
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	6879      	ldr	r1, [r7, #4]
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	431a      	orrs	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	601a      	str	r2, [r3, #0]
}
 8000286:	bf00      	nop
 8000288:	372c      	adds	r7, #44	; 0x2c
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000292:	b480      	push	{r7}
 8000294:	b085      	sub	sp, #20
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	60b9      	str	r1, [r7, #8]
 800029c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685a      	ldr	r2, [r3, #4]
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	43db      	mvns	r3, r3
 80002a6:	401a      	ands	r2, r3
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	6879      	ldr	r1, [r7, #4]
 80002ac:	fb01 f303 	mul.w	r3, r1, r3
 80002b0:	431a      	orrs	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	605a      	str	r2, [r3, #4]
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80002c2:	b480      	push	{r7}
 80002c4:	b08b      	sub	sp, #44	; 0x2c
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	60f8      	str	r0, [r7, #12]
 80002ca:	60b9      	str	r1, [r7, #8]
 80002cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	689a      	ldr	r2, [r3, #8]
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	fa93 f3a3 	rbit	r3, r3
 80002dc:	613b      	str	r3, [r7, #16]
  return result;
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80002e2:	69bb      	ldr	r3, [r7, #24]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d101      	bne.n	80002ec <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80002e8:	2320      	movs	r3, #32
 80002ea:	e003      	b.n	80002f4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80002ec:	69bb      	ldr	r3, [r7, #24]
 80002ee:	fab3 f383 	clz	r3, r3
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	2103      	movs	r1, #3
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	43db      	mvns	r3, r3
 80002fe:	401a      	ands	r2, r3
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000304:	6a3b      	ldr	r3, [r7, #32]
 8000306:	fa93 f3a3 	rbit	r3, r3
 800030a:	61fb      	str	r3, [r7, #28]
  return result;
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000312:	2b00      	cmp	r3, #0
 8000314:	d101      	bne.n	800031a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000316:	2320      	movs	r3, #32
 8000318:	e003      	b.n	8000322 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800031c:	fab3 f383 	clz	r3, r3
 8000320:	b2db      	uxtb	r3, r3
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	6879      	ldr	r1, [r7, #4]
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	431a      	orrs	r2, r3
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000330:	bf00      	nop
 8000332:	372c      	adds	r7, #44	; 0x2c
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800033c:	b480      	push	{r7}
 800033e:	b08b      	sub	sp, #44	; 0x2c
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	68da      	ldr	r2, [r3, #12]
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	fa93 f3a3 	rbit	r3, r3
 8000356:	613b      	str	r3, [r7, #16]
  return result;
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800035c:	69bb      	ldr	r3, [r7, #24]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d101      	bne.n	8000366 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000362:	2320      	movs	r3, #32
 8000364:	e003      	b.n	800036e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000366:	69bb      	ldr	r3, [r7, #24]
 8000368:	fab3 f383 	clz	r3, r3
 800036c:	b2db      	uxtb	r3, r3
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	2103      	movs	r1, #3
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	43db      	mvns	r3, r3
 8000378:	401a      	ands	r2, r3
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800037e:	6a3b      	ldr	r3, [r7, #32]
 8000380:	fa93 f3a3 	rbit	r3, r3
 8000384:	61fb      	str	r3, [r7, #28]
  return result;
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800038c:	2b00      	cmp	r3, #0
 800038e:	d101      	bne.n	8000394 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000390:	2320      	movs	r3, #32
 8000392:	e003      	b.n	800039c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000396:	fab3 f383 	clz	r3, r3
 800039a:	b2db      	uxtb	r3, r3
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	6879      	ldr	r1, [r7, #4]
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	431a      	orrs	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	60da      	str	r2, [r3, #12]
}
 80003aa:	bf00      	nop
 80003ac:	372c      	adds	r7, #44	; 0x2c
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b08b      	sub	sp, #44	; 0x2c
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	60f8      	str	r0, [r7, #12]
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	6a1a      	ldr	r2, [r3, #32]
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	fa93 f3a3 	rbit	r3, r3
 80003d0:	613b      	str	r3, [r7, #16]
  return result;
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80003d6:	69bb      	ldr	r3, [r7, #24]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d101      	bne.n	80003e0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80003dc:	2320      	movs	r3, #32
 80003de:	e003      	b.n	80003e8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80003e0:	69bb      	ldr	r3, [r7, #24]
 80003e2:	fab3 f383 	clz	r3, r3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	210f      	movs	r1, #15
 80003ec:	fa01 f303 	lsl.w	r3, r1, r3
 80003f0:	43db      	mvns	r3, r3
 80003f2:	401a      	ands	r2, r3
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003f8:	6a3b      	ldr	r3, [r7, #32]
 80003fa:	fa93 f3a3 	rbit	r3, r3
 80003fe:	61fb      	str	r3, [r7, #28]
  return result;
 8000400:	69fb      	ldr	r3, [r7, #28]
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000406:	2b00      	cmp	r3, #0
 8000408:	d101      	bne.n	800040e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800040a:	2320      	movs	r3, #32
 800040c:	e003      	b.n	8000416 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000410:	fab3 f383 	clz	r3, r3
 8000414:	b2db      	uxtb	r3, r3
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	6879      	ldr	r1, [r7, #4]
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	431a      	orrs	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000424:	bf00      	nop
 8000426:	372c      	adds	r7, #44	; 0x2c
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000430:	b480      	push	{r7}
 8000432:	b08b      	sub	sp, #44	; 0x2c
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	fa93 f3a3 	rbit	r3, r3
 800044c:	613b      	str	r3, [r7, #16]
  return result;
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d101      	bne.n	800045c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000458:	2320      	movs	r3, #32
 800045a:	e003      	b.n	8000464 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800045c:	69bb      	ldr	r3, [r7, #24]
 800045e:	fab3 f383 	clz	r3, r3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	210f      	movs	r1, #15
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	401a      	ands	r2, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	0a1b      	lsrs	r3, r3, #8
 8000474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000476:	6a3b      	ldr	r3, [r7, #32]
 8000478:	fa93 f3a3 	rbit	r3, r3
 800047c:	61fb      	str	r3, [r7, #28]
  return result;
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000484:	2b00      	cmp	r3, #0
 8000486:	d101      	bne.n	800048c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000488:	2320      	movs	r3, #32
 800048a:	e003      	b.n	8000494 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800048c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800048e:	fab3 f383 	clz	r3, r3
 8000492:	b2db      	uxtb	r3, r3
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	6879      	ldr	r1, [r7, #4]
 8000498:	fa01 f303 	lsl.w	r3, r1, r3
 800049c:	431a      	orrs	r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80004a2:	bf00      	nop
 80004a4:	372c      	adds	r7, #44	; 0x2c
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b088      	sub	sp, #32
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	fa93 f3a3 	rbit	r3, r3
 80004c4:	60fb      	str	r3, [r7, #12]
  return result;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d101      	bne.n	80004d4 <LL_GPIO_Init+0x26>
    return 32U;
 80004d0:	2320      	movs	r3, #32
 80004d2:	e003      	b.n	80004dc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	fab3 f383 	clz	r3, r3
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80004de:	e048      	b.n	8000572 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	2101      	movs	r1, #1
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ec:	4013      	ands	r3, r2
 80004ee:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d03a      	beq.n	800056c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d003      	beq.n	8000506 <LL_GPIO_Init+0x58>
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	2b02      	cmp	r3, #2
 8000504:	d10e      	bne.n	8000524 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	461a      	mov	r2, r3
 800050c:	69b9      	ldr	r1, [r7, #24]
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f7ff fed7 	bl	80002c2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	6819      	ldr	r1, [r3, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	461a      	mov	r2, r3
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f7ff feb7 	bl	8000292 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	461a      	mov	r2, r3
 800052a:	69b9      	ldr	r1, [r7, #24]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ff05 	bl	800033c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d111      	bne.n	800055e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800053a:	69bb      	ldr	r3, [r7, #24]
 800053c:	2bff      	cmp	r3, #255	; 0xff
 800053e:	d807      	bhi.n	8000550 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	461a      	mov	r2, r3
 8000546:	69b9      	ldr	r1, [r7, #24]
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff ff34 	bl	80003b6 <LL_GPIO_SetAFPin_0_7>
 800054e:	e006      	b.n	800055e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	461a      	mov	r2, r3
 8000556:	69b9      	ldr	r1, [r7, #24]
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f7ff ff69 	bl	8000430 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	461a      	mov	r2, r3
 8000564:	69b9      	ldr	r1, [r7, #24]
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f7ff fe56 	bl	8000218 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	3301      	adds	r3, #1
 8000570:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	fa22 f303 	lsr.w	r3, r2, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1af      	bne.n	80004e0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	3720      	adds	r7, #32
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <LL_RCC_HSI_IsReady+0x24>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800059c:	d101      	bne.n	80005a2 <LL_RCC_HSI_IsReady+0x16>
 800059e:	2301      	movs	r3, #1
 80005a0:	e000      	b.n	80005a4 <LL_RCC_HSI_IsReady+0x18>
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <LL_RCC_LSE_IsReady+0x24>)
 80005ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d101      	bne.n	80005ca <LL_RCC_LSE_IsReady+0x16>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <LL_RCC_LSE_IsReady+0x18>
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <LL_RCC_GetSysClkSource+0x18>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 030c 	and.w	r3, r3, #12
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <LL_RCC_GetAHBPrescaler+0x18>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <LL_RCC_GetAPB1Prescaler+0x18>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <LL_RCC_GetUSARTClockSource+0x24>)
 8000656:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	401a      	ands	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	4313      	orrs	r3, r2
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40021000 	.word	0x40021000

08000674 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <LL_RCC_GetUARTClockSource+0x24>)
 800067e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	401a      	ands	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	041b      	lsls	r3, r3, #16
 800068a:	4313      	orrs	r3, r2
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	40021000 	.word	0x40021000

0800069c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <LL_RCC_PLL_GetMainSource+0x18>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	f003 0303 	and.w	r3, r3, #3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <LL_RCC_PLL_GetN+0x18>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	40021000 	.word	0x40021000

080006d4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <LL_RCC_PLL_GetR+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <LL_RCC_PLL_GetDivider+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d132      	bne.n	8000784 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ff94 	bl	800064c <LL_RCC_GetUSARTClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800072a:	d016      	beq.n	800075a <LL_RCC_GetUSARTClockFreq+0x4e>
 800072c:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8000730:	d81c      	bhi.n	800076c <LL_RCC_GetUSARTClockFreq+0x60>
 8000732:	4a52      	ldr	r2, [pc, #328]	; (800087c <LL_RCC_GetUSARTClockFreq+0x170>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d003      	beq.n	8000740 <LL_RCC_GetUSARTClockFreq+0x34>
 8000738:	4a51      	ldr	r2, [pc, #324]	; (8000880 <LL_RCC_GetUSARTClockFreq+0x174>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d004      	beq.n	8000748 <LL_RCC_GetUSARTClockFreq+0x3c>
 800073e:	e015      	b.n	800076c <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000740:	f000 f8f6 	bl	8000930 <RCC_GetSystemClockFreq>
 8000744:	60f8      	str	r0, [r7, #12]
        break;
 8000746:	e094      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000748:	f7ff ff20 	bl	800058c <LL_RCC_HSI_IsReady>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	f000 8082 	beq.w	8000858 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 8000754:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <LL_RCC_GetUSARTClockFreq+0x178>)
 8000756:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000758:	e07e      	b.n	8000858 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800075a:	f7ff ff2b 	bl	80005b4 <LL_RCC_LSE_IsReady>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d07b      	beq.n	800085c <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8000764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000768:	60fb      	str	r3, [r7, #12]
        }
        break;
 800076a:	e077      	b.n	800085c <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800076c:	f000 f8e0 	bl	8000930 <RCC_GetSystemClockFreq>
 8000770:	4603      	mov	r3, r0
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f902 	bl	800097c <RCC_GetHCLKClockFreq>
 8000778:	4603      	mov	r3, r0
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f92c 	bl	80009d8 <RCC_GetPCLK2ClockFreq>
 8000780:	60f8      	str	r0, [r7, #12]
        break;
 8000782:	e076      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b0c      	cmp	r3, #12
 8000788:	d131      	bne.n	80007ee <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ff5e 	bl	800064c <LL_RCC_GetUSARTClockSource>
 8000790:	4603      	mov	r3, r0
 8000792:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8000796:	d015      	beq.n	80007c4 <LL_RCC_GetUSARTClockFreq+0xb8>
 8000798:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800079c:	d81b      	bhi.n	80007d6 <LL_RCC_GetUSARTClockFreq+0xca>
 800079e:	4a3a      	ldr	r2, [pc, #232]	; (8000888 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d003      	beq.n	80007ac <LL_RCC_GetUSARTClockFreq+0xa0>
 80007a4:	4a39      	ldr	r2, [pc, #228]	; (800088c <LL_RCC_GetUSARTClockFreq+0x180>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d004      	beq.n	80007b4 <LL_RCC_GetUSARTClockFreq+0xa8>
 80007aa:	e014      	b.n	80007d6 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80007ac:	f000 f8c0 	bl	8000930 <RCC_GetSystemClockFreq>
 80007b0:	60f8      	str	r0, [r7, #12]
        break;
 80007b2:	e05e      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80007b4:	f7ff feea 	bl	800058c <LL_RCC_HSI_IsReady>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d050      	beq.n	8000860 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <LL_RCC_GetUSARTClockFreq+0x178>)
 80007c0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80007c2:	e04d      	b.n	8000860 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80007c4:	f7ff fef6 	bl	80005b4 <LL_RCC_LSE_IsReady>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d04a      	beq.n	8000864 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 80007ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007d2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80007d4:	e046      	b.n	8000864 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80007d6:	f000 f8ab 	bl	8000930 <RCC_GetSystemClockFreq>
 80007da:	4603      	mov	r3, r0
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f8cd 	bl	800097c <RCC_GetHCLKClockFreq>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f8e1 	bl	80009ac <RCC_GetPCLK1ClockFreq>
 80007ea:	60f8      	str	r0, [r7, #12]
        break;
 80007ec:	e041      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b30      	cmp	r3, #48	; 0x30
 80007f2:	d139      	bne.n	8000868 <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff29 	bl	800064c <LL_RCC_GetUSARTClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8000800:	d015      	beq.n	800082e <LL_RCC_GetUSARTClockFreq+0x122>
 8000802:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8000806:	d81b      	bhi.n	8000840 <LL_RCC_GetUSARTClockFreq+0x134>
 8000808:	4a21      	ldr	r2, [pc, #132]	; (8000890 <LL_RCC_GetUSARTClockFreq+0x184>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d003      	beq.n	8000816 <LL_RCC_GetUSARTClockFreq+0x10a>
 800080e:	4a21      	ldr	r2, [pc, #132]	; (8000894 <LL_RCC_GetUSARTClockFreq+0x188>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d004      	beq.n	800081e <LL_RCC_GetUSARTClockFreq+0x112>
 8000814:	e014      	b.n	8000840 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8000816:	f000 f88b 	bl	8000930 <RCC_GetSystemClockFreq>
 800081a:	60f8      	str	r0, [r7, #12]
          break;
 800081c:	e029      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800081e:	f7ff feb5 	bl	800058c <LL_RCC_HSI_IsReady>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d021      	beq.n	800086c <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <LL_RCC_GetUSARTClockFreq+0x178>)
 800082a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800082c:	e01e      	b.n	800086c <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800082e:	f7ff fec1 	bl	80005b4 <LL_RCC_LSE_IsReady>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d01b      	beq.n	8000870 <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 8000838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800083c:	60fb      	str	r3, [r7, #12]
          }
          break;
 800083e:	e017      	b.n	8000870 <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000840:	f000 f876 	bl	8000930 <RCC_GetSystemClockFreq>
 8000844:	4603      	mov	r3, r0
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f898 	bl	800097c <RCC_GetHCLKClockFreq>
 800084c:	4603      	mov	r3, r0
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f8ac 	bl	80009ac <RCC_GetPCLK1ClockFreq>
 8000854:	60f8      	str	r0, [r7, #12]
          break;
 8000856:	e00c      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8000858:	bf00      	nop
 800085a:	e00a      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 800085c:	bf00      	nop
 800085e:	e008      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8000860:	bf00      	nop
 8000862:	e006      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8000864:	bf00      	nop
 8000866:	e004      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 8000868:	bf00      	nop
 800086a:	e002      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 800086c:	bf00      	nop
 800086e:	e000      	b.n	8000872 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8000870:	bf00      	nop
  }
  return usart_frequency;
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	00030001 	.word	0x00030001
 8000880:	00030002 	.word	0x00030002
 8000884:	00f42400 	.word	0x00f42400
 8000888:	000c0004 	.word	0x000c0004
 800088c:	000c0008 	.word	0x000c0008
 8000890:	00300010 	.word	0x00300010
 8000894:	00300020 	.word	0x00300020

08000898 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2bc0      	cmp	r3, #192	; 0xc0
 80008a8:	d131      	bne.n	800090e <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fee2 	bl	8000674 <LL_RCC_GetUARTClockSource>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80008b6:	d015      	beq.n	80008e4 <LL_RCC_GetUARTClockFreq+0x4c>
 80008b8:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80008bc:	d81b      	bhi.n	80008f6 <LL_RCC_GetUARTClockFreq+0x5e>
 80008be:	4a19      	ldr	r2, [pc, #100]	; (8000924 <LL_RCC_GetUARTClockFreq+0x8c>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d003      	beq.n	80008cc <LL_RCC_GetUARTClockFreq+0x34>
 80008c4:	4a18      	ldr	r2, [pc, #96]	; (8000928 <LL_RCC_GetUARTClockFreq+0x90>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d004      	beq.n	80008d4 <LL_RCC_GetUARTClockFreq+0x3c>
 80008ca:	e014      	b.n	80008f6 <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80008cc:	f000 f830 	bl	8000930 <RCC_GetSystemClockFreq>
 80008d0:	60f8      	str	r0, [r7, #12]
        break;
 80008d2:	e021      	b.n	8000918 <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80008d4:	f7ff fe5a 	bl	800058c <LL_RCC_HSI_IsReady>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d019      	beq.n	8000912 <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <LL_RCC_GetUARTClockFreq+0x94>)
 80008e0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80008e2:	e016      	b.n	8000912 <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80008e4:	f7ff fe66 	bl	80005b4 <LL_RCC_LSE_IsReady>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d013      	beq.n	8000916 <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 80008ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80008f4:	e00f      	b.n	8000916 <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80008f6:	f000 f81b 	bl	8000930 <RCC_GetSystemClockFreq>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f83d 	bl	800097c <RCC_GetHCLKClockFreq>
 8000902:	4603      	mov	r3, r0
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f851 	bl	80009ac <RCC_GetPCLK1ClockFreq>
 800090a:	60f8      	str	r0, [r7, #12]
        break;
 800090c:	e004      	b.n	8000918 <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 800090e:	bf00      	nop
 8000910:	e002      	b.n	8000918 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 8000912:	bf00      	nop
 8000914:	e000      	b.n	8000918 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 8000916:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8000918:	68fb      	ldr	r3, [r7, #12]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	00c00040 	.word	0x00c00040
 8000928:	00c00080 	.word	0x00c00080
 800092c:	00f42400 	.word	0x00f42400

08000930 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000936:	f7ff fe51 	bl	80005dc <LL_RCC_GetSysClkSource>
 800093a:	4603      	mov	r3, r0
 800093c:	2b0c      	cmp	r3, #12
 800093e:	d00c      	beq.n	800095a <RCC_GetSystemClockFreq+0x2a>
 8000940:	2b0c      	cmp	r3, #12
 8000942:	d80e      	bhi.n	8000962 <RCC_GetSystemClockFreq+0x32>
 8000944:	2b04      	cmp	r3, #4
 8000946:	d002      	beq.n	800094e <RCC_GetSystemClockFreq+0x1e>
 8000948:	2b08      	cmp	r3, #8
 800094a:	d003      	beq.n	8000954 <RCC_GetSystemClockFreq+0x24>
 800094c:	e009      	b.n	8000962 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <RCC_GetSystemClockFreq+0x44>)
 8000950:	607b      	str	r3, [r7, #4]
      break;
 8000952:	e009      	b.n	8000968 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <RCC_GetSystemClockFreq+0x48>)
 8000956:	607b      	str	r3, [r7, #4]
      break;
 8000958:	e006      	b.n	8000968 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800095a:	f000 f853 	bl	8000a04 <RCC_PLL_GetFreqDomain_SYS>
 800095e:	6078      	str	r0, [r7, #4]
      break;
 8000960:	e002      	b.n	8000968 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <RCC_GetSystemClockFreq+0x44>)
 8000964:	607b      	str	r3, [r7, #4]
      break;
 8000966:	bf00      	nop
  }

  return frequency;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	00f42400 	.word	0x00f42400
 8000978:	007a1200 	.word	0x007a1200

0800097c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000984:	f7ff fe38 	bl	80005f8 <LL_RCC_GetAHBPrescaler>
 8000988:	4603      	mov	r3, r0
 800098a:	091b      	lsrs	r3, r3, #4
 800098c:	f003 030f 	and.w	r3, r3, #15
 8000990:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <RCC_GetHCLKClockFreq+0x2c>)
 8000992:	5cd3      	ldrb	r3, [r2, r3]
 8000994:	f003 031f 	and.w	r3, r3, #31
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	08002e5c 	.word	0x08002e5c

080009ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80009b4:	f7ff fe2e 	bl	8000614 <LL_RCC_GetAPB1Prescaler>
 80009b8:	4603      	mov	r3, r0
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <RCC_GetPCLK1ClockFreq+0x28>)
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	f003 031f 	and.w	r3, r3, #31
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	fa22 f303 	lsr.w	r3, r2, r3
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	08002e6c 	.word	0x08002e6c

080009d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80009e0:	f7ff fe26 	bl	8000630 <LL_RCC_GetAPB2Prescaler>
 80009e4:	4603      	mov	r3, r0
 80009e6:	0adb      	lsrs	r3, r3, #11
 80009e8:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <RCC_GetPCLK2ClockFreq+0x28>)
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	fa22 f303 	lsr.w	r3, r2, r3
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	08002e6c 	.word	0x08002e6c

08000a04 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000a0a:	f7ff fe47 	bl	800069c <LL_RCC_PLL_GetMainSource>
 8000a0e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d003      	beq.n	8000a1e <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d003      	beq.n	8000a24 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8000a1c:	e005      	b.n	8000a2a <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8000a20:	607b      	str	r3, [r7, #4]
      break;
 8000a22:	e005      	b.n	8000a30 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8000a26:	607b      	str	r3, [r7, #4]
      break;
 8000a28:	e002      	b.n	8000a30 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8000a2c:	607b      	str	r3, [r7, #4]
      break;
 8000a2e:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000a30:	f7ff fe42 	bl	80006b8 <LL_RCC_PLL_GetN>
 8000a34:	4602      	mov	r2, r0
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	fb03 f402 	mul.w	r4, r3, r2
 8000a3c:	f7ff fe58 	bl	80006f0 <LL_RCC_PLL_GetDivider>
 8000a40:	4603      	mov	r3, r0
 8000a42:	091b      	lsrs	r3, r3, #4
 8000a44:	3301      	adds	r3, #1
 8000a46:	fbb4 f4f3 	udiv	r4, r4, r3
 8000a4a:	f7ff fe43 	bl	80006d4 <LL_RCC_PLL_GetR>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	0e5b      	lsrs	r3, r3, #25
 8000a52:	3301      	adds	r3, #1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	bf00      	nop
 8000a64:	00f42400 	.word	0x00f42400
 8000a68:	007a1200 	.word	0x007a1200

08000a6c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d101      	bne.n	8000a84 <LL_USART_IsEnabled+0x18>
 8000a80:	2301      	movs	r3, #1
 8000a82:	e000      	b.n	8000a86 <LL_USART_IsEnabled+0x1a>
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <LL_USART_SetPrescaler>:
  *         @arg @ref LL_USART_PRESCALER_DIV128
  *         @arg @ref LL_USART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa0:	f023 030f 	bic.w	r3, r3, #15
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	b292      	uxth	r2, r2
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	605a      	str	r2, [r3, #4]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	609a      	str	r2, [r3, #8]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <LL_USART_SetBaudRate>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                          uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0b      	cmp	r3, #11
 8000b1a:	d83c      	bhi.n	8000b96 <LL_USART_SetBaudRate+0x8e>
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d039      	beq.n	8000b96 <LL_USART_SetBaudRate+0x8e>
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b28:	d122      	bne.n	8000b70 <LL_USART_SetBaudRate+0x68>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <LL_USART_SetBaudRate+0x9c>)
 8000b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3c:	005a      	lsls	r2, r3, #1
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	441a      	add	r2, r3
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
  }
}
 8000b6e:	e012      	b.n	8000b96 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <LL_USART_SetBaudRate+0x9c>)
 8000b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b82:	6a3b      	ldr	r3, [r7, #32]
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	441a      	add	r2, r3
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	60da      	str	r2, [r3, #12]
}
 8000b96:	bf00      	nop
 8000b98:	371c      	adds	r7, #28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	08002ddc 	.word	0x08002ddc

08000ba8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ff56 	bl	8000a6c <LL_USART_IsEnabled>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d15b      	bne.n	8000c7e <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <LL_USART_Init+0xe0>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	6891      	ldr	r1, [r2, #8]
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	6912      	ldr	r2, [r2, #16]
 8000bd6:	4311      	orrs	r1, r2
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	6952      	ldr	r2, [r2, #20]
 8000bdc:	4311      	orrs	r1, r2
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	69d2      	ldr	r2, [r2, #28]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff62 	bl	8000aba <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff6f 	bl	8000ae0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <LL_USART_Init+0xe4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d104      	bne.n	8000c14 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f7ff fd7e 	bl	800070c <LL_RCC_GetUSARTClockFreq>
 8000c10:	60b8      	str	r0, [r7, #8]
 8000c12:	e019      	b.n	8000c48 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <LL_USART_Init+0xe8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d104      	bne.n	8000c26 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8000c1c:	200c      	movs	r0, #12
 8000c1e:	f7ff fd75 	bl	800070c <LL_RCC_GetUSARTClockFreq>
 8000c22:	60b8      	str	r0, [r7, #8]
 8000c24:	e010      	b.n	8000c48 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART3)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a1a      	ldr	r2, [pc, #104]	; (8000c94 <LL_USART_Init+0xec>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d104      	bne.n	8000c38 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8000c2e:	2030      	movs	r0, #48	; 0x30
 8000c30:	f7ff fd6c 	bl	800070c <LL_RCC_GetUSARTClockFreq>
 8000c34:	60b8      	str	r0, [r7, #8]
 8000c36:	e007      	b.n	8000c48 <LL_USART_Init+0xa0>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <LL_USART_Init+0xf0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d103      	bne.n	8000c48 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8000c40:	20c0      	movs	r0, #192	; 0xc0
 8000c42:	f7ff fe29 	bl	8000898 <LL_RCC_GetUARTClockFreq>
 8000c46:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d011      	beq.n	8000c72 <LL_USART_Init+0xca>
        && (USART_InitStruct->BaudRate != 0U))
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d00d      	beq.n	8000c72 <LL_USART_Init+0xca>
    {
      status = SUCCESS;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	69d9      	ldr	r1, [r3, #28]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff4b 	bl	8000b08 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4619      	mov	r1, r3
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff0a 	bl	8000a92 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	efff69f3 	.word	0xefff69f3
 8000c8c:	40013800 	.word	0x40013800
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40004800 	.word	0x40004800
 8000c98:	40004c00 	.word	0x40004c00

08000c9c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <LL_InitTick+0x30>)
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <LL_InitTick+0x30>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <LL_InitTick+0x30>)
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000cd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ffdd 	bl	8000c9c <LL_InitTick>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <LL_SetSystemCoreClock+0x1c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000000 	.word	0x20000000

08000d0c <Blinky_ctor_call>:
/*.$enddef${Shared::AO_Blinky} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

/* Active object definition ================================================*/
/*.$define${Shared::Blinky_ctor_call} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${Shared::Blinky_ctor_call} .............................................*/
void Blinky_ctor_call(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    Blinky_ctor(&Blinky_inst);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <Blinky_ctor_call+0x10>)
 8000d12:	f000 f805 	bl	8000d20 <Blinky_ctor>
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000020 	.word	0x20000020

08000d20 <Blinky_ctor>:
/*.$enddef${Shared::Blinky_ctor_call} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${AOs::Blinky} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::Blinky} ..........................................................*/
Blinky Blinky_inst;
/*.${AOs::Blinky::ctor} ....................................................*/
static void Blinky_ctor(Blinky * const me) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
    QActive_ctor(&me->super, Q_STATE_CAST(&Blinky_initial));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <Blinky_ctor+0x2c>)
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fd4d 	bl	80027cc <QActive_ctor>
    QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f103 0020 	add.w	r0, r3, #32
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2206      	movs	r2, #6
 8000d3e:	f001 fe09 	bl	8002954 <QTimeEvt_ctorX>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	08000d51 	.word	0x08000d51

08000d50 <Blinky_initial>:

/*.${AOs::Blinky::SM} ......................................................*/
static QState Blinky_initial(Blinky * const me, void const * const par) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
    /*.${AOs::Blinky::SM::initial} */
    return Q_TRAN(&Blinky_active);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <Blinky_initial+0x20>)
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	2308      	movs	r3, #8
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	08000d75 	.word	0x08000d75

08000d74 <Blinky_active>:
/*.${AOs::Blinky::SM::active} ..............................................*/
static QState Blinky_active(Blinky * const me, QEvt const * const e) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d002      	beq.n	8000d8c <Blinky_active+0x18>
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d00a      	beq.n	8000da0 <Blinky_active+0x2c>
 8000d8a:	e00f      	b.n	8000dac <Blinky_active+0x38>
        /*.${AOs::Blinky::SM::active} */
        case Q_ENTRY_SIG: {
            QTimeEvt_armX(&me->timeEvt,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3320      	adds	r3, #32
 8000d90:	2264      	movs	r2, #100	; 0x64
 8000d92:	2164      	movs	r1, #100	; 0x64
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 fe0d 	bl	80029b4 <QTimeEvt_armX>
                BSP_TICKS_PER_SEC,
                BSP_TICKS_PER_SEC);
            status_ = Q_HANDLED();
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	73fb      	strb	r3, [r7, #15]
            break;
 8000d9e:	e00b      	b.n	8000db8 <Blinky_active+0x44>
        }
        /*.${AOs::Blinky::SM::active::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Blinky_off);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <Blinky_active+0x50>)
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	2308      	movs	r3, #8
 8000da8:	73fb      	strb	r3, [r7, #15]
            break;
 8000daa:	e005      	b.n	8000db8 <Blinky_active+0x44>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <Blinky_active+0x54>)
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
            break;
 8000db6:	bf00      	nop
        }
    }
    return status_;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08000dcd 	.word	0x08000dcd
 8000dc8:	08001c25 	.word	0x08001c25

08000dcc <Blinky_off>:
/*.${AOs::Blinky::SM::active::off} .........................................*/
static QState Blinky_off(Blinky * const me, QEvt const * const e) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d002      	beq.n	8000de4 <Blinky_off+0x18>
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d006      	beq.n	8000df0 <Blinky_off+0x24>
 8000de2:	e00b      	b.n	8000dfc <Blinky_off+0x30>
        /*.${AOs::Blinky::SM::active::off} */
        case Q_ENTRY_SIG: {
            BSP_SetBlinkyLED(OFF);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 f9f9 	bl	80011dc <BSP_SetBlinkyLED>
            status_ = Q_HANDLED();
 8000dea:	2303      	movs	r3, #3
 8000dec:	73fb      	strb	r3, [r7, #15]
            break;
 8000dee:	e00b      	b.n	8000e08 <Blinky_off+0x3c>
        }
        /*.${AOs::Blinky::SM::active::off::TIMEOUT} */
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&Blinky_on);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <Blinky_off+0x48>)
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	2308      	movs	r3, #8
 8000df8:	73fb      	strb	r3, [r7, #15]
            break;
 8000dfa:	e005      	b.n	8000e08 <Blinky_off+0x3c>
        }
        default: {
            status_ = Q_SUPER(&Blinky_active);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <Blinky_off+0x4c>)
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
            break;
 8000e06:	bf00      	nop
        }
    }
    return status_;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08000e1d 	.word	0x08000e1d
 8000e18:	08000d75 	.word	0x08000d75

08000e1c <Blinky_on>:
/*.${AOs::Blinky::SM::active::on} ..........................................*/
static QState Blinky_on(Blinky * const me, QEvt const * const e) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d002      	beq.n	8000e34 <Blinky_on+0x18>
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d006      	beq.n	8000e40 <Blinky_on+0x24>
 8000e32:	e00b      	b.n	8000e4c <Blinky_on+0x30>
        /*.${AOs::Blinky::SM::active::on} */
        case Q_ENTRY_SIG: {
            BSP_SetBlinkyLED(ON);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f000 f9d1 	bl	80011dc <BSP_SetBlinkyLED>
            status_ = Q_HANDLED();
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	73fb      	strb	r3, [r7, #15]
            break;
 8000e3e:	e00b      	b.n	8000e58 <Blinky_on+0x3c>
        }
        /*.${AOs::Blinky::SM::active::on::TIMEOUT} */
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&Blinky_off);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <Blinky_on+0x48>)
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	2308      	movs	r3, #8
 8000e48:	73fb      	strb	r3, [r7, #15]
            break;
 8000e4a:	e005      	b.n	8000e58 <Blinky_on+0x3c>
        }
        default: {
            status_ = Q_SUPER(&Blinky_active);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <Blinky_on+0x4c>)
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]
            break;
 8000e56:	bf00      	nop
        }
    }
    return status_;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08000dcd 	.word	0x08000dcd
 8000e68:	08000d75 	.word	0x08000d75

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f7ff ffc2 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <LL_RCC_HSI_Enable>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <LL_RCC_HSI_Enable+0x1c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <LL_RCC_HSI_Enable+0x1c>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000

08000f24 <LL_RCC_HSI_IsReady>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <LL_RCC_HSI_IsReady+0x24>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f34:	d101      	bne.n	8000f3a <LL_RCC_HSI_IsReady+0x16>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <LL_RCC_HSI_IsReady+0x18>
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_RCC_HSI_SetCalibTrimming>:
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	061b      	lsls	r3, r3, #24
 8000f60:	4904      	ldr	r1, [pc, #16]	; (8000f74 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	604b      	str	r3, [r1, #4]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <LL_RCC_SetSysClkSource>:
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <LL_RCC_SetSysClkSource+0x24>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f023 0203 	bic.w	r2, r3, #3
 8000f88:	4904      	ldr	r1, [pc, #16]	; (8000f9c <LL_RCC_SetSysClkSource+0x24>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	608b      	str	r3, [r1, #8]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <LL_RCC_GetSysClkSource>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <LL_RCC_GetSysClkSource+0x18>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <LL_RCC_SetAHBPrescaler>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fcc:	4904      	ldr	r1, [pc, #16]	; (8000fe0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	608b      	str	r3, [r1, #8]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <LL_RCC_SetAPB1Prescaler>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ff4:	4904      	ldr	r1, [pc, #16]	; (8001008 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	608b      	str	r3, [r1, #8]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40021000 	.word	0x40021000

0800100c <LL_RCC_SetAPB2Prescaler>:
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800101c:	4904      	ldr	r1, [pc, #16]	; (8001030 <LL_RCC_SetAPB2Prescaler+0x24>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4313      	orrs	r3, r2
 8001022:	608b      	str	r3, [r1, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000

08001034 <LL_RCC_PLL_Enable>:
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <LL_RCC_PLL_Enable+0x1c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <LL_RCC_PLL_Enable+0x1c>)
 800103e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <LL_RCC_PLL_IsReady>:
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <LL_RCC_PLL_IsReady+0x24>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001064:	d101      	bne.n	800106a <LL_RCC_PLL_IsReady+0x16>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <LL_RCC_PLL_IsReady+0x18>
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <LL_RCC_PLL_ConfigDomain_SYS>:
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001090:	4013      	ands	r3, r2
 8001092:	68f9      	ldr	r1, [r7, #12]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	4311      	orrs	r1, r2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	0212      	lsls	r2, r2, #8
 800109c:	4311      	orrs	r1, r2
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	4904      	ldr	r1, [pc, #16]	; (80010b4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60cb      	str	r3, [r1, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40021000 	.word	0x40021000
 80010b8:	f9ff800c 	.word	0xf9ff800c

080010bc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80010c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <LL_FLASH_SetLatency+0x24>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 020f 	bic.w	r2, r3, #15
 80010ec:	4904      	ldr	r1, [pc, #16]	; (8001100 <LL_FLASH_SetLatency+0x24>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40022000 	.word	0x40022000

08001104 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <LL_FLASH_GetLatency+0x18>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 030f 	and.w	r3, r3, #15
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40022000 	.word	0x40022000

08001120 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <LL_PWR_EnableRange1BoostMode+0x20>)
 8001126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <LL_PWR_EnableRange1BoostMode+0x20>)
 800112c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40007000 	.word	0x40007000

08001144 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001154:	2b80      	cmp	r3, #128	; 0x80
 8001156:	d101      	bne.n	800115c <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2240      	movs	r2, #64	; 0x40
 8001176:	621a      	str	r2, [r3, #32]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8001190:	78fa      	ldrb	r2, [r7, #3]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	619a      	str	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <BSP_SetBlinkyLED>:




void BSP_SetBlinkyLED(ON_OFF_STATUS status)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
    if(status == ON)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d113      	bne.n	8001214 <BSP_SetBlinkyLED+0x38>
    {
        LL_GPIO_SetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
 80011ec:	2120      	movs	r1, #32
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f7ff ffd6 	bl	80011a2 <LL_GPIO_SetOutputPin>
        while (!LL_USART_IsActiveFlag_TXE(USART1)){}
 80011f6:	bf00      	nop
 80011f8:	4812      	ldr	r0, [pc, #72]	; (8001244 <BSP_SetBlinkyLED+0x68>)
 80011fa:	f7ff ffa3 	bl	8001144 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f9      	beq.n	80011f8 <BSP_SetBlinkyLED+0x1c>
        LL_USART_TransmitData8(USART1, 0x31);
 8001204:	2131      	movs	r1, #49	; 0x31
 8001206:	480f      	ldr	r0, [pc, #60]	; (8001244 <BSP_SetBlinkyLED+0x68>)
 8001208:	f7ff ffbc 	bl	8001184 <LL_USART_TransmitData8>
        LL_USART_ClearFlag_TC(USART1);
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <BSP_SetBlinkyLED+0x68>)
 800120e:	f7ff ffac 	bl	800116a <LL_USART_ClearFlag_TC>
        LL_GPIO_ResetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
        while (!LL_USART_IsActiveFlag_TXE(USART1)){}
        LL_USART_TransmitData8(USART1, 0x30);
        LL_USART_ClearFlag_TC(USART1);
    }
}
 8001212:	e012      	b.n	800123a <BSP_SetBlinkyLED+0x5e>
        LL_GPIO_ResetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
 8001214:	2120      	movs	r1, #32
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f7ff ffd0 	bl	80011be <LL_GPIO_ResetOutputPin>
        while (!LL_USART_IsActiveFlag_TXE(USART1)){}
 800121e:	bf00      	nop
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <BSP_SetBlinkyLED+0x68>)
 8001222:	f7ff ff8f 	bl	8001144 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f9      	beq.n	8001220 <BSP_SetBlinkyLED+0x44>
        LL_USART_TransmitData8(USART1, 0x30);
 800122c:	2130      	movs	r1, #48	; 0x30
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <BSP_SetBlinkyLED+0x68>)
 8001230:	f7ff ffa8 	bl	8001184 <LL_USART_TransmitData8>
        LL_USART_ClearFlag_TC(USART1);
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <BSP_SetBlinkyLED+0x68>)
 8001236:	f7ff ff98 	bl	800116a <LL_USART_ClearFlag_TC>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40013800 	.word	0x40013800

08001248 <BSP_Init>:
 * @brief  BSP_Init - BSP & System Initialise
 * @retval None - errors here are intolerable & will call Error_Handler()
 ******************************************************************************
*/
void BSP_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

    /* CONFIGURE SYSTEM CLOCK */
    SystemClock_Config();
 800124c:	f000 f804 	bl	8001258 <SystemClock_Config>

    /* INITIALISE PERIPHERALS */
    Peripheral_Init();
 8001250:	f000 f862 	bl	8001318 <Peripheral_Init>

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <SystemClock_Config>:
 * @brief  SystemClock_Config - System clock configuration
 * @retval None - errors here are intolerable & will call Error_Handler()
 ******************************************************************************
*/
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 800125c:	2004      	movs	r0, #4
 800125e:	f7ff ff3d 	bl	80010dc <LL_FLASH_SetLatency>
    while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8001262:	bf00      	nop
 8001264:	f7ff ff4e 	bl	8001104 <LL_FLASH_GetLatency>
 8001268:	4603      	mov	r3, r0
 800126a:	2b04      	cmp	r3, #4
 800126c:	d1fa      	bne.n	8001264 <SystemClock_Config+0xc>
    {
    }
    LL_PWR_EnableRange1BoostMode();
 800126e:	f7ff ff57 	bl	8001120 <LL_PWR_EnableRange1BoostMode>
    LL_RCC_HSI_Enable();
 8001272:	f7ff fe47 	bl	8000f04 <LL_RCC_HSI_Enable>
    /* Wait till HSI is ready */
    while(LL_RCC_HSI_IsReady() != 1)
 8001276:	bf00      	nop
 8001278:	f7ff fe54 	bl	8000f24 <LL_RCC_HSI_IsReady>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d1fa      	bne.n	8001278 <SystemClock_Config+0x20>
    {
    }

    LL_RCC_HSI_SetCalibTrimming(64);
 8001282:	2040      	movs	r0, #64	; 0x40
 8001284:	f7ff fe62 	bl	8000f4c <LL_RCC_HSI_SetCalibTrimming>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 8001288:	2300      	movs	r3, #0
 800128a:	2255      	movs	r2, #85	; 0x55
 800128c:	2130      	movs	r1, #48	; 0x30
 800128e:	2002      	movs	r0, #2
 8001290:	f7ff fef4 	bl	800107c <LL_RCC_PLL_ConfigDomain_SYS>
    LL_RCC_PLL_EnableDomain_SYS();
 8001294:	f7ff ff12 	bl	80010bc <LL_RCC_PLL_EnableDomain_SYS>
    LL_RCC_PLL_Enable();
 8001298:	f7ff fecc 	bl	8001034 <LL_RCC_PLL_Enable>
    /* Wait till PLL is ready */
    while(LL_RCC_PLL_IsReady() != 1)
 800129c:	bf00      	nop
 800129e:	f7ff fed9 	bl	8001054 <LL_RCC_PLL_IsReady>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d1fa      	bne.n	800129e <SystemClock_Config+0x46>
    {
    }

    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f7ff fe65 	bl	8000f78 <LL_RCC_SetSysClkSource>
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 80012ae:	2080      	movs	r0, #128	; 0x80
 80012b0:	f7ff fe84 	bl	8000fbc <LL_RCC_SetAHBPrescaler>
    /* Wait till System clock is ready */
    while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80012b4:	bf00      	nop
 80012b6:	f7ff fe73 	bl	8000fa0 <LL_RCC_GetSysClkSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d1fa      	bne.n	80012b6 <SystemClock_Config+0x5e>
    {
    }

    /* Insure 1�s transition state at intermediate medium speed clock based on DWT */
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <SystemClock_Config+0xb4>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4a11      	ldr	r2, [pc, #68]	; (800130c <SystemClock_Config+0xb4>)
 80012c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ca:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <SystemClock_Config+0xb8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <SystemClock_Config+0xb8>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <SystemClock_Config+0xb8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < 100);
 80012de:	bf00      	nop
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <SystemClock_Config+0xb8>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b63      	cmp	r3, #99	; 0x63
 80012e6:	d9fb      	bls.n	80012e0 <SystemClock_Config+0x88>
    /* Set AHB prescaler*/
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fe67 	bl	8000fbc <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff fe78 	bl	8000fe4 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fe89 	bl	800100c <LL_RCC_SetAPB2Prescaler>

    LL_Init1msTick(170000000);
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <SystemClock_Config+0xbc>)
 80012fc:	f7ff fce8 	bl	8000cd0 <LL_Init1msTick>

    LL_SetSystemCoreClock(170000000);
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <SystemClock_Config+0xbc>)
 8001302:	f7ff fcf3 	bl	8000cec <LL_SetSystemCoreClock>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000edf0 	.word	0xe000edf0
 8001310:	e0001000 	.word	0xe0001000
 8001314:	0a21fe80 	.word	0x0a21fe80

08001318 <Peripheral_Init>:
 * @brief  Peripheral_Init - Initialises all peripherals to default state
 * @retval None
 ******************************************************************************
*/
void Peripheral_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
    GPIO_Init();
 800131c:	f000 fa06 	bl	800172c <GPIO_Init>
    USART1_Init();
 8001320:	f000 fb9e 	bl	8001a60 <USART1_Init>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <QF_onStartup>:
 * @brief  QF_onStartup - executes once, on startup of QF
 * @retval None
 ******************************************************************************
*/
void QF_onStartup(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
    /* set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate */
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <QF_onStartup+0x2c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a09      	ldr	r2, [pc, #36]	; (8001358 <QF_onStartup+0x30>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fdc1 	bl	8000ec0 <SysTick_Config>
    *
    * !!!!!!!!!!!!!!!!!!!!!!!!!!!! CAUTION !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    * Assign a priority to EVERY ISR explicitly by calling NVIC_SetPriority().
    * DO NOT LEAVE THE ISR PRIORITIES AT THE DEFAULT VALUE!
    */
    NVIC_SetPriority(USART1_IRQn,    0U); /* kernel UNAWARE interrupt */
 800133e:	2100      	movs	r1, #0
 8001340:	2025      	movs	r0, #37	; 0x25
 8001342:	f7ff fd93 	bl	8000e6c <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 1U);
 8001346:	2104      	movs	r1, #4
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff fd8e 	bl	8000e6c <__NVIC_SetPriority>

    /* enable IRQs... */
#ifdef Q_SPY
    NVIC_EnableIRQ(USART1_IRQn); /* UART2 interrupt used for QS-RX */
#endif
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	51eb851f 	.word	0x51eb851f

0800135c <QV_onIdle>:
 * @brief  QV_onIdle - executes during QV idle time
 * @retval None
 ******************************************************************************
*/
void QV_onIdle(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
            USART1->TDR = (b & 0xFFU);  /* put into the DR register */
        }
    }

#else
    QF_INT_ENABLE(); /* just enable interrupts */
 8001360:	2300      	movs	r3, #0
 8001362:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <Q_onAssert>:

Q_NORETURN Q_onAssert(char const * const module, int_t const loc)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]

    (void)module;
    (void)loc;
    QS_ASSERTION(module, loc, 10000U); /* report assertion to QS */

    while(1); //TODO: Add an assertion handler here
 800137a:	e7fe      	b.n	800137a <Q_onAssert+0xa>

0800137c <SysTick_Handler>:
 * @brief  SysTick_Handler - handles the Systick
 * @retval None
 ******************************************************************************
*/
void SysTick_Handler(void)
{
 800137c:	b598      	push	{r3, r4, r7, lr}
 800137e:	af00      	add	r7, sp, #0
        uint32_t volatile tmp = SysTick->CTRL; /* clear CTRL_COUNTFLAG */
        QS_tickTime_ += QS_tickPeriod_; /* account for the clock rollover */
    }
#endif

    QF_TICK_X(0U, &l_SysTick_Handler); /* process time events for rate 0 */
 8001380:	2100      	movs	r1, #0
 8001382:	2000      	movs	r0, #0
 8001384:	f001 fb74 	bl	8002a70 <QTimeEvt_tick_>
    QACTIVE_POST(&ticker0_10ms.super, 0, &l_SysTick_Handler); /* post to Ticker0 */
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <SysTick_Handler+0x28>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68dc      	ldr	r4, [r3, #12]
 800138e:	2300      	movs	r3, #0
 8001390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001394:	2100      	movs	r1, #0
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <SysTick_Handler+0x28>)
 8001398:	47a0      	blx	r4


    QV_ARM_ERRATUM_838869();
 800139a:	f3bf 8f4f 	dsb	sy
}
 800139e:	bf00      	nop
 80013a0:	bd98      	pop	{r3, r4, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000054 	.word	0x20000054

080013a8 <QF_psInit>:
* @sa QActive_psInit()
*/
static inline void QF_psInit(
    QSubscrList * const subscrSto,
    enum_t const maxSignal)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    QActive_psInit(subscrSto, maxSignal);
 80013b2:	6839      	ldr	r1, [r7, #0]
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f001 f9d1 	bl	800275c <QActive_psInit>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <main>:
 ******************************************************************************
 * @brief  main - The application entry point
 ******************************************************************************
*/
int main(void)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af04      	add	r7, sp, #16

    /* QF EVENT SUBSCRIPTION LIST */
    static QSubscrList subscrSto[MAX_PUB_SIG];

    /* INITIALISE BOARD SUPPORT PACKAGE */
    BSP_Init();
 80013ca:	f7ff ff3d 	bl	8001248 <BSP_Init>

    /* INSTANTIATE ACTIVE OBJECTS */
    QTicker_ctor(&ticker0_10ms, 0U); // active object for tick rate 0
 80013ce:	2100      	movs	r1, #0
 80013d0:	4822      	ldr	r0, [pc, #136]	; (800145c <main+0x98>)
 80013d2:	f000 fff7 	bl	80023c4 <QTicker_ctor>
    //QTicker_ctor(&ticker1_10us, 1U); // active object for tick rate 1

    Blinky_ctor_call();              // Blinky constructor
 80013d6:	f7ff fc99 	bl	8000d0c <Blinky_ctor_call>

    /* INITIALISE QF */
    QF_init();                       // initialize the framework
 80013da:	f001 fc25 	bl	8002c28 <QF_init>

    /* INIT PUB/SUBSCRIBE */
    QF_psInit(subscrSto, Q_DIM(subscrSto));
 80013de:	2105      	movs	r1, #5
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <main+0x9c>)
 80013e2:	f7ff ffe1 	bl	80013a8 <QF_psInit>

    /* INIT EVENT POOLS */
    QF_poolInit(stdEvtPool, sizeof(stdEvtPool), sizeof(stdEvtPool[0]));
 80013e6:	2204      	movs	r2, #4
 80013e8:	2128      	movs	r1, #40	; 0x28
 80013ea:	481e      	ldr	r0, [pc, #120]	; (8001464 <main+0xa0>)
 80013ec:	f001 f88a 	bl	8002504 <QF_poolInit>


    /* START ACTIVE OBJECTS */
    QACTIVE_START(&ticker0_10ms.super,
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <main+0x98>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <main+0x3c>
 80013f8:	214f      	movs	r1, #79	; 0x4f
 80013fa:	481b      	ldr	r0, [pc, #108]	; (8001468 <main+0xa4>)
 80013fc:	f7ff ffb8 	bl	8001370 <Q_onAssert>
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <main+0x98>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689c      	ldr	r4, [r3, #8]
 8001406:	2300      	movs	r3, #0
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	2300      	movs	r3, #0
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	2200      	movs	r2, #0
 8001416:	2101      	movs	r1, #1
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <main+0x98>)
 800141a:	47a0      	blx	r4
            1U, //QP priority
            0, 0, 0, 0, 0); //no queue, no stack , no init. event

    QACTIVE_START(AO_Blinky, /* active object to start */
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <main+0xa8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d103      	bne.n	800142e <main+0x6a>
 8001426:	2153      	movs	r1, #83	; 0x53
 8001428:	480f      	ldr	r0, [pc, #60]	; (8001468 <main+0xa4>)
 800142a:	f7ff ffa1 	bl	8001370 <Q_onAssert>
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <main+0xa8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689c      	ldr	r4, [r3, #8]
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <main+0xa8>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2300      	movs	r3, #0
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	230a      	movs	r3, #10
 8001448:	4a09      	ldr	r2, [pc, #36]	; (8001470 <main+0xac>)
 800144a:	2102      	movs	r1, #2
 800144c:	47a0      	blx	r4
                Q_DIM(blinky_queueSto), /* the length of the buffer */
                (void *)0, 0U, /* private stack (not used) */
                (QEvt *)0); /* initialization event (not used) */

    /* HANDOVER TO THE FRAMEWORK */
    return QF_run(); /* let the framework run the application */
 800144e:	f001 fc09 	bl	8002c64 <QF_run>
 8001452:	4603      	mov	r3, r0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3704      	adds	r7, #4
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20000054 	.word	0x20000054
 8001460:	20000074 	.word	0x20000074
 8001464:	20000088 	.word	0x20000088
 8001468:	08002e10 	.word	0x08002e10
 800146c:	08002e0c 	.word	0x08002e0c
 8001470:	200000b0 	.word	0x200000b0

08001474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001476:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800147a:	490e      	ldr	r1, [pc, #56]	; (80014b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800147c:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <LoopForever+0xe>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001490:	4c0b      	ldr	r4, [pc, #44]	; (80014c0 <LoopForever+0x16>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149e:	f000 f9d7 	bl	8001850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a2:	f001 fc63 	bl	8002d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014a6:	f7ff ff8d 	bl	80013c4 <main>

080014aa <LoopForever>:

LoopForever:
    b LoopForever
 80014aa:	e7fe      	b.n	80014aa <LoopForever>
  ldr   r0, =_estack
 80014ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80014b8:	08002ef4 	.word	0x08002ef4
  ldr r2, =_sbss
 80014bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80014c0:	200001d0 	.word	0x200001d0

080014c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>

080014c6 <LL_GPIO_SetPinMode>:
{
 80014c6:	b480      	push	{r7}
 80014c8:	b08b      	sub	sp, #44	; 0x2c
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	613b      	str	r3, [r7, #16]
  return result;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80014ec:	2320      	movs	r3, #32
 80014ee:	e003      	b.n	80014f8 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2103      	movs	r1, #3
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	401a      	ands	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	61fb      	str	r3, [r7, #28]
  return result;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800151a:	2320      	movs	r3, #32
 800151c:	e003      	b.n	8001526 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	431a      	orrs	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	372c      	adds	r7, #44	; 0x2c
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_GPIO_SetPinOutputType>:
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	43db      	mvns	r3, r3
 8001554:	401a      	ands	r2, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	fb01 f303 	mul.w	r3, r1, r3
 800155e:	431a      	orrs	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_GPIO_SetPinSpeed>:
{
 8001570:	b480      	push	{r7}
 8001572:	b08b      	sub	sp, #44	; 0x2c
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	613b      	str	r3, [r7, #16]
  return result;
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001596:	2320      	movs	r3, #32
 8001598:	e003      	b.n	80015a2 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2103      	movs	r1, #3
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	401a      	ands	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	61fb      	str	r3, [r7, #28]
  return result;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80015c4:	2320      	movs	r3, #32
 80015c6:	e003      	b.n	80015d0 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	431a      	orrs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	609a      	str	r2, [r3, #8]
}
 80015de:	bf00      	nop
 80015e0:	372c      	adds	r7, #44	; 0x2c
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_GPIO_SetPinPull>:
{
 80015ea:	b480      	push	{r7}
 80015ec:	b08b      	sub	sp, #44	; 0x2c
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	613b      	str	r3, [r7, #16]
  return result;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001610:	2320      	movs	r3, #32
 8001612:	e003      	b.n	800161c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2103      	movs	r1, #3
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	401a      	ands	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	61fb      	str	r3, [r7, #28]
  return result;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800163e:	2320      	movs	r3, #32
 8001640:	e003      	b.n	800164a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	431a      	orrs	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	60da      	str	r2, [r3, #12]
}
 8001658:	bf00      	nop
 800165a:	372c      	adds	r7, #44	; 0x2c
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_GPIO_SetAFPin_0_7>:
{
 8001664:	b480      	push	{r7}
 8001666:	b08b      	sub	sp, #44	; 0x2c
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a1a      	ldr	r2, [r3, #32]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	613b      	str	r3, [r7, #16]
  return result;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800168a:	2320      	movs	r3, #32
 800168c:	e003      	b.n	8001696 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	210f      	movs	r1, #15
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	401a      	ands	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	61fb      	str	r3, [r7, #28]
  return result;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80016b8:	2320      	movs	r3, #32
 80016ba:	e003      	b.n	80016c4 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	431a      	orrs	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	621a      	str	r2, [r3, #32]
}
 80016d2:	bf00      	nop
 80016d4:	372c      	adds	r7, #44	; 0x2c
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_GPIO_ResetOutputPin>:
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4013      	ands	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000

0800172c <GPIO_Init>:




void GPIO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    /* GPIO PORTS CLOCK ENABLE */
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001730:	2001      	movs	r0, #1
 8001732:	f7ff ffe3 	bl	80016fc <LL_AHB2_GRP1_EnableClock>
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001736:	2004      	movs	r0, #4
 8001738:	f7ff ffe0 	bl	80016fc <LL_AHB2_GRP1_EnableClock>

    /* BLINKY LED */
    LL_GPIO_ResetOutputPin(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN);
 800173c:	2120      	movs	r1, #32
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f7ff ffcc 	bl	80016de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetPinPull(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_PULL_NO);
 8001746:	2200      	movs	r2, #0
 8001748:	2120      	movs	r1, #32
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f7ff ff4c 	bl	80015ea <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinOutputType(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8001752:	2200      	movs	r2, #0
 8001754:	2120      	movs	r1, #32
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f7ff fef1 	bl	8001540 <LL_GPIO_SetPinOutputType>
    LL_GPIO_SetPinSpeed(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_SPEED_FREQ_LOW);
 800175e:	2200      	movs	r2, #0
 8001760:	2120      	movs	r1, #32
 8001762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001766:	f7ff ff03 	bl	8001570 <LL_GPIO_SetPinSpeed>
    LL_GPIO_SetPinMode(DO_BLINK_LED_PRT, DO_BLINK_LED_PIN, LL_GPIO_MODE_OUTPUT);
 800176a:	2201      	movs	r2, #1
 800176c:	2120      	movs	r1, #32
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f7ff fea8 	bl	80014c6 <LL_GPIO_SetPinMode>

    /* USART 1 */
    // Tx pin
    LL_GPIO_SetPinPull(USART1_PORT, USART1_TX_PIN, LL_GPIO_PULL_UP);
 8001776:	2201      	movs	r2, #1
 8001778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f7ff ff33 	bl	80015ea <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinOutputType(USART1_PORT, USART1_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f7ff fed7 	bl	8001540 <LL_GPIO_SetPinOutputType>
    LL_GPIO_SetPinSpeed(USART1_PORT, USART1_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8001792:	2202      	movs	r2, #2
 8001794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f7ff fee8 	bl	8001570 <LL_GPIO_SetPinSpeed>
    LL_GPIO_SetAFPin_0_7(USART1_PORT, USART1_TX_PIN, USART1_AFMODE);
 80017a0:	2207      	movs	r2, #7
 80017a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f7ff ff5b 	bl	8001664 <LL_GPIO_SetAFPin_0_7>
    LL_GPIO_SetPinMode(USART1_PORT, USART1_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 80017ae:	2202      	movs	r2, #2
 80017b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f7ff fe85 	bl	80014c6 <LL_GPIO_SetPinMode>
    // Rx pin
    LL_GPIO_SetPinPull(USART1_PORT, USART1_RX_PIN, LL_GPIO_PULL_UP);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f7ff ff10 	bl	80015ea <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinOutputType(USART1_PORT, USART1_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f7ff feb4 	bl	8001540 <LL_GPIO_SetPinOutputType>
    LL_GPIO_SetPinSpeed(USART1_PORT, USART1_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 80017d8:	2202      	movs	r2, #2
 80017da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f7ff fec5 	bl	8001570 <LL_GPIO_SetPinSpeed>
    LL_GPIO_SetAFPin_0_7(USART1_PORT, USART1_RX_PIN, USART1_AFMODE);
 80017e6:	2207      	movs	r2, #7
 80017e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f7ff ff38 	bl	8001664 <LL_GPIO_SetAFPin_0_7>
    LL_GPIO_SetPinMode(USART1_PORT, USART1_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 80017f4:	2202      	movs	r2, #2
 80017f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fe:	f7ff fe62 	bl	80014c6 <LL_GPIO_SetPinMode>
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}

08001806 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180a:	e7fe      	b.n	800180a <NMI_Handler+0x4>

0800180c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <HardFault_Handler+0x4>

08001812 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <MemManage_Handler+0x4>

08001818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <BusFault_Handler+0x4>

0800181e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <UsageFault_Handler+0x4>

08001824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <LL_USART_Enable>:
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f043 0201 	orr.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_USART_DisableFIFO>:
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_USART_SetTXFIFOThreshold>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3308      	adds	r3, #8
 80018c2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	e853 3f00 	ldrex	r3, [r3]
 80018ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	075b      	lsls	r3, r3, #29
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3308      	adds	r3, #8
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	61ba      	str	r2, [r7, #24]
 80018e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018e4:	6979      	ldr	r1, [r7, #20]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	e841 2300 	strex	r3, r2, [r1]
 80018ec:	613b      	str	r3, [r7, #16]
   return(result);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1e4      	bne.n	80018be <LL_USART_SetTXFIFOThreshold+0xa>
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_USART_SetRXFIFOThreshold>:
{
 8001902:	b480      	push	{r7}
 8001904:	b089      	sub	sp, #36	; 0x24
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3308      	adds	r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	e853 3f00 	ldrex	r3, [r3]
 8001918:	60bb      	str	r3, [r7, #8]
   return(result);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	065b      	lsls	r3, r3, #25
 8001924:	4313      	orrs	r3, r2
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3308      	adds	r3, #8
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	61ba      	str	r2, [r7, #24]
 8001930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001932:	6979      	ldr	r1, [r7, #20]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	e841 2300 	strex	r3, r2, [r1]
 800193a:	613b      	str	r3, [r7, #16]
   return(result);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1e4      	bne.n	800190c <LL_USART_SetRXFIFOThreshold+0xa>
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3724      	adds	r7, #36	; 0x24
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_USART_ConfigAsyncMode>:
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_USART_IsActiveFlag_TEACK>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001990:	d101      	bne.n	8001996 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_USART_IsActiveFlag_REACK>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b8:	d101      	bne.n	80019be <LL_USART_IsActiveFlag_REACK+0x1a>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_USART_IsActiveFlag_REACK+0x1c>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_RCC_SetUSARTClockSource>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <LL_RCC_SetUSARTClockSource+0x30>)
 80019d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	43db      	mvns	r3, r3
 80019e0:	401a      	ands	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4905      	ldr	r1, [pc, #20]	; (80019fc <LL_RCC_SetUSARTClockSource+0x30>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000

08001a00 <LL_AHB2_GRP1_EnableClock>:
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000

08001a30 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000

08001a60 <USART1_Init>:
/* FUNCTION PROTOTYPES ----------------------------------------------------- */



void USART1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08e      	sub	sp, #56	; 0x38
 8001a64:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_Init 0 */

     /* USER CODE END USART1_Init 0 */

     LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 f9a0 	bl	8002db4 <memset>

     LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]

     LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8001a84:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001a88:	f7ff ffa0 	bl	80019cc <LL_RCC_SetUSARTClockSource>

     /* Peripheral clock enable */
     LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001a8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a90:	f7ff ffce 	bl	8001a30 <LL_APB2_GRP1_EnableClock>

     LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff ffb3 	bl	8001a00 <LL_AHB2_GRP1_EnableClock>
     /**USART1 GPIO Configuration
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
     */
     GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a9e:	603b      	str	r3, [r7, #0]
     GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ab0:	2307      	movs	r3, #7
 8001ab2:	617b      	str	r3, [r7, #20]
     LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001abc:	f7fe fcf7 	bl	80004ae <LL_GPIO_Init>

     GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac4:	603b      	str	r3, [r7, #0]
     GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001aca:	2302      	movs	r3, #2
 8001acc:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	617b      	str	r3, [r7, #20]
     LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	463b      	mov	r3, r7
 8001adc:	4619      	mov	r1, r3
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f7fe fce4 	bl	80004ae <LL_GPIO_Init>

     /* USER CODE BEGIN USART1_Init 1 */

     /* USER CODE END USART1_Init 1 */
     USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
     USART_InitStruct.BaudRate = 115200;
 8001aea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001aee:	61fb      	str	r3, [r7, #28]
     USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
     USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
     USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
     USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001afc:	230c      	movs	r3, #12
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
     USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
     USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
     LL_USART_Init(USART1, &USART_InitStruct);
 8001b08:	f107 0318 	add.w	r3, r7, #24
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4813      	ldr	r0, [pc, #76]	; (8001b5c <USART1_Init+0xfc>)
 8001b10:	f7ff f84a 	bl	8000ba8 <LL_USART_Init>
     LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001b14:	2100      	movs	r1, #0
 8001b16:	4811      	ldr	r0, [pc, #68]	; (8001b5c <USART1_Init+0xfc>)
 8001b18:	f7ff fecc 	bl	80018b4 <LL_USART_SetTXFIFOThreshold>
     LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	480f      	ldr	r0, [pc, #60]	; (8001b5c <USART1_Init+0xfc>)
 8001b20:	f7ff feef 	bl	8001902 <LL_USART_SetRXFIFOThreshold>
     LL_USART_DisableFIFO(USART1);
 8001b24:	480d      	ldr	r0, [pc, #52]	; (8001b5c <USART1_Init+0xfc>)
 8001b26:	f7ff feb5 	bl	8001894 <LL_USART_DisableFIFO>
     LL_USART_ConfigAsyncMode(USART1);
 8001b2a:	480c      	ldr	r0, [pc, #48]	; (8001b5c <USART1_Init+0xfc>)
 8001b2c:	f7ff ff10 	bl	8001950 <LL_USART_ConfigAsyncMode>

     /* USER CODE BEGIN WKUPType USART1 */

     /* USER CODE END WKUPType USART1 */

     LL_USART_Enable(USART1);
 8001b30:	480a      	ldr	r0, [pc, #40]	; (8001b5c <USART1_Init+0xfc>)
 8001b32:	f7ff fe9f 	bl	8001874 <LL_USART_Enable>

     /* Polling USART1 initialisation */
     while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8001b36:	bf00      	nop
 8001b38:	4808      	ldr	r0, [pc, #32]	; (8001b5c <USART1_Init+0xfc>)
 8001b3a:	f7ff ff1f 	bl	800197c <LL_USART_IsActiveFlag_TEACK>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f9      	beq.n	8001b38 <USART1_Init+0xd8>
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <USART1_Init+0xfc>)
 8001b46:	f7ff ff2d 	bl	80019a4 <LL_USART_IsActiveFlag_REACK>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f3      	beq.n	8001b38 <USART1_Init+0xd8>
     {
     }
     /* USER CODE BEGIN USART1_Init 2 */

     /* USER CODE END USART1_Init 2 */
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3738      	adds	r7, #56	; 0x38
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40013800 	.word	0x40013800

08001b60 <QV_init>:
* "kernel aware" interrupts.
*
* The interrupt priorities established in QV_init() can be later
* changed by the application-level code.
*/
void QV_init(void) {
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0

#if (__ARM_ARCH != 6)   /*--------- if ARMv7-M and higher... */

    /* SCB_SYSPRI[2]:  SysTick */
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_BASEPRI << 24U));
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <QV_init+0x5c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <QV_init+0x5c>)
 8001b6c:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8001b70:	6013      	str	r3, [r2, #0]

    /* set all 240 possible IRQ priories to QF_BASEPRI... */
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	e00b      	b.n	8001b90 <QV_init+0x30>
        NVIC_IP[n] = (QF_BASEPRI << 24U) | (QF_BASEPRI << 16U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001b80:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001b84:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
 8001b88:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b3b      	cmp	r3, #59	; 0x3b
 8001b94:	d9f0      	bls.n	8001b78 <QV_init+0x18>

#endif                  /*--------- ARMv7-M or higher */

#if (__ARM_FP != 0)     /*--------- if VFP available... */
    /* make sure that the FPU is enabled by seting CP10 & CP11 Full Access */
    SCB_CPACR = (SCB_CPACR | ((3UL << 20U) | (3UL << 22U)));
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <QV_init+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <QV_init+0x60>)
 8001b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba0:	6013      	str	r3, [r2, #0]

    /* FPU automatic state preservation (ASPEN) lazy stacking (LSPEN) */
    FPU_FPCCR = (FPU_FPCCR | (1U << 30U) | (1U << 31U));
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <QV_init+0x64>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <QV_init+0x64>)
 8001ba8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001bac:	6013      	str	r3, [r2, #0]
#endif                  /*--------- VFP available */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed20 	.word	0xe000ed20
 8001bc0:	e000ed88 	.word	0xe000ed88
 8001bc4:	e000ef34 	.word	0xe000ef34

08001bc8 <QHsm_reservedEvt_>:
*/
static inline QState QHsm_reservedEvt_(
    QHsm * const me,
    QStateHandler const state,
    enum QReservedSig const sig)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	71fb      	strb	r3, [r7, #7]
    return (*state)(me, &l_reservedEvt_[sig]);
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <QHsm_reservedEvt_+0x28>)
 8001bdc:	441a      	add	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4611      	mov	r1, r2
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	4798      	blx	r3
 8001be6:	4603      	mov	r3, r0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	08002e7c 	.word	0x08002e7c

08001bf4 <QHsm_ctor>:

/*${QEP::QHsm::ctor} .......................................................*/
/*! @protected @memberof QHsm */
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->vptr      = &vtable;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <QHsm_ctor+0x28>)
 8001c02:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <QHsm_ctor+0x2c>)
 8001c08:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	609a      	str	r2, [r3, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	08002e8c 	.word	0x08002e8c
 8001c20:	08001c25 	.word	0x08001c25

08001c24 <QHsm_top>:

/*${QEP::QHsm::top} ........................................................*/
/*! @protected @memberof QHsm */
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; /* the top state ignores all events */
 8001c2e:	2304      	movs	r3, #4
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <QHsm_init_>:
/*${QEP::QHsm::init_} ......................................................*/
/*! @protected @memberof QHsm */
void QHsm_init_(QHsm * const me,
    void const * const e,
    uint_fast8_t const qs_id)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08e      	sub	sp, #56	; 0x38
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
    }
    #else
    Q_UNUSED_PAR(qs_id);
    #endif

    QStateHandler t = me->state.fun;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34

    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <QHsm_init_+0x2a>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <QHsm_init_+0x2a>
 8001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c60:	4a36      	ldr	r2, [pc, #216]	; (8001d3c <QHsm_init_+0x100>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d003      	beq.n	8001c6e <QHsm_init_+0x32>
 8001c66:	21c8      	movs	r1, #200	; 0xc8
 8001c68:	4835      	ldr	r0, [pc, #212]	; (8001d40 <QHsm_init_+0x104>)
 8001c6a:	f7ff fb81 	bl	8001370 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	4798      	blx	r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
 8001c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d003      	beq.n	8001c8e <QHsm_init_+0x52>
 8001c86:	21d2      	movs	r1, #210	; 0xd2
 8001c88:	482d      	ldr	r0, [pc, #180]	; (8001d40 <QHsm_init_+0x104>)
 8001c8a:	f7ff fb71 	bl	8001370 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 8001c8e:	2300      	movs	r3, #0
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30

        path[0] = me->temp.fun;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	617b      	str	r3, [r7, #20]
        (void)QHsm_reservedEvt_(me, me->temp.fun, Q_EMPTY_SIG);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f7ff ff91 	bl	8001bc8 <QHsm_reservedEvt_>
        while (me->temp.fun != t) {
 8001ca6:	e018      	b.n	8001cda <QHsm_init_+0x9e>
            ++ip;
 8001ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001caa:	3301      	adds	r3, #1
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	dd03      	ble.n	8001cbc <QHsm_init_+0x80>
 8001cb4:	21dc      	movs	r1, #220	; 0xdc
 8001cb6:	4822      	ldr	r0, [pc, #136]	; (8001d40 <QHsm_init_+0x104>)
 8001cb8:	f7ff fb5a 	bl	8001370 <Q_onAssert>
            path[ip] = me->temp.fun;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	3338      	adds	r3, #56	; 0x38
 8001cc6:	443b      	add	r3, r7
 8001cc8:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QHsm_reservedEvt_(me, me->temp.fun, Q_EMPTY_SIG);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff ff77 	bl	8001bc8 <QHsm_reservedEvt_>
        while (me->temp.fun != t) {
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d1e1      	bne.n	8001ca8 <QHsm_init_+0x6c>
        }
        me->temp.fun = path[0];
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QHsm_state_entry_(me, path[ip], qs_id); /* enter path[ip] */
 8001cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	3338      	adds	r3, #56	; 0x38
 8001cf0:	443b      	add	r3, r7
 8001cf2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f9d6 	bl	80020ac <QHsm_state_entry_>
            --ip;
 8001d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d02:	3b01      	subs	r3, #1
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
        } while (ip >= 0);
 8001d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	daee      	bge.n	8001cea <QHsm_init_+0xae>

        t = path[0]; /* current state becomes the new source */
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34

        r = QHsm_reservedEvt_(me, t, Q_INIT_SIG); /* execute initial transition */
 8001d10:	2203      	movs	r2, #3
 8001d12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff ff57 	bl	8001bc8 <QHsm_reservedEvt_>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

    } while (r == Q_RET_TRAN);
 8001d20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d0b2      	beq.n	8001c8e <QHsm_init_+0x52>
        QS_TIME_PRE_();  /* time stamp */
        QS_OBJ_PRE_(me); /* this state machine object */
        QS_FUN_PRE_(t);  /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d2c:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d32:	609a      	str	r2, [r3, #8]
}
 8001d34:	bf00      	nop
 8001d36:	3738      	adds	r7, #56	; 0x38
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	08001c25 	.word	0x08001c25
 8001d40:	08002e74 	.word	0x08002e74

08001d44 <QHsm_dispatch_>:
/*${QEP::QHsm::dispatch_} ..................................................*/
/*! @protected @memberof QHsm */
void QHsm_dispatch_(QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08e      	sub	sp, #56	; 0x38
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qs_id);
    #endif

    QStateHandler t = me->state.fun;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
    QS_CRIT_STAT_

    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <QHsm_dispatch_+0x22>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d004      	beq.n	8001d70 <QHsm_dispatch_+0x2c>
 8001d66:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001d6a:	4859      	ldr	r0, [pc, #356]	; (8001ed0 <QHsm_dispatch_+0x18c>)
 8001d6c:	f7ff fb00 	bl	8001370 <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
        r = (*s)(me, e); /* invoke state handler s */
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	4798      	blx	r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 8001d84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d107      	bne.n	8001d9c <QHsm_dispatch_+0x58>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QHsm_reservedEvt_(me, s, Q_EMPTY_SIG); /* find superstate of s */
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff ff19 	bl	8001bc8 <QHsm_reservedEvt_>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    } while (r == Q_RET_SUPER);
 8001d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0e5      	beq.n	8001d70 <QHsm_dispatch_+0x2c>

    /* regular transition taken? */
    if (r >= Q_RET_TRAN) {
 8001da4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001da8:	2b07      	cmp	r3, #7
 8001daa:	f240 8086 	bls.w	8001eba <QHsm_dispatch_+0x176>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	613b      	str	r3, [r7, #16]
        path[1] = t;
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db6:	617b      	str	r3, [r7, #20]
        path[2] = s;
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	61bb      	str	r3, [r7, #24]

        /* exit current state to transition source s... */
        for (; t != s; t = me->temp.fun) {
 8001dbc:	e00f      	b.n	8001dde <QHsm_dispatch_+0x9a>
            /* exit from t handled? */
            if (QHsm_state_exit_(me, t, qs_id)) {
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 f982 	bl	80020cc <QHsm_state_exit_>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d004      	beq.n	8001dd8 <QHsm_dispatch_+0x94>
                /* find superstate of t */
                (void)QHsm_reservedEvt_(me, t, Q_EMPTY_SIG);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff fef8 	bl	8001bc8 <QHsm_reservedEvt_>
        for (; t != s; t = me->temp.fun) {
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8001dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d1eb      	bne.n	8001dbe <QHsm_dispatch_+0x7a>
            }
        }

        int_fast8_t ip = QHsm_tran_(me, path, qs_id); /* the HSM transition */
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4619      	mov	r1, r3
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f870 	bl	8001ed4 <QHsm_tran_>
 8001df4:	62f8      	str	r0, [r7, #44]	; 0x2c
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        for (; ip >= 0; --ip) {
 8001df6:	e00d      	b.n	8001e14 <QHsm_dispatch_+0xd0>
            QHsm_state_entry_(me, path[ip], qs_id);  /* enter path[ip] */
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	3338      	adds	r3, #56	; 0x38
 8001dfe:	443b      	add	r3, r7
 8001e00:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4619      	mov	r1, r3
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f94f 	bl	80020ac <QHsm_state_entry_>
        for (; ip >= 0; --ip) {
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	3b01      	subs	r3, #1
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	daee      	bge.n	8001df8 <QHsm_dispatch_+0xb4>
        }

        t = path[0];      /* stick the target into register */
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
        me->temp.fun = t; /* update the next state */
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e22:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QHsm_reservedEvt_(me, t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001e24:	e041      	b.n	8001eaa <QHsm_dispatch_+0x166>
                QS_OBJ_PRE_(me); /* this state machine object */
                QS_FUN_PRE_(t);  /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the tran. */
            QS_END_PRE_()

            ip = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[0] = me->temp.fun;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	613b      	str	r3, [r7, #16]

            /* find superstate */
            (void)QHsm_reservedEvt_(me, me->temp.fun, Q_EMPTY_SIG);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2200      	movs	r2, #0
 8001e36:	4619      	mov	r1, r3
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7ff fec5 	bl	8001bc8 <QHsm_reservedEvt_>

            while (me->temp.fun != t) {
 8001e3e:	e011      	b.n	8001e64 <QHsm_dispatch_+0x120>
                ++ip;
 8001e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e42:	3301      	adds	r3, #1
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
                path[ip] = me->temp.fun;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	3338      	adds	r3, #56	; 0x38
 8001e50:	443b      	add	r3, r7
 8001e52:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QHsm_reservedEvt_(me, me->temp.fun, Q_EMPTY_SIG);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff feb2 	bl	8001bc8 <QHsm_reservedEvt_>
            while (me->temp.fun != t) {
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d1e8      	bne.n	8001e40 <QHsm_dispatch_+0xfc>
            }
            me->temp.fun = path[0];
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8001e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	dd04      	ble.n	8001e84 <QHsm_dispatch_+0x140>
 8001e7a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8001e7e:	4814      	ldr	r0, [pc, #80]	; (8001ed0 <QHsm_dispatch_+0x18c>)
 8001e80:	f7ff fa76 	bl	8001370 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QHsm_state_entry_(me, path[ip], qs_id); /* enter path[ip] */
 8001e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	3338      	adds	r3, #56	; 0x38
 8001e8a:	443b      	add	r3, r7
 8001e8c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4619      	mov	r1, r3
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f909 	bl	80020ac <QHsm_state_entry_>
                --ip;
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
            } while (ip >= 0);
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	daee      	bge.n	8001e84 <QHsm_dispatch_+0x140>

            t = path[0]; /* current state becomes the new source */
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
        while (QHsm_reservedEvt_(me, t, Q_INIT_SIG) == Q_RET_TRAN) {
 8001eaa:	2203      	movs	r2, #3
 8001eac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff fe8a 	bl	8001bc8 <QHsm_reservedEvt_>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d0b5      	beq.n	8001e26 <QHsm_dispatch_+0xe2>
        QS_END_PRE_()

    }
    #endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ebe:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ec4:	609a      	str	r2, [r3, #8]
}
 8001ec6:	bf00      	nop
 8001ec8:	3738      	adds	r7, #56	; 0x38
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	08002e74 	.word	0x08002e74

08001ed4 <QHsm_tran_>:
/*${QEP::QHsm::tran_} ......................................................*/
/*! @private @memberof QHsm */
int_fast8_t QHsm_tran_(QHsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qs_id)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qs_id);
    #endif

    int_fast8_t ip = -1; /* transition entry path index */
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	617b      	str	r3, [r7, #20]

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d107      	bne.n	8001f0a <QHsm_tran_+0x36>
        (void)QHsm_state_exit_(me, s, qs_id); /* exit source */
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6979      	ldr	r1, [r7, #20]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f8e4 	bl	80020cc <QHsm_state_exit_>
        ip = 0; /* enter the target */
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
 8001f08:	e0c9      	b.n	800209e <QHsm_tran_+0x1ca>
    }
    else {
        /* find superstate of target */
        (void)QHsm_reservedEvt_(me, t, Q_EMPTY_SIG);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	6a39      	ldr	r1, [r7, #32]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff fe5a 	bl	8001bc8 <QHsm_reservedEvt_>

        t = me->temp.fun;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	623b      	str	r3, [r7, #32]

        /* (b) check source==target->super... */
        if (s == t) {
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d102      	bne.n	8001f28 <QHsm_tran_+0x54>
            ip = 0; /* enter the target */
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
 8001f26:	e0ba      	b.n	800209e <QHsm_tran_+0x1ca>
        }
        else {
            /* find superstate of src */
            (void)QHsm_reservedEvt_(me, s, Q_EMPTY_SIG);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6979      	ldr	r1, [r7, #20]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff fe4b 	bl	8001bc8 <QHsm_reservedEvt_>

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	6a3a      	ldr	r2, [r7, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d107      	bne.n	8001f4c <QHsm_tran_+0x78>
                (void)QHsm_state_exit_(me, s, qs_id); /* exit source */
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6979      	ldr	r1, [r7, #20]
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f8c3 	bl	80020cc <QHsm_state_exit_>
                ip = 0; /* enter the target */
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4a:	e0a8      	b.n	800209e <QHsm_tran_+0x1ca>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d105      	bne.n	8001f64 <QHsm_tran_+0x90>
                    (void)QHsm_state_exit_(me, s, qs_id); /* exit source */
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6979      	ldr	r1, [r7, #20]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f8b5 	bl	80020cc <QHsm_state_exit_>
 8001f62:	e09c      	b.n	800209e <QHsm_tran_+0x1ca>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
                    ip = 1; /* enter target and its superstate */
 8001f68:	2301      	movs	r3, #1
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      /* save the superstate of target */
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	623b      	str	r3, [r7, #32]

                    /* find target->super->super... */
                    QState r = QHsm_reservedEvt_(me, path[1], Q_EMPTY_SIG);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2200      	movs	r2, #0
 8001f82:	4619      	mov	r1, r3
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff fe1f 	bl	8001bc8 <QHsm_reservedEvt_>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8001f8e:	e027      	b.n	8001fe0 <QHsm_tran_+0x10c>
                        ++ip;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	3301      	adds	r3, #1
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; /* store the entry path */
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	6892      	ldr	r2, [r2, #8]
 8001fa2:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d10f      	bne.n	8001fce <QHsm_tran_+0xfa>
                            iq = 1; /* indicate that LCA found */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	61fb      	str	r3, [r7, #28]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	dd04      	ble.n	8001fc2 <QHsm_tran_+0xee>
 8001fb8:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001fbc:	483a      	ldr	r0, [pc, #232]	; (80020a8 <QHsm_tran_+0x1d4>)
 8001fbe:	f7ff f9d7 	bl	8001370 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; /* terminate loop */
 8001fc8:	2303      	movs	r3, #3
 8001fca:	76fb      	strb	r3, [r7, #27]
 8001fcc:	e008      	b.n	8001fe0 <QHsm_tran_+0x10c>
                        }
                        /* it is not the source, keep going up */
                        else {
                            r = QHsm_reservedEvt_(me, me->temp.fun,
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff fdf6 	bl	8001bc8 <QHsm_reservedEvt_>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8001fe0:	7efb      	ldrb	r3, [r7, #27]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0d4      	beq.n	8001f90 <QHsm_tran_+0xbc>
                                                  Q_EMPTY_SIG);
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d158      	bne.n	800209e <QHsm_tran_+0x1ca>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	dd04      	ble.n	8001ffc <QHsm_tran_+0x128>
 8001ff2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001ff6:	482c      	ldr	r0, [pc, #176]	; (80020a8 <QHsm_tran_+0x1d4>)
 8001ff8:	f7ff f9ba 	bl	8001370 <Q_onAssert>

                        /* exit source */
                        (void)QHsm_state_exit_(me, s, qs_id);
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6979      	ldr	r1, [r7, #20]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f863 	bl	80020cc <QHsm_state_exit_>

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; /* LCA NOT found */
 800200a:	2304      	movs	r3, #4
 800200c:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	4413      	add	r3, r2
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	429a      	cmp	r2, r3
 800201c:	d108      	bne.n	8002030 <QHsm_tran_+0x15c>
                                r = Q_RET_HANDLED; /* LCA found */
 800201e:	2303      	movs	r3, #3
 8002020:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; /* do not enter LCA */
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b01      	subs	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; /* cause termintion of the loop */
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e002      	b.n	8002036 <QHsm_tran_+0x162>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3b01      	subs	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	2b00      	cmp	r3, #0
 800203a:	dae8      	bge.n	800200e <QHsm_tran_+0x13a>

                        /* LCA not found? */
                        if (r != Q_RET_HANDLED) {
 800203c:	7efb      	ldrb	r3, [r7, #27]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d02d      	beq.n	800209e <QHsm_tran_+0x1ca>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = Q_RET_IGNORED; /* keep looping */
 8002042:	2304      	movs	r3, #4
 8002044:	76fb      	strb	r3, [r7, #27]
                            do {
                                /* exit from t handled? */
                                if (QHsm_state_exit_(me, t, qs_id)) {
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6a39      	ldr	r1, [r7, #32]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f83e 	bl	80020cc <QHsm_state_exit_>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <QHsm_tran_+0x18c>
                                    /* find superstate of t */
                                    (void)QHsm_reservedEvt_(me, t, Q_EMPTY_SIG);
 8002056:	2200      	movs	r2, #0
 8002058:	6a39      	ldr	r1, [r7, #32]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fdb4 	bl	8001bc8 <QHsm_reservedEvt_>
                                }
                                t = me->temp.fun; /* set to super of t */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	623b      	str	r3, [r7, #32]
                                iq = ip;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	61fb      	str	r3, [r7, #28]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	4413      	add	r3, r2
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6a3a      	ldr	r2, [r7, #32]
 8002076:	429a      	cmp	r2, r3
 8002078:	d108      	bne.n	800208c <QHsm_tran_+0x1b8>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b01      	subs	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1; /* break out of inner loop */
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	61fb      	str	r3, [r7, #28]
                                        /* break out of outer loop */
                                        r = Q_RET_HANDLED;
 8002086:	2303      	movs	r3, #3
 8002088:	76fb      	strb	r3, [r7, #27]
 800208a:	e002      	b.n	8002092 <QHsm_tran_+0x1be>
                                    }
                                    else {
                                        --iq;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3b01      	subs	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2b00      	cmp	r3, #0
 8002096:	dae8      	bge.n	800206a <QHsm_tran_+0x196>
                            } while (r != Q_RET_HANDLED);
 8002098:	7efb      	ldrb	r3, [r7, #27]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d1d3      	bne.n	8002046 <QHsm_tran_+0x172>
                    }
                }
            }
        }
    }
    return ip;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3728      	adds	r7, #40	; 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	08002e74 	.word	0x08002e74

080020ac <QHsm_state_entry_>:
/*${QEP::QHsm::state_entry_} ...............................................*/
/*! @private @memberof QHsm */
void QHsm_state_entry_(QHsm * const me,
    QStateHandler const state,
    uint_fast8_t const qs_id)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
            QS_FUN_PRE_(state);
        QS_END_PRE_()
    }
    #else
    Q_UNUSED_PAR(qs_id);
    (void)(*state)(me, &l_reservedEvt_[Q_ENTRY_SIG]);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4903      	ldr	r1, [pc, #12]	; (80020c8 <QHsm_state_entry_+0x1c>)
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	4798      	blx	r3
    #endif /* Q_SPY */
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	08002e80 	.word	0x08002e80

080020cc <QHsm_state_exit_>:
/*${QEP::QHsm::state_exit_} ................................................*/
/*! @private @memberof QHsm */
bool QHsm_state_exit_(QHsm * const me,
    QStateHandler const state,
    uint_fast8_t const qs_id)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
        isHandled = false;
    }
    return isHandled;
    #else
    Q_UNUSED_PAR(qs_id);
    return (*state)(me, &l_reservedEvt_[Q_EXIT_SIG]) == Q_RET_HANDLED;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4906      	ldr	r1, [pc, #24]	; (80020f4 <QHsm_state_exit_+0x28>)
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	4798      	blx	r3
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	bf0c      	ite	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	2300      	movne	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
    #endif /* Q_SPY */
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	08002e84 	.word	0x08002e84

080020f8 <QPSet_insert>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
        me->bits = (me->bits | (1U << (n - 1U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3b01      	subs	r3, #1
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <QEvt_refCtr_inc_>:
* @private @memberof QEvt
*
* @trace
* @tr{PQP11_8}
*/
static inline void QEvt_refCtr_inc_(QEvt const *me) {
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
    ++((QEvt *)me)->refCtr_;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	78db      	ldrb	r3, [r3, #3]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3301      	adds	r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	70da      	strb	r2, [r3, #3]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <QActive_post_>:
/*! @private @memberof QActive */
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    #endif

    Q_REQUIRE_ID(100, e != (QEvt *)0);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d103      	bne.n	8002160 <QActive_post_+0x1c>
 8002158:	2164      	movs	r1, #100	; 0x64
 800215a:	483b      	ldr	r0, [pc, #236]	; (8002248 <QActive_post_+0x104>)
 800215c:	f7ff f908 	bl	8001370 <Q_onAssert>

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002160:	233f      	movs	r3, #63	; 0x3f
 8002162:	b672      	cpsid	i
 8002164:	f383 8811 	msr	BASEPRI, r3
 8002168:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into temporary */
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	7ddb      	ldrb	r3, [r3, #23]
 800216e:	75bb      	strb	r3, [r7, #22]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002176:	4293      	cmp	r3, r2
 8002178:	d10e      	bne.n	8002198 <QActive_post_+0x54>
        if (nFree > 0U) {
 800217a:	7dbb      	ldrb	r3, [r7, #22]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <QActive_post_+0x42>
            status = true; /* can post */
 8002180:	2301      	movs	r3, #1
 8002182:	75fb      	strb	r3, [r7, #23]
 8002184:	e012      	b.n	80021ac <QActive_post_+0x68>
        }
        else {
            status = false; /* cannot post */
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_CRIT_(190); /* must be able to post the event */
 800218a:	2300      	movs	r3, #0
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	21be      	movs	r1, #190	; 0xbe
 8002192:	482d      	ldr	r0, [pc, #180]	; (8002248 <QActive_post_+0x104>)
 8002194:	f7ff f8ec 	bl	8001370 <Q_onAssert>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	7dba      	ldrb	r2, [r7, #22]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d902      	bls.n	80021a8 <QActive_post_+0x64>
        status = true; /* can post */
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
 80021a6:	e001      	b.n	80021ac <QActive_post_+0x68>
    }
    else {
        status = false; /* cannot post, but don't assert */
 80021a8:	2300      	movs	r3, #0
 80021aa:	75fb      	strb	r3, [r7, #23]
    }

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	789b      	ldrb	r3, [r3, #2]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <QActive_post_+0x76>
        QEvt_refCtr_inc_(e); /* increment the reference counter */
 80021b4:	68b8      	ldr	r0, [r7, #8]
 80021b6:	f7ff ffb4 	bl	8002122 <QEvt_refCtr_inc_>
    }

    if (status) { /* can post the event? */
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d038      	beq.n	8002232 <QActive_post_+0xee>

        --nFree; /* one free entry just used up */
 80021c0:	7dbb      	ldrb	r3, [r7, #22]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	75bb      	strb	r3, [r7, #22]
        me->eQueue.nFree = nFree; /* update the original */
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	7dba      	ldrb	r2, [r7, #22]
 80021ca:	75da      	strb	r2, [r3, #23]
        if (me->eQueue.nMin > nFree) {
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	7e1b      	ldrb	r3, [r3, #24]
 80021d0:	7dba      	ldrb	r2, [r7, #22]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d202      	bcs.n	80021dc <QActive_post_+0x98>
            me->eQueue.nMin = nFree; /* increase minimum so far */
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	7dba      	ldrb	r2, [r7, #22]
 80021da:	761a      	strb	r2, [r3, #24]
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        /* empty queue? */
        if (me->eQueue.frontEvt == (QEvt *)0) {
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <QActive_post_+0xb4>
            me->eQueue.frontEvt = e;    /* deliver event directly */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	60da      	str	r2, [r3, #12]
            QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	7f1b      	ldrb	r3, [r3, #28]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4816      	ldr	r0, [pc, #88]	; (800224c <QActive_post_+0x108>)
 80021f2:	f7ff ff81 	bl	80020f8 <QPSet_insert>
 80021f6:	e018      	b.n	800222a <QActive_post_+0xe6>
        }
        /* queue is not empty, insert event into the ring-buffer */
        else {
            /* insert event into the ring buffer (FIFO) */
            me->eQueue.ring[me->eQueue.head] = e;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	7d5b      	ldrb	r3, [r3, #21]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { /* need to wrap head? */
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	7d5b      	ldrb	r3, [r3, #21]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <QActive_post_+0xd8>
                me->eQueue.head = me->eQueue.end;   /* wrap around */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	7d1a      	ldrb	r2, [r3, #20]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	755a      	strb	r2, [r3, #21]
            }
            --me->eQueue.head; /* advance the head (counter clockwise) */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	7d5b      	ldrb	r3, [r3, #21]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b2da      	uxtb	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	755a      	strb	r2, [r3, #21]
        }

        QF_CRIT_X_();
 800222a:	2300      	movs	r3, #0
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	e005      	b.n	800223e <QActive_post_+0xfa>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        QF_CRIT_X_();
 8002232:	2300      	movs	r3, #0
 8002234:	f383 8811 	msr	BASEPRI, r3

    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e); /* recycle the event to avoid a leak */
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f000 f9a5 	bl	8002588 <QF_gc>
    #endif
    }

    return status;
 800223e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	08002e94 	.word	0x08002e94
 800224c:	200001a4 	.word	0x200001a4

08002250 <QActive_postLIFO_>:

/*${QF::QActive::postLIFO_} ................................................*/
/*! @private @memberof QActive */
void QActive_postLIFO_(QActive * const me,
    QEvt const * const e)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT_
    QF_CRIT_E_();
 800225a:	233f      	movs	r3, #63	; 0x3f
 800225c:	b672      	cpsid	i
 800225e:	f383 8811 	msr	BASEPRI, r3
 8002262:	b662      	cpsie	i
    QEQueueCtr nFree = me->eQueue.nFree; /* get volatile into temporary */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7ddb      	ldrb	r3, [r3, #23]
 8002268:	73fb      	strb	r3, [r7, #15]
    QS_TEST_PROBE_DEF(&QActive_postLIFO_)
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    Q_REQUIRE_CRIT_(200, nFree != 0U);
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d106      	bne.n	800227e <QActive_postLIFO_+0x2e>
 8002270:	2300      	movs	r3, #0
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	21c8      	movs	r1, #200	; 0xc8
 8002278:	4824      	ldr	r0, [pc, #144]	; (800230c <QActive_postLIFO_+0xbc>)
 800227a:	f7ff f879 	bl	8001370 <Q_onAssert>

    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	789b      	ldrb	r3, [r3, #2]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <QActive_postLIFO_+0x3c>
        QEvt_refCtr_inc_(e); /* increment the reference counter */
 8002286:	6838      	ldr	r0, [r7, #0]
 8002288:	f7ff ff4b 	bl	8002122 <QEvt_refCtr_inc_>
    }

    --nFree; /* one free entry just used up */
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	3b01      	subs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
    me->eQueue.nFree = nFree; /* update the original */
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	75da      	strb	r2, [r3, #23]
    if (me->eQueue.nMin > nFree) {
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7e1b      	ldrb	r3, [r3, #24]
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d202      	bcs.n	80022a8 <QActive_postLIFO_+0x58>
        me->eQueue.nMin = nFree; /* update minimum so far */
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	761a      	strb	r2, [r3, #24]
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost((QActive *)0, me, e, true);
        }
    #endif

    QEvt const * const frontEvt  = me->eQueue.frontEvt;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
    me->eQueue.frontEvt = e; /* deliver the event directly to the front */
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	60da      	str	r2, [r3, #12]

    /* was the queue empty? */
    if (frontEvt == (QEvt *)0) {
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <QActive_postLIFO_+0x78>
        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7f1b      	ldrb	r3, [r3, #28]
 80022be:	4619      	mov	r1, r3
 80022c0:	4813      	ldr	r0, [pc, #76]	; (8002310 <QActive_postLIFO_+0xc0>)
 80022c2:	f7ff ff19 	bl	80020f8 <QPSet_insert>
 80022c6:	e019      	b.n	80022fc <QActive_postLIFO_+0xac>
    }
    /* queue was not empty, leave the event in the ring-buffer */
    else {
        ++me->eQueue.tail;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7d9b      	ldrb	r3, [r3, #22]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	759a      	strb	r2, [r3, #22]
        /* need to wrap the tail? */
        if (me->eQueue.tail == me->eQueue.end) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7d9b      	ldrb	r3, [r3, #22]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7d1b      	ldrb	r3, [r3, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d102      	bne.n	80022ea <QActive_postLIFO_+0x9a>
            me->eQueue.tail = 0U; /* wrap around */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	759a      	strb	r2, [r3, #22]
        }

        me->eQueue.ring[me->eQueue.tail] = frontEvt;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7d9b      	ldrb	r3, [r3, #22]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	601a      	str	r2, [r3, #0]
    }
    QF_CRIT_X_();
 80022fc:	2300      	movs	r3, #0
 80022fe:	f383 8811 	msr	BASEPRI, r3
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	08002e94 	.word	0x08002e94
 8002310:	200001a4 	.word	0x200001a4

08002314 <QActive_get_>:
/*$enddef${QF::QActive::postLIFO_} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QF::QActive::get_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::get_} .....................................................*/
/*! @private @memberof QActive */
QEvt const * QActive_get_(QActive * const me) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT_
    QF_CRIT_E_();
 800231c:	233f      	movs	r3, #63	; 0x3f
 800231e:	b672      	cpsid	i
 8002320:	f383 8811 	msr	BASEPRI, r3
 8002324:	b662      	cpsie	i
    QACTIVE_EQUEUE_WAIT_(me);  /* wait for event to arrive directly */
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d103      	bne.n	8002336 <QActive_get_+0x22>
 800232e:	2100      	movs	r1, #0
 8002330:	4823      	ldr	r0, [pc, #140]	; (80023c0 <QActive_get_+0xac>)
 8002332:	f7ff f81d 	bl	8001370 <Q_onAssert>

    /* always remove event from the front */
    QEvt const * const e = me->eQueue.frontEvt;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; /* get volatile into tmp */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7ddb      	ldrb	r3, [r3, #23]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; /* update the number of free */
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7afa      	ldrb	r2, [r7, #11]
 800234a:	75da      	strb	r2, [r3, #23]

    /* any events in the ring buffer? */
    if (nFree <= me->eQueue.end) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7d1b      	ldrb	r3, [r3, #20]
 8002350:	7afa      	ldrb	r2, [r7, #11]
 8002352:	429a      	cmp	r2, r3
 8002354:	d81a      	bhi.n	800238c <QActive_get_+0x78>

        /* remove event from the tail */
        me->eQueue.frontEvt = me->eQueue.ring[me->eQueue.tail];
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7d9b      	ldrb	r3, [r3, #22]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60da      	str	r2, [r3, #12]
        if (me->eQueue.tail == 0U) { /* need to wrap the tail? */
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7d9b      	ldrb	r3, [r3, #22]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d103      	bne.n	800237c <QActive_get_+0x68>
            me->eQueue.tail = me->eQueue.end;   /* wrap around */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7d1a      	ldrb	r2, [r3, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	759a      	strb	r2, [r3, #22]
        }
        --me->eQueue.tail;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7d9b      	ldrb	r3, [r3, #22]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b2da      	uxtb	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	759a      	strb	r2, [r3, #22]
 800238a:	e010      	b.n	80023ae <QActive_get_+0x9a>
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_EQC_PRE_(nFree);  /* # free entries */
        QS_END_NOCRIT_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; /* queue becomes empty */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]

        /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT_CRIT_(310, nFree == (me->eQueue.end + 1U));
 8002392:	7afa      	ldrb	r2, [r7, #11]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7d1b      	ldrb	r3, [r3, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	429a      	cmp	r2, r3
 800239c:	d007      	beq.n	80023ae <QActive_get_+0x9a>
 800239e:	2300      	movs	r3, #0
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f44f 719b 	mov.w	r1, #310	; 0x136
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <QActive_get_+0xac>)
 80023aa:	f7fe ffe1 	bl	8001370 <Q_onAssert>
            QS_SIG_PRE_(e->sig); /* the signal of this event */
            QS_OBJ_PRE_(me);     /* this active object */
            QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
        QS_END_NOCRIT_PRE_()
    }
    QF_CRIT_X_();
 80023ae:	2300      	movs	r3, #0
 80023b0:	f383 8811 	msr	BASEPRI, r3
    return e;
 80023b4:	68fb      	ldr	r3, [r7, #12]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	08002e94 	.word	0x08002e94

080023c4 <QTicker_ctor>:

/*${QF::QTicker::ctor} .....................................................*/
/*! @public @memberof QTicker */
void QTicker_ctor(QTicker * const me,
    uint_fast8_t const tickRate)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
        },
        &QActive_start_,
        &QTicker_post_,
        &QTicker_postLIFO_
    };
    QActive_ctor(&me->super, Q_STATE_CAST(0)); /* superclass' ctor */
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f9fa 	bl	80027cc <QActive_ctor>
    me->super.super.vptr = &vtable.super; /* hook the vptr */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <QTicker_ctor+0x2c>)
 80023dc:	601a      	str	r2, [r3, #0]

    /* reuse eQueue.head for tick-rate */
    me->super.eQueue.head = (QEQueueCtr)tickRate;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	755a      	strb	r2, [r3, #21]
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	08002e9c 	.word	0x08002e9c

080023f4 <QTicker_init_>:
/*! @private @memberof QTicker */
void QTicker_init_(
    QHsm * const me,
    void const * const par,
    uint_fast8_t const qs_id)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(par);
    Q_UNUSED_PAR(qs_id);

    QTICKER_CAST_(me)->eQueue.tail = 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	759a      	strb	r2, [r3, #22]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <QTicker_dispatch_>:
/*! @private @memberof QTicker */
void QTicker_dispatch_(
    QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(e);
    Q_UNUSED_PAR(qs_id);

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800241e:	233f      	movs	r3, #63	; 0x3f
 8002420:	b672      	cpsid	i
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	b662      	cpsie	i
    QEQueueCtr nTicks = QTICKER_CAST_(me)->eQueue.tail; /* save # of ticks */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	7d9b      	ldrb	r3, [r3, #22]
 800242c:	75fb      	strb	r3, [r7, #23]
    QTICKER_CAST_(me)->eQueue.tail = 0U; /* clear # ticks */
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	759a      	strb	r2, [r3, #22]
    QF_CRIT_X_();
 8002434:	2300      	movs	r3, #0
 8002436:	f383 8811 	msr	BASEPRI, r3

    for (; nTicks > 0U; --nTicks) {
 800243a:	e009      	b.n	8002450 <QTicker_dispatch_+0x3e>
        QTimeEvt_tick_((uint_fast8_t)QTICKER_CAST_(me)->eQueue.head, me);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	7d5b      	ldrb	r3, [r3, #21]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	68f9      	ldr	r1, [r7, #12]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fb13 	bl	8002a70 <QTimeEvt_tick_>
    for (; nTicks > 0U; --nTicks) {
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	3b01      	subs	r3, #1
 800244e:	75fb      	strb	r3, [r7, #23]
 8002450:	7dfb      	ldrb	r3, [r7, #23]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f2      	bne.n	800243c <QTicker_dispatch_+0x2a>
    }
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <QTicker_post_>:
bool QTicker_post_(
    QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    #endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 800246e:	233f      	movs	r3, #63	; 0x3f
 8002470:	b672      	cpsid	i
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	b662      	cpsie	i
    if (me->eQueue.frontEvt == (QEvt *)0) {
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10f      	bne.n	80024a0 <QTicker_post_+0x40>

        static QEvt const tickEvt = { 0U, 0U, 0U };
        me->eQueue.frontEvt = &tickEvt; /* deliver event directly */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <QTicker_post_+0x60>)
 8002484:	60da      	str	r2, [r3, #12]
        --me->eQueue.nFree; /* one less free event */
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	7ddb      	ldrb	r3, [r3, #23]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b2da      	uxtb	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	75da      	strb	r2, [r3, #23]

        QACTIVE_EQUEUE_SIGNAL_(me); /* signal the event queue */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	7f1b      	ldrb	r3, [r3, #28]
 8002498:	4619      	mov	r1, r3
 800249a:	480a      	ldr	r0, [pc, #40]	; (80024c4 <QTicker_post_+0x64>)
 800249c:	f7ff fe2c 	bl	80020f8 <QPSet_insert>
    }

    ++me->eQueue.tail; /* account for one more tick event */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	7d9b      	ldrb	r3, [r3, #22]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	759a      	strb	r2, [r3, #22]
        QS_2U8_PRE_(0U, 0U); /* pool Id & refCtr of the evt */
        QS_EQC_PRE_(0U);     /* number of free entries */
        QS_EQC_PRE_(0U);     /* min number of free entries */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 80024ae:	2300      	movs	r3, #0
 80024b0:	f383 8811 	msr	BASEPRI, r3

    return true; /* the event is always posted correctly */
 80024b4:	2301      	movs	r3, #1
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	08002eb0 	.word	0x08002eb0
 80024c4:	200001a4 	.word	0x200001a4

080024c8 <QTicker_postLIFO_>:
/*${QF::QTicker::postLIFO_} ................................................*/
/*! @private @memberof QTicker */
void QTicker_postLIFO_(
    QActive * const me,
    QEvt const * const e)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);

    Q_ERROR_ID(900);
 80024d2:	f44f 7161 	mov.w	r1, #900	; 0x384
 80024d6:	4801      	ldr	r0, [pc, #4]	; (80024dc <QTicker_postLIFO_+0x14>)
 80024d8:	f7fe ff4a 	bl	8001370 <Q_onAssert>
 80024dc:	08002e94 	.word	0x08002e94

080024e0 <QEvt_refCtr_dec_>:
* @private @memberof QEvt
*
* @trace
* @tr{PQP11_8}
*/
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
    --((QEvt *)me)->refCtr_;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	78db      	ldrb	r3, [r3, #3]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	70da      	strb	r2, [r3, #3]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <QF_poolInit>:
/*! @static @public @memberof QF */
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
    /*! @pre cannot exceed the number of available memory pools */
    Q_REQUIRE_ID(200, QF_maxPool_ < QF_MAX_EPOOL);
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <QF_poolInit+0x78>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d903      	bls.n	8002520 <QF_poolInit+0x1c>
 8002518:	21c8      	movs	r1, #200	; 0xc8
 800251a:	4819      	ldr	r0, [pc, #100]	; (8002580 <QF_poolInit+0x7c>)
 800251c:	f7fe ff28 	bl	8001370 <Q_onAssert>

    /*! @pre please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE_ID(201, (QF_maxPool_ == 0U)
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <QF_poolInit+0x78>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d012      	beq.n	800254e <QF_poolInit+0x4a>
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <QF_poolInit+0x78>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	1e5a      	subs	r2, r3, #1
 800252e:	4915      	ldr	r1, [pc, #84]	; (8002584 <QF_poolInit+0x80>)
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	330c      	adds	r3, #12
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4293      	cmp	r3, r2
 8002544:	d803      	bhi.n	800254e <QF_poolInit+0x4a>
 8002546:	21c9      	movs	r1, #201	; 0xc9
 8002548:	480d      	ldr	r0, [pc, #52]	; (8002580 <QF_poolInit+0x7c>)
 800254a:	f7fe ff11 	bl	8001370 <Q_onAssert>
        || (QF_EPOOL_EVENT_SIZE_(QF_ePool_[QF_maxPool_ - 1U])
            < evtSize));

    /* perform the platform-dependent initialization of the pool */
    QF_EPOOL_INIT_(QF_ePool_[QF_maxPool_], poolSto, poolSize, evtSize);
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <QF_poolInit+0x78>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <QF_poolInit+0x80>)
 800255c:	1898      	adds	r0, r3, r2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	68f9      	ldr	r1, [r7, #12]
 8002564:	f000 f850 	bl	8002608 <QMPool_init>
    ++QF_maxPool_; /* one more pool */
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <QF_poolInit+0x78>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	4a03      	ldr	r2, [pc, #12]	; (800257c <QF_poolInit+0x78>)
 8002570:	6013      	str	r3, [r2, #0]
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)(((uint8_t)'0' + QF_maxPool_) & 0x7FU);
        QS_obj_dict_pre_(&QF_ePool_[QF_maxPool_ - 1U], (char const *)obj_name);
    }
    #endif /* Q_SPY*/
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200000d8 	.word	0x200000d8
 8002580:	08002eb4 	.word	0x08002eb4
 8002584:	200000dc 	.word	0x200000dc

08002588 <QF_gc>:
    return e; /* can't be NULL if we can't tolerate failed allocation */
}

/*${QF::QF-dyn::gc} ........................................................*/
/*! @static @public @memberof QF */
void QF_gc(QEvt const * const e) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    /* is it a dynamic event? */
    if (e->poolId_ != 0U) {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	789b      	ldrb	r3, [r3, #2]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d02d      	beq.n	80025f4 <QF_gc+0x6c>
        QF_CRIT_STAT_
        QF_CRIT_E_();
 8002598:	233f      	movs	r3, #63	; 0x3f
 800259a:	b672      	cpsid	i
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	b662      	cpsie	i

        /* isn't this the last reference? */
        if (e->refCtr_ > 1U) {
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	78db      	ldrb	r3, [r3, #3]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d906      	bls.n	80025ba <QF_gc+0x32>
                QS_TIME_PRE_();         /* timestamp */
                QS_SIG_PRE_(e->sig);    /* the signal of the event */
                QS_2U8_PRE_(e->poolId_, e->refCtr_); /* pool Id & ref Count */
            QS_END_NOCRIT_PRE_()

            QEvt_refCtr_dec_(e); /* decrement the ref counter */
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff97 	bl	80024e0 <QEvt_refCtr_dec_>

            QF_CRIT_X_();
 80025b2:	2300      	movs	r3, #0
 80025b4:	f383 8811 	msr	BASEPRI, r3
    #else
            QF_EPOOL_PUT_(QF_ePool_[idx], (QEvt *)e, 0U);
    #endif
        }
    }
}
 80025b8:	e01c      	b.n	80025f4 <QF_gc+0x6c>
            uint_fast8_t const idx = (uint_fast8_t)e->poolId_ - 1U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	789b      	ldrb	r3, [r3, #2]
 80025be:	3b01      	subs	r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
            QF_CRIT_X_();
 80025c2:	2300      	movs	r3, #0
 80025c4:	f383 8811 	msr	BASEPRI, r3
            Q_ASSERT_ID(410, idx < QF_maxPool_);
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <QF_gc+0x74>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d304      	bcc.n	80025dc <QF_gc+0x54>
 80025d2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80025d6:	480a      	ldr	r0, [pc, #40]	; (8002600 <QF_gc+0x78>)
 80025d8:	f7fe feca 	bl	8001370 <Q_onAssert>
            QF_EPOOL_PUT_(QF_ePool_[idx], (QEvt *)e, 0U);
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <QF_gc+0x7c>)
 80025e8:	4413      	add	r3, r2
 80025ea:	2200      	movs	r2, #0
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f87c 	bl	80026ec <QMPool_put>
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200000d8 	.word	0x200000d8
 8002600:	08002eb4 	.word	0x08002eb4
 8002604:	200000dc 	.word	0x200000dc

08002608 <QMPool_init>:
/*! @public @memberof QMPool */
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t poolSize,
    uint_fast16_t blockSize)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
    Q_REQUIRE_ID(100, (poolSto != (void *)0)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <QMPool_init+0x22>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d903      	bls.n	800262a <QMPool_init+0x22>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f113 0f05 	cmn.w	r3, #5
 8002628:	d903      	bls.n	8002632 <QMPool_init+0x2a>
 800262a:	2164      	movs	r1, #100	; 0x64
 800262c:	482e      	ldr	r0, [pc, #184]	; (80026e8 <QMPool_init+0xe0>)
 800262e:	f7fe fe9f 	bl	8001370 <Q_onAssert>
            && (poolSize >= (uint_fast32_t)sizeof(QFreeBlock))
            && ((uint_fast16_t)(blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = poolSto;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	609a      	str	r2, [r3, #8]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2204      	movs	r2, #4
 800263c:	819a      	strh	r2, [r3, #12]

    /* #free blocks that fit in one memory block */
    uint_fast16_t nblocks = 1U;
 800263e:	2301      	movs	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8002642:	e008      	b.n	8002656 <QMPool_init+0x4e>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	899b      	ldrh	r3, [r3, #12]
 8002648:	3304      	adds	r3, #4
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	899a      	ldrh	r2, [r3, #12]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	429a      	cmp	r2, r3
 8002660:	d3f0      	bcc.n	8002644 <QMPool_init+0x3c>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	899b      	ldrh	r3, [r3, #12]
 8002666:	603b      	str	r3, [r7, #0]

    /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT_ID(110, poolSize >= blockSize);
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d203      	bcs.n	8002678 <QMPool_init+0x70>
 8002670:	216e      	movs	r1, #110	; 0x6e
 8002672:	481d      	ldr	r0, [pc, #116]	; (80026e8 <QMPool_init+0xe0>)
 8002674:	f7fe fe7c 	bl	8001370 <Q_onAssert>

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	607b      	str	r3, [r7, #4]
    me->nTot  = 1U; /* the last block already in the pool */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	81da      	strh	r2, [r3, #14]

    /* start at the head of the free list */
    QFreeBlock *fb = (QFreeBlock *)me->free_head;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	613b      	str	r3, [r7, #16]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
 800268c:	e012      	b.n	80026b4 <QMPool_init+0xac>
        fb->next = &fb[nblocks]; /* point next link to next block */
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	441a      	add	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	607b      	str	r3, [r7, #4]
        ++me->nTot;              /* increment the number of blocks so far */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	89db      	ldrh	r3, [r3, #14]
 80026ac:	3301      	adds	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	81da      	strh	r2, [r3, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d2e8      	bcs.n	800268e <QMPool_init+0x86>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	89da      	ldrh	r2, [r3, #14]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	89da      	ldrh	r2, [r3, #14]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	825a      	strh	r2, [r3, #18]
    me->start = poolSto;         /* the original start this pool buffer */
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	601a      	str	r2, [r3, #0]
    me->end   = fb;              /* the last block in this pool */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	605a      	str	r2, [r3, #4]
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	08002ebc 	.word	0x08002ebc

080026ec <QMPool_put>:
/*${QF::QMPool::put} .......................................................*/
/*! @public @memberof QMPool */
void QMPool_put(QMPool * const me,
    void * const b,
    uint_fast8_t const qs_id)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qs_id);
    #endif

    Q_REQUIRE_ID(200, (me->nFree < me->nTot)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8a1b      	ldrh	r3, [r3, #16]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	89db      	ldrh	r3, [r3, #14]
 8002702:	429a      	cmp	r2, r3
 8002704:	d209      	bcs.n	800271a <QMPool_put+0x2e>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	429a      	cmp	r2, r3
 800270e:	d304      	bcc.n	800271a <QMPool_put+0x2e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	429a      	cmp	r2, r3
 8002718:	d903      	bls.n	8002722 <QMPool_put+0x36>
 800271a:	21c8      	movs	r1, #200	; 0xc8
 800271c:	480e      	ldr	r0, [pc, #56]	; (8002758 <QMPool_put+0x6c>)
 800271e:	f7fe fe27 	bl	8001370 <Q_onAssert>
                      && (me->start <= b) && (b <= me->end));

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002722:	233f      	movs	r3, #63	; 0x3f
 8002724:	b672      	cpsid	i
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	b662      	cpsie	i
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	601a      	str	r2, [r3, #0]
    me->free_head = b;      /* set as new head of the free list */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	609a      	str	r2, [r3, #8]
    ++me->nFree;            /* one more free block in this pool */
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8a1b      	ldrh	r3, [r3, #16]
 800273e:	b29b      	uxth	r3, r3
 8002740:	3301      	adds	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	821a      	strh	r2, [r3, #16]
        QS_TIME_PRE_();         /* timestamp */
        QS_OBJ_PRE_(me);        /* this memory pool */
        QS_MPC_PRE_(me->nFree); /* the number of free blocks in the pool */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8002748:	2300      	movs	r3, #0
 800274a:	f383 8811 	msr	BASEPRI, r3
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	08002ebc 	.word	0x08002ebc

0800275c <QActive_psInit>:
/*${QF::QActive::psInit} ...................................................*/
/*! @static @public @memberof QActive */
void QActive_psInit(
    QSubscrList * const subscrSto,
    enum_t const maxSignal)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
    QActive_subscrList_   = subscrSto;
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <QActive_psInit+0x2c>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6013      	str	r3, [r2, #0]
    QActive_maxPubSignal_ = maxSignal;
 800276c:	4a07      	ldr	r2, [pc, #28]	; (800278c <QActive_psInit+0x30>)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6013      	str	r3, [r2, #0]

    /* zero the subscriber list, so that the framework can start correctly
    * even if the startup code fails to clear the uninitialized data
    * (as is required by the C Standard).
    */
    QF_bzero(subscrSto, (uint_fast16_t)maxSignal * sizeof(QSubscrList));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f809 	bl	8002790 <QF_bzero>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000118 	.word	0x20000118
 800278c:	2000011c 	.word	0x2000011c

08002790 <QF_bzero>:
/*${QF::QF-pkg::bzero} .....................................................*/
/*! @static @public @memberof QF */
void QF_bzero(
    void * const start,
    uint_fast16_t const len)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	e008      	b.n	80027b6 <QF_bzero+0x26>
        *ptr = 0U;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
        ++ptr;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3301      	adds	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f3      	bne.n	80027a4 <QF_bzero+0x14>
    }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <QActive_ctor>:

/*${QF::QActive::ctor} .....................................................*/
/*! @protected @memberof QActive */
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
    };
    /* clear the whole QActive object, so that the framework can start
    * correctly even if the startup code fails to clear the uninitialized
    * data (as is required by the C Standard).
    */
    QF_bzero(me, sizeof(*me));
 80027d6:	2120      	movs	r1, #32
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ffd9 	bl	8002790 <QF_bzero>

    QHsm_ctor(&me->super, initial); /* explicitly call superclass' ctor */
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6839      	ldr	r1, [r7, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fa06 	bl	8001bf4 <QHsm_ctor>
    me->super.vptr = &vtable.super; /* hook the vptr to QActive vtable */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <QActive_ctor+0x2c>)
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	08002ecc 	.word	0x08002ecc

080027fc <QActive_register_>:
/*$enddef${QF::QActive::ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QF::QActive::register_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QF::QActive::register_} ................................................*/
/*! @protected @memberof QActive */
void QActive_register_(QActive * const me) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    if (me->pthre == 0U) { /* preemption-threshold not defined? */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7f5b      	ldrb	r3, [r3, #29]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <QActive_register_+0x18>
        me->pthre = me->prio; /* apply the default */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7f1a      	ldrb	r2, [r3, #28]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	775a      	strb	r2, [r3, #29]
    }

    #ifndef Q_NASSERT

    Q_REQUIRE_ID(100, (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7f1b      	ldrb	r3, [r3, #28]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d011      	beq.n	8002840 <QActive_register_+0x44>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7f1b      	ldrb	r3, [r3, #28]
 8002820:	2b20      	cmp	r3, #32
 8002822:	d80d      	bhi.n	8002840 <QActive_register_+0x44>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7f1b      	ldrb	r3, [r3, #28]
 8002828:	461a      	mov	r2, r3
 800282a:	4b33      	ldr	r3, [pc, #204]	; (80028f8 <QActive_register_+0xfc>)
 800282c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <QActive_register_+0x44>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7f1a      	ldrb	r2, [r3, #28]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7f5b      	ldrb	r3, [r3, #29]
 800283c:	429a      	cmp	r2, r3
 800283e:	d903      	bls.n	8002848 <QActive_register_+0x4c>
 8002840:	2164      	movs	r1, #100	; 0x64
 8002842:	482e      	ldr	r0, [pc, #184]	; (80028fc <QActive_register_+0x100>)
 8002844:	f7fe fd94 	bl	8001370 <Q_onAssert>
                      && (QActive_registry_[me->prio] == (QActive *)0)
                      && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7f5b      	ldrb	r3, [r3, #29]
 800284c:	73fb      	strb	r3, [r7, #15]
    uint8_t next_thre = me->pthre;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7f5b      	ldrb	r3, [r3, #29]
 8002852:	73bb      	strb	r3, [r7, #14]
    uint_fast8_t p;

    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7f1b      	ldrb	r3, [r3, #28]
 8002858:	3b01      	subs	r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	e00f      	b.n	800287e <QActive_register_+0x82>
        if (QActive_registry_[p] != (QActive *)0) {
 800285e:	4a26      	ldr	r2, [pc, #152]	; (80028f8 <QActive_register_+0xfc>)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <QActive_register_+0x7c>
            prev_thre = QActive_registry_[p]->pthre;
 800286a:	4a23      	ldr	r2, [pc, #140]	; (80028f8 <QActive_register_+0xfc>)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	7f5b      	ldrb	r3, [r3, #29]
 8002874:	73fb      	strb	r3, [r7, #15]
            break;
 8002876:	e005      	b.n	8002884 <QActive_register_+0x88>
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	3b01      	subs	r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ec      	bne.n	800285e <QActive_register_+0x62>
        }
    }
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7f1b      	ldrb	r3, [r3, #28]
 8002888:	3301      	adds	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	e00f      	b.n	80028ae <QActive_register_+0xb2>
        if (QActive_registry_[p] != (QActive *)0) {
 800288e:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <QActive_register_+0xfc>)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <QActive_register_+0xac>
            next_thre = QActive_registry_[p]->pthre;
 800289a:	4a17      	ldr	r2, [pc, #92]	; (80028f8 <QActive_register_+0xfc>)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a2:	7f5b      	ldrb	r3, [r3, #29]
 80028a4:	73bb      	strb	r3, [r7, #14]
            break;
 80028a6:	e005      	b.n	80028b4 <QActive_register_+0xb8>
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3301      	adds	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d9ec      	bls.n	800288e <QActive_register_+0x92>
        }
    }

    Q_ENSURE_ID(190, (prev_thre <= me->pthre) && (me->pthre <= next_thre));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7f5b      	ldrb	r3, [r3, #29]
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d804      	bhi.n	80028c8 <QActive_register_+0xcc>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7f5b      	ldrb	r3, [r3, #29]
 80028c2:	7bba      	ldrb	r2, [r7, #14]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d203      	bcs.n	80028d0 <QActive_register_+0xd4>
 80028c8:	21be      	movs	r1, #190	; 0xbe
 80028ca:	480c      	ldr	r0, [pc, #48]	; (80028fc <QActive_register_+0x100>)
 80028cc:	f7fe fd50 	bl	8001370 <Q_onAssert>

    #endif // Q_NASSERT

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80028d0:	233f      	movs	r3, #63	; 0x3f
 80028d2:	b672      	cpsid	i
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	b662      	cpsie	i
    /* register the AO at the "QF-priority" */
    QActive_registry_[me->prio] = me;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7f1b      	ldrb	r3, [r3, #28]
 80028de:	4619      	mov	r1, r3
 80028e0:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <QActive_register_+0xfc>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    QF_CRIT_X_();
 80028e8:	2300      	movs	r3, #0
 80028ea:	f383 8811 	msr	BASEPRI, r3
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000120 	.word	0x20000120
 80028fc:	08002ec4 	.word	0x08002ec4

08002900 <QEQueue_init>:
/*${QF::QEQueue::init} .....................................................*/
/*! @public @memberof QEQueue */
void QEQueue_init(QEQueue * const me,
    QEvt const ** const qSto,
    uint_fast16_t const qLen)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; /* no events in the queue */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      /* the beginning of the ring buffer */
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <QEQueue_init+0x32>
        me->head = 0U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); /* +1 for frontEvt */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3301      	adds	r3, #1
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	7adb      	ldrb	r3, [r3, #11]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	731a      	strb	r2, [r3, #12]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <QTimeEvt_ctorX>:
/*! @public @memberof QTimeEvt */
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
    Q_REQUIRE_ID(300, (sig != 0)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <QTimeEvt_ctorX+0x1a>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d904      	bls.n	8002978 <QTimeEvt_ctorX+0x24>
 800296e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002972:	480f      	ldr	r0, [pc, #60]	; (80029b0 <QTimeEvt_ctorX+0x5c>)
 8002974:	f7fe fcfc 	bl	8001370 <Q_onAssert>
        && (tickRate < QF_MAX_TICK_RATE));

    me->next      = (QTimeEvt *)0;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	605a      	str	r2, [r3, #4]
    me->ctr       = 0U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
    me->interval  = 0U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
    me->super.sig = (QSignal)sig;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	801a      	strh	r2, [r3, #0]
    /* For backwards compatibility with the deprecated QTimeEvt_ctor(),
    * the active object pointer `act` can be uninitialized (NULL) and is
    * NOT validated in the precondition. The active object pointer is
    * validated in preconditions to QTimeEvt_armX() and QTimeEvt_rearm().
    */
    me->act = act;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	609a      	str	r2, [r3, #8]

    /* Setting the POOL_ID event attribute to zero is correct only for
    * events not allocated from event pools, which must be the case
    * for Time Events.
    */
    me->super.poolId_ = 0U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	709a      	strb	r2, [r3, #2]

    /* The refCtr_ attribute is not used in time events, so it is
    * reused to hold the tickRate as well as other information
    */
    me->super.refCtr_ = (uint8_t)tickRate;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	70da      	strb	r2, [r3, #3]
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	08002ee0 	.word	0x08002ee0

080029b4 <QTimeEvt_armX>:
/*${QF::QTimeEvt::armX} ....................................................*/
/*! @public @memberof QTimeEvt */
void QTimeEvt_armX(QTimeEvt * const me,
    QTimeEvtCtr const nTicks,
    QTimeEvtCtr const interval)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	78db      	ldrb	r3, [r3, #3]
 80029c4:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	617b      	str	r3, [r7, #20]
    QTimeEvtCtr const ctr = me->ctr;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	613b      	str	r3, [r7, #16]
    #ifdef Q_SPY
    uint_fast8_t const qs_id = ((QActive *)(me->act))->prio;
    #endif

    Q_REQUIRE_ID(400, (me->act != (void *)0)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00c      	beq.n	80029f4 <QTimeEvt_armX+0x40>
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <QTimeEvt_armX+0x40>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <QTimeEvt_armX+0x40>
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d803      	bhi.n	80029f4 <QTimeEvt_armX+0x40>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d804      	bhi.n	80029fe <QTimeEvt_armX+0x4a>
 80029f4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80029f8:	481b      	ldr	r0, [pc, #108]	; (8002a68 <QTimeEvt_armX+0xb4>)
 80029fa:	f7fe fcb9 	bl	8001370 <Q_onAssert>
    #ifdef Q_NASSERT
    Q_UNUSED_PAR(ctr);
    #endif

    QF_CRIT_STAT_
    QF_CRIT_E_();
 80029fe:	233f      	movs	r3, #63	; 0x3f
 8002a00:	b672      	cpsid	i
 8002a02:	f383 8811 	msr	BASEPRI, r3
 8002a06:	b662      	cpsie	i
    me->ctr = nTicks;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
    me->interval = interval;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	611a      	str	r2, [r3, #16]
    /* is the time event unlinked?
    * NOTE: For the duration of a single clock tick of the specified tick
    * rate a time event can be disarmed and yet still linked into the list,
    * because un-linking is performed exclusively in QTimeEvt_tick_().
    */
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	78db      	ldrb	r3, [r3, #3]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db1c      	blt.n	8002a5a <QTimeEvt_armX+0xa6>
        me->super.refCtr_ |= QTE_IS_LINKED; /* mark as linked */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	78db      	ldrb	r3, [r3, #3]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	70da      	strb	r2, [r3, #3]
        * list is appended to the main list of armed time events based on
        * QTimeEvt_timeEvtHead_[tickRate].next. Again, this is to keep any
        * changes to the main list exclusively inside the QTimeEvt_tick_()
        * function.
        */
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8002a30:	490e      	ldr	r1, [pc, #56]	; (8002a6c <QTimeEvt_armX+0xb8>)
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3308      	adds	r3, #8
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 8002a46:	4909      	ldr	r1, [pc, #36]	; (8002a6c <QTimeEvt_armX+0xb8>)
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3308      	adds	r3, #8
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(nTicks);   /* the number of ticks */
        QS_TEC_PRE_(interval); /* the interval */
        QS_U8_PRE_(tickRate);  /* tick rate */
    QS_END_NOCRIT_PRE_()

    QF_CRIT_X_();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f383 8811 	msr	BASEPRI, r3
}
 8002a60:	bf00      	nop
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	08002ee0 	.word	0x08002ee0
 8002a6c:	200001a8 	.word	0x200001a8

08002a70 <QTimeEvt_tick_>:
/*${QF::QTimeEvt::tick_} ...................................................*/
/*! @static @private @memberof QTimeEvt */
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    #endif

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4a4a      	ldr	r2, [pc, #296]	; (8002bb0 <QTimeEvt_tick_+0x140>)
 8002a86:	4413      	add	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT_
    QF_CRIT_E_();
 8002a8a:	233f      	movs	r3, #63	; 0x3f
 8002a8c:	b672      	cpsid	i
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	b662      	cpsie	i
        QS_U8_PRE_(tickRate);   /* tick rate */
    QS_END_NOCRIT_PRE_()

    /* scan the linked-list of time events at this rate... */
    for (;;) {
        QTimeEvt *t = prev->next;  /* advance down the time evt. list */
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]

        /* end of the list? */
        if (t == (QTimeEvt *)0) {
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d12c      	bne.n	8002afa <QTimeEvt_tick_+0x8a>

            /* any new time events armed since the last QTimeEvt_tick_()? */
            if (QTimeEvt_timeEvtHead_[tickRate].act != (void *)0) {
 8002aa0:	4943      	ldr	r1, [pc, #268]	; (8002bb0 <QTimeEvt_tick_+0x140>)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3308      	adds	r3, #8
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d074      	beq.n	8002ba0 <QTimeEvt_tick_+0x130>

                /* sanity check */
                Q_ASSERT_CRIT_(110, prev != (QTimeEvt *)0);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <QTimeEvt_tick_+0x5a>
 8002abc:	2300      	movs	r3, #0
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	216e      	movs	r1, #110	; 0x6e
 8002ac4:	483b      	ldr	r0, [pc, #236]	; (8002bb4 <QTimeEvt_tick_+0x144>)
 8002ac6:	f7fe fc53 	bl	8001370 <Q_onAssert>
                prev->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8002aca:	4939      	ldr	r1, [pc, #228]	; (8002bb0 <QTimeEvt_tick_+0x140>)
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3308      	adds	r3, #8
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	605a      	str	r2, [r3, #4]
                QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 8002ae0:	4933      	ldr	r1, [pc, #204]	; (8002bb0 <QTimeEvt_tick_+0x140>)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3308      	adds	r3, #8
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
                t = prev->next;  /* switch to the new list */
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	613b      	str	r3, [r7, #16]
                break; /* all currently armed time evts. processed */
            }
        }

        /* time event scheduled for removal? */
        if (t->ctr == 0U) {
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d111      	bne.n	8002b26 <QTimeEvt_tick_+0xb6>
            prev->next = t->next;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	605a      	str	r2, [r3, #4]
            /* mark time event 't' as NOT linked */
            t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	78db      	ldrb	r3, [r3, #3]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	70da      	strb	r2, [r3, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_X_(); /* exit crit. section to reduce latency */
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f383 8811 	msr	BASEPRI, r3

            /* prevent merging critical sections, see NOTE1 below  */
            QF_CRIT_EXIT_NOP();
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	e036      	b.n	8002b94 <QTimeEvt_tick_+0x124>
        }
        else {
            --t->ctr;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	1e5a      	subs	r2, r3, #1
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	60da      	str	r2, [r3, #12]

            /* is time event about to expire? */
            if (t->ctr == 0U) {
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d126      	bne.n	8002b86 <QTimeEvt_tick_+0x116>
                QActive * const act = (QActive *)t->act;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	60fb      	str	r3, [r7, #12]

                /* periodic time evt? */
                if (t->interval != 0U) {
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <QTimeEvt_tick_+0xe4>
                    t->ctr = t->interval; /* rearm the time event */
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	60da      	str	r2, [r3, #12]
                    prev = t; /* advance to this time event */
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e00b      	b.n	8002b6c <QTimeEvt_tick_+0xfc>
                }
                /* one-shot time event: automatically disarm */
                else {
                    prev->next = t->next;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	605a      	str	r2, [r3, #4]
                    /* mark time event 't' as NOT linked */
                    t->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	78db      	ldrb	r3, [r3, #3]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	70da      	strb	r2, [r3, #3]
                    QS_SIG_PRE_(t->super.sig); /* signal of this time event */
                    QS_OBJ_PRE_(act);          /* the target AO */
                    QS_U8_PRE_(tickRate);      /* tick rate */
                QS_END_NOCRIT_PRE_()

                QF_CRIT_X_(); /* exit critical section before posting */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f383 8811 	msr	BASEPRI, r3

                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68dc      	ldr	r4, [r3, #12]
 8002b78:	6939      	ldr	r1, [r7, #16]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	47a0      	blx	r4
 8002b84:	e006      	b.n	8002b94 <QTimeEvt_tick_+0x124>
            }
            else {
                prev = t;         /* advance to this time event */
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	617b      	str	r3, [r7, #20]
                QF_CRIT_X_();  /* exit crit. section to reduce latency */
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f383 8811 	msr	BASEPRI, r3
                * two adjacent critical sections would be merged. The
                * QF_CRIT_EXIT_NOP() macro contains minimal code required
                * to prevent such merging of critical sections in QF ports,
                * in which it can occur.
                */
                QF_CRIT_EXIT_NOP();
 8002b90:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_E_(); /* re-enter crit. section to continue */
 8002b94:	233f      	movs	r3, #63	; 0x3f
 8002b96:	b672      	cpsid	i
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	b662      	cpsie	i
    for (;;) {
 8002b9e:	e779      	b.n	8002a94 <QTimeEvt_tick_+0x24>
                break; /* all currently armed time evts. processed */
 8002ba0:	bf00      	nop
    }
    QF_CRIT_X_();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f383 8811 	msr	BASEPRI, r3
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd90      	pop	{r4, r7, pc}
 8002bb0:	200001a8 	.word	0x200001a8
 8002bb4:	08002ee0 	.word	0x08002ee0

08002bb8 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
        return (me->bits != 0U);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <QPSet_remove>:
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
        me->bits = (me->bits &
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681a      	ldr	r2, [r3, #0]
            (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	2101      	movs	r1, #1
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43db      	mvns	r3, r3
        me->bits = (me->bits &
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <QPSet_findMax>:
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
        return QF_LOG2(me->bits);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	f1c3 0320 	rsb	r3, r3, #32
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <QF_init>:
/*$enddef${QV::QV-base} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${QV::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${QV::QF-cust::init} .....................................................*/
/*! @static @public @memberof QF */
void QF_init(void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
    #if (QF_MAX_EPOOL > 0U)
    QF_maxPool_ = 0U;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <QF_init+0x2c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
    #endif

    QF_bzero(&QTimeEvt_timeEvtHead_[0], sizeof(QTimeEvt_timeEvtHead_));
 8002c32:	2128      	movs	r1, #40	; 0x28
 8002c34:	4808      	ldr	r0, [pc, #32]	; (8002c58 <QF_init+0x30>)
 8002c36:	f7ff fdab 	bl	8002790 <QF_bzero>
    QF_bzero(&QActive_registry_[0],     sizeof(QActive_registry_));
 8002c3a:	2184      	movs	r1, #132	; 0x84
 8002c3c:	4807      	ldr	r0, [pc, #28]	; (8002c5c <QF_init+0x34>)
 8002c3e:	f7ff fda7 	bl	8002790 <QF_bzero>
    QF_bzero(&QF_readySet_,             sizeof(QF_readySet_));
 8002c42:	2104      	movs	r1, #4
 8002c44:	4806      	ldr	r0, [pc, #24]	; (8002c60 <QF_init+0x38>)
 8002c46:	f7ff fda3 	bl	8002790 <QF_bzero>

    #ifdef QV_INIT
    QV_INIT(); /* port-specific initialization of the QV kernel */
 8002c4a:	f7fe ff89 	bl	8001b60 <QV_init>
    #endif
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200000d8 	.word	0x200000d8
 8002c58:	200001a8 	.word	0x200001a8
 8002c5c:	20000120 	.word	0x20000120
 8002c60:	200001a4 	.word	0x200001a4

08002c64 <QF_run>:
    /* nothing else to do for the cooperative QV kernel */
}

/*${QV::QF-cust::run} ......................................................*/
/*! @static @public @memberof QF */
int_t QF_run(void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
    QS_beginRec_((uint_fast8_t)QS_QF_RUN);
    QS_endRec_();
    QF_INT_ENABLE();
    #endif /* Q_SPY */

    QF_onStartup(); /* application-specific startup callback */
 8002c6a:	f7fe fb5d 	bl	8001328 <QF_onStartup>

    QF_INT_DISABLE();
 8002c6e:	233f      	movs	r3, #63	; 0x3f
 8002c70:	b672      	cpsid	i
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	b662      	cpsie	i

    #ifdef QV_START
    QV_START(); /* port-specific startup of the QV kernel */
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f383 8814 	msr	CONTROL, r3
    #endif /* (defined QF_ON_CONTEXT_SW) || (defined Q_SPY) */

    for (;;) { /* QV event loop... */

        /* find the maximum priority AO ready to run */
        if (QPSet_notEmpty(&QF_readySet_)) {
 8002c7e:	481c      	ldr	r0, [pc, #112]	; (8002cf0 <QF_run+0x8c>)
 8002c80:	f7ff ff9a 	bl	8002bb8 <QPSet_notEmpty>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d029      	beq.n	8002cde <QF_run+0x7a>
            uint8_t const p = (uint8_t)QPSet_findMax(&QF_readySet_);
 8002c8a:	4819      	ldr	r0, [pc, #100]	; (8002cf0 <QF_run+0x8c>)
 8002c8c:	f7ff ffbb 	bl	8002c06 <QPSet_findMax>
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]
            QActive * const a = QActive_registry_[p];
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <QF_run+0x90>)
 8002c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9c:	60bb      	str	r3, [r7, #8]
    #endif /* QF_ON_CONTEXT_SW */

            pprev = p; /* update previous priority */
    #endif /* (defined QF_ON_CONTEXT_SW) || (defined Q_SPY) */

            QF_INT_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f383 8811 	msr	BASEPRI, r3
            * 1. retrieve the event from the AO's event queue, which
            *    by this time must be non-empty (and QV asserts it).
            * 2. dispatch the event to the AO's state machine.
            * 3. determine if event is garbage and collect it if so
            */
            QEvt const * const e = QActive_get_(a);
 8002ca4:	68b8      	ldr	r0, [r7, #8]
 8002ca6:	f7ff fb35 	bl	8002314 <QActive_get_>
 8002caa:	6078      	str	r0, [r7, #4]
            QHSM_DISPATCH(&a->super, e, a->prio);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	68b8      	ldr	r0, [r7, #8]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4798      	blx	r3
    #if (QF_MAX_EPOOL > 0U)
            QF_gc(e);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fc64 	bl	8002588 <QF_gc>
    #endif
            QF_INT_DISABLE();
 8002cc0:	233f      	movs	r3, #63	; 0x3f
 8002cc2:	b672      	cpsid	i
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	b662      	cpsie	i

            if (a->eQueue.frontEvt == (QEvt *)0) { /* empty queue? */
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1d5      	bne.n	8002c7e <QF_run+0x1a>
                QPSet_remove(&QF_readySet_, p);
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4806      	ldr	r0, [pc, #24]	; (8002cf0 <QF_run+0x8c>)
 8002cd8:	f7ff ff7f 	bl	8002bda <QPSet_remove>
 8002cdc:	e7cf      	b.n	8002c7e <QF_run+0x1a>
            *
            * NOTE: QV_onIdle() MUST enable interrupts internally,
            * ideally at the same time as putting the CPU into a power-
            * saving mode.
            */
            QV_onIdle();
 8002cde:	f7fe fb3d 	bl	800135c <QV_onIdle>

            QF_INT_DISABLE(); /* disable interrupts before looping back */
 8002ce2:	233f      	movs	r3, #63	; 0x3f
 8002ce4:	b672      	cpsid	i
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	b662      	cpsie	i
        if (QPSet_notEmpty(&QF_readySet_)) {
 8002cec:	e7c7      	b.n	8002c7e <QF_run+0x1a>
 8002cee:	bf00      	nop
 8002cf0:	200001a4 	.word	0x200001a4
 8002cf4:	20000120 	.word	0x20000120

08002cf8 <QActive_start_>:
    QEvt const * * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	460b      	mov	r3, r1
 8002d06:	817b      	strh	r3, [r7, #10]
    Q_UNUSED_PAR(stkSto);  /* not needed in QV */
    Q_UNUSED_PAR(stkSize); /* not needed in QV */

    Q_REQUIRE_ID(300, stkSto == (void *)0);
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <QActive_start_+0x20>
 8002d0e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002d12:	4815      	ldr	r0, [pc, #84]	; (8002d68 <QActive_start_+0x70>)
 8002d14:	f7fe fb2c 	bl	8001370 <Q_onAssert>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); /* QF-priority of the AO */
 8002d18:	897b      	ldrh	r3, [r7, #10]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	771a      	strb	r2, [r3, #28]
    me->pthre = (uint8_t)(prioSpec >> 8U);   /* preemption-threshold */
 8002d20:	897b      	ldrh	r3, [r7, #10]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	775a      	strb	r2, [r3, #29]
    QActive_register_(me); /* make QF aware of this active object */
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff fd65 	bl	80027fc <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); /* init the built-in queue */
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	330c      	adds	r3, #12
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fde0 	bl	8002900 <QEQueue_init>

    QHSM_INIT(&me->super, par, me->prio); /* top-most initial tran. */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <QActive_start_+0x58>
 8002d48:	21dc      	movs	r1, #220	; 0xdc
 8002d4a:	4807      	ldr	r0, [pc, #28]	; (8002d68 <QActive_start_+0x70>)
 8002d4c:	f7fe fb10 	bl	8001370 <Q_onAssert>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	6a39      	ldr	r1, [r7, #32]
 8002d5c:	4798      	blx	r3
    QS_FLUSH(); /* flush the trace buffer to the host */
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	08002ee8 	.word	0x08002ee8

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	4d0d      	ldr	r5, [pc, #52]	; (8002da4 <__libc_init_array+0x38>)
 8002d70:	4c0d      	ldr	r4, [pc, #52]	; (8002da8 <__libc_init_array+0x3c>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	2600      	movs	r6, #0
 8002d78:	42a6      	cmp	r6, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	4d0b      	ldr	r5, [pc, #44]	; (8002dac <__libc_init_array+0x40>)
 8002d7e:	4c0c      	ldr	r4, [pc, #48]	; (8002db0 <__libc_init_array+0x44>)
 8002d80:	f000 f820 	bl	8002dc4 <_init>
 8002d84:	1b64      	subs	r4, r4, r5
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	2600      	movs	r6, #0
 8002d8a:	42a6      	cmp	r6, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d94:	4798      	blx	r3
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9e:	4798      	blx	r3
 8002da0:	3601      	adds	r6, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	08002eec 	.word	0x08002eec
 8002da8:	08002eec 	.word	0x08002eec
 8002dac:	08002eec 	.word	0x08002eec
 8002db0:	08002ef0 	.word	0x08002ef0

08002db4 <memset>:
 8002db4:	4402      	add	r2, r0
 8002db6:	4603      	mov	r3, r0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d100      	bne.n	8002dbe <memset+0xa>
 8002dbc:	4770      	bx	lr
 8002dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc2:	e7f9      	b.n	8002db8 <memset+0x4>

08002dc4 <_init>:
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	bf00      	nop
 8002dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dca:	bc08      	pop	{r3}
 8002dcc:	469e      	mov	lr, r3
 8002dce:	4770      	bx	lr

08002dd0 <_fini>:
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	bf00      	nop
 8002dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd6:	bc08      	pop	{r3}
 8002dd8:	469e      	mov	lr, r3
 8002dda:	4770      	bx	lr
